{"version":3,"file":"route.js","sourceRoot":"","sources":["route.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextResponse, type NextRequest } from 'next/server';\r\n// Lazy load Clerk's getAuth function\r\nlet _getAuth: any;\r\n\r\nconst getAuth = (req: Request) => {\r\n  if (!_getAuth) {\r\n    try {\r\n      // This will be evaluated at runtime\r\n      _getAuth = require('@clerk/nextjs/server').getAuth;\r\n    } catch (error) {\r\n      console.error('Failed to load Clerk:', error);\r\n      // Fallback mock for development\r\n      _getAuth = () => ({ userId: process.env.NODE_ENV === 'development' ? 'dev-user' : null });\r\n    }\r\n  }\r\n  return _getAuth(req);\r\n};\r\nimport { db } from '@/lib/db';\r\nimport { waitlistFormSchema } from '@/lib/validations/waitlist';\r\nimport { z } from 'zod';\r\nimport type { Waitlist } from '@prisma/client';\r\n\r\n// Enable debug logging in development\r\nconst isDev = process.env.NODE_ENV === 'development';\r\nconst log = (...args: any[]) => isDev && console.log('[Waitlist API]', ...args);\r\n\r\n// GET /api/waitlists/[id] - Get a specific waitlist\r\nexport async function GET(req: NextRequest, { params }: { params: { id: string } }) {\r\n  try {\r\n    // Verify authentication\r\n    const { userId } = getAuth(req);\r\n    if (!userId) {\r\n      return new NextResponse('Unauthorized', { status: 401 });\r\n    }\r\n\r\n    // Get the waitlist ID from the URL parameters\r\n    const waitlistId = params.id;\r\n\r\n    // Find the user in the database\r\n    const user = await db.user.findUnique({\r\n      where: { externalId: userId },\r\n    });\r\n\r\n    if (!user) {\r\n      return new NextResponse('User not found', { status: 404 });\r\n    }\r\n\r\n    // Find the waitlist, ensuring it belongs to the authenticated user\r\n    const waitlist = await db.waitlist.findFirst({\r\n      where: {\r\n        id: waitlistId,\r\n        userId: user.id, // Ensure the waitlist belongs to the authenticated user\r\n      },\r\n      include: {\r\n        _count: {\r\n          select: {\r\n            subscribers: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    if (!waitlist) {\r\n      return new NextResponse('Waitlist not found', { status: 404 });\r\n    }\r\n\r\n    return NextResponse.json(waitlist);\r\n  } catch (error) {\r\n    console.error('[WAITLISTS_GET_ONE]', error);\r\n    log('Error details:', error);\r\n\r\n    if (error instanceof Error) {\r\n      log('Error stack:', error.stack);\r\n      return new NextResponse(\r\n        JSON.stringify({\r\n          error: error.message,\r\n          stack: isDev ? error.stack : undefined,\r\n        }),\r\n        {\r\n          status: 500,\r\n          headers: { 'Content-Type': 'application/json' },\r\n        },\r\n      );\r\n    }\r\n\r\n    return new NextResponse(\r\n      JSON.stringify({\r\n        error: 'Internal server error',\r\n        details: isDev ? String(error) : undefined,\r\n      }),\r\n      {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' },\r\n      },\r\n    );\r\n  }\r\n}\r\n\r\n// PATCH /api/waitlists/[id] - Partially update a waitlist\r\nexport async function PATCH(req: NextRequest, { params }: { params: { id: string } }) {\r\n  return handleUpdateWaitlist(req, params.id, false);\r\n}\r\n\r\n// PUT /api/waitlists/[id] - Replace a waitlist (full update)\r\nexport async function PUT(req: NextRequest, { params }: { params: { id: string } }) {\r\n  return handleUpdateWaitlist(req, params.id, true);\r\n}\r\n\r\n// DELETE /api/waitlists/[id] - Delete a waitlist\r\nexport async function DELETE(req: NextRequest, { params }: { params: { id: string } }) {\r\n  try {\r\n    // Verify authentication\r\n    const { userId } = getAuth(req);\r\n    if (!userId) {\r\n      return new NextResponse('Unauthorized', { status: 401 });\r\n    }\r\n\r\n    // Get the waitlist ID from the URL parameters\r\n    const waitlistId = params.id;\r\n\r\n    // Find the user in the database\r\n    const user = await db.user.findUnique({\r\n      where: { externalId: userId },\r\n    });\r\n\r\n    if (!user) {\r\n      return new NextResponse('User not found', { status: 404 });\r\n    }\r\n\r\n    // Check if the waitlist exists and belongs to the user\r\n    const existingWaitlist = await db.waitlist.findFirst({\r\n      where: {\r\n        id: waitlistId,\r\n        userId: user.id,\r\n      },\r\n    });\r\n\r\n    if (!existingWaitlist) {\r\n      return new NextResponse('Waitlist not found', { status: 404 });\r\n    }\r\n\r\n    // Use a transaction to ensure data consistency\r\n    await db.$transaction([\r\n      // First delete all related subscribers\r\n      db.subscriber.deleteMany({\r\n        where: { waitlistId },\r\n      }),\r\n      // Then delete the waitlist\r\n      db.waitlist.delete({\r\n        where: { id: waitlistId },\r\n      }),\r\n    ]);\r\n\r\n    // Return 204 No Content on successful deletion\r\n    return new NextResponse(null, { status: 204 });\r\n  } catch (error) {\r\n    console.error('[WAITLISTS_DELETE]', error);\r\n\r\n    // Log the error details, including the stack trace, for debugging purposes\r\n    if (error instanceof Error) {\r\n      console.error('Error details:', error.message, error.stack);\r\n    }\r\n\r\n    return new NextResponse(\r\n      JSON.stringify({\r\n        error: 'Internal server error',\r\n      }),\r\n      {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' },\r\n      },\r\n    );\r\n  }\r\n}\r\n\r\n// Shared handler for both PUT and PATCH\r\nasync function handleUpdateWaitlist(req: NextRequest, waitlistId: string, isFullUpdate: boolean) {\r\n  try {\r\n    // Verify authentication\r\n    const { userId } = getAuth(req);\r\n    if (!userId) {\r\n      return new NextResponse('Unauthorized', { status: 401 });\r\n    }\r\n\r\n    // Find the user in the database\r\n    const user = await db.user.findUnique({\r\n      where: { externalId: userId },\r\n    });\r\n\r\n    if (!user) {\r\n      return new NextResponse('User not found', { status: 404 });\r\n    }\r\n\r\n    // Check if the waitlist exists and belongs to the user\r\n    const existingWaitlist = await db.waitlist.findFirst({\r\n      where: {\r\n        id: waitlistId,\r\n        userId: user.id,\r\n      },\r\n    });\r\n\r\n    if (!existingWaitlist) {\r\n      return new NextResponse('Waitlist not found', { status: 404 });\r\n    }\r\n\r\n    // Parse and validate request body\r\n    const json = await req.json();\r\n\r\n    // For PATCH, merge with existing data; for PUT, use the provided data directly\r\n    const updateData = isFullUpdate ? json : { ...json }; // Don't spread existingWaitlist to avoid including internal fields\r\n\r\n    // For PATCH requests, we'll only validate and update the provided fields\r\n    const updatedData: Partial<Waitlist> = {};\r\n\r\n    // Only validate and include fields that were actually provided in the request\r\n    if (updateData.status !== undefined) {\r\n      updatedData.status = updateData.status;\r\n    }\r\n\r\n    // If this is a full update (PUT), validate all required fields\r\n    if (isFullUpdate) {\r\n      const body = waitlistFormSchema.parse(updateData);\r\n      Object.assign(updatedData, body);\r\n    } else if (updateData.name !== undefined) {\r\n      updatedData.name = updateData.name;\r\n    }\r\n\r\n    // Handle slug update if name is being changed\r\n    if (updatedData.name && updatedData.name !== existingWaitlist.name) {\r\n      const slug = updatedData.name\r\n        .toLowerCase()\r\n        .replace(/[^a-z0-9]+/g, '-')\r\n        .replace(/(^-|-$)/g, '');\r\n\r\n      // Check if the new slug is already in use by another waitlist of the same user\r\n      const slugInUse = await db.waitlist.findFirst({\r\n        where: {\r\n          slug,\r\n          userId: user.id,\r\n          id: { not: waitlistId },\r\n        },\r\n      });\r\n\r\n      if (slugInUse) {\r\n        return new NextResponse('You already have a waitlist with this name', {\r\n          status: 400,\r\n        });\r\n      }\r\n\r\n      updatedData.slug = slug;\r\n    }\r\n\r\n    // Update the waitlist\r\n    const updatedWaitlist = await db.waitlist.update({\r\n      where: { id: waitlistId },\r\n      data: updateData,\r\n      include: {\r\n        _count: {\r\n          select: {\r\n            subscribers: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    return NextResponse.json(updatedWaitlist);\r\n  } catch (error) {\r\n    console.error('[WAITLISTS_UPDATE]', error);\r\n\r\n    // Log the full error in development\r\n    if (isDev) {\r\n      console.error('Full error details:', {\r\n        message: error instanceof Error ? error.message : 'Unknown error',\r\n        stack: error instanceof Error ? error.stack : undefined,\r\n        error,\r\n      });\r\n    }\r\n\r\n    if (error instanceof z.ZodError) {\r\n      return new NextResponse(\r\n        JSON.stringify({\r\n          error: 'Validation error',\r\n          details: error.errors,\r\n        }),\r\n        {\r\n          status: 400,\r\n          headers: { 'Content-Type': 'application/json' },\r\n        },\r\n      );\r\n    }\r\n\r\n    if (error instanceof Error) {\r\n      return new NextResponse(\r\n        JSON.stringify({\r\n          error: error.message,\r\n        }),\r\n        {\r\n          status: 500,\r\n          headers: { 'Content-Type': 'application/json' },\r\n        },\r\n      );\r\n    }\r\n\r\n    // Log the error details on the server\r\n    console.error('[WAITLISTS_UPDATE] Internal server error:', {\r\n      message: error instanceof Error ? error.message : 'Unknown error',\r\n      stack: error instanceof Error ? error.stack : undefined,\r\n      error,\r\n    });\r\n\r\n    return new NextResponse(\r\n      JSON.stringify({\r\n        error: 'Internal server error',\r\n      }),\r\n      {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' },\r\n      },\r\n    );\r\n  }\r\n}\r\n"]}