{"version":3,"file":"rate-limit.js","sourceRoot":"","sources":["rate-limit.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,WAAW,CAAC;AAOrC;;GAEG;AACH,MAAM,UAAU,SAAS,CAAC,OAAgB;IACxC,IAAM,UAAU,GAAG,IAAI,QAAQ,CAAmB;QAChD,GAAG,EAAE,OAAO,CAAC,sBAAsB,IAAI,GAAG;QAC1C,GAAG,EAAE,OAAO,CAAC,QAAQ;KACtB,CAAC,CAAC;IAEH,OAAO;QACL,KAAK,EAAE,UAAC,KAAa,EAAE,KAAa;YAClC,OAAA,IAAI,OAAO,CAAuB,UAAC,OAAO;gBACxC,IAAM,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAChD,IAAI,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC;oBACxB,UAAU,CAAC,GAAG,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;gBACpC,CAAC;gBACD,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;gBAEnB,IAAM,YAAY,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;gBACnC,IAAM,aAAa,GAAG,YAAY,GAAG,KAAK,CAAC;gBAE3C,OAAO,OAAO,CAAC;oBACb,OAAO,EAAE,CAAC,aAAa;iBACxB,CAAC,CAAC;YACL,CAAC,CAAC;QAbF,CAaE;KACL,CAAC;AACJ,CAAC","sourcesContent":["import { LRUCache } from 'lru-cache';\r\n\r\ntype Options = {\r\n  uniqueTokenPerInterval?: number;\r\n  interval: number;\r\n};\r\n\r\n/**\r\n * Creates a rate limiting function using an LRU cache to track token usage.\r\n */\r\nexport function rateLimit(options: Options) {\r\n  const tokenCache = new LRUCache<string, number[]>({\r\n    max: options.uniqueTokenPerInterval || 500,\r\n    ttl: options.interval,\r\n  });\r\n\r\n  return {\r\n    check: (limit: number, token: string) =>\r\n      new Promise<{ success: boolean }>((resolve) => {\r\n        const tokenCount = tokenCache.get(token) || [0];\r\n        if (tokenCount[0] === 0) {\r\n          tokenCache.set(token, tokenCount);\r\n        }\r\n        tokenCount[0] += 1;\r\n\r\n        const currentUsage = tokenCount[0];\r\n        const isRateLimited = currentUsage > limit;\r\n\r\n        return resolve({\r\n          success: !isRateLimited,\r\n        });\r\n      }),\r\n  };\r\n}\r\n"]}