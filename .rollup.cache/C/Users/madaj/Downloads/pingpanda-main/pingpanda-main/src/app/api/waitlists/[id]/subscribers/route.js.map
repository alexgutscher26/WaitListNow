{"version":3,"file":"route.js","sourceRoot":"","sources":["route.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextResponse, type NextRequest } from 'next/server';\r\nimport { getAuth } from '@clerk/nextjs/server';\r\nimport { db } from '@/lib/db';\r\nimport { z } from 'zod';\r\n\r\ninterface WaitlistSettings {\r\n  allowDuplicates?: boolean;\r\n  maxSignups?: number;\r\n  emailVerification?: boolean;\r\n  referralEnabled?: boolean;\r\n  referralReward?: string;\r\n  customCss?: string;\r\n  customJs?: string;\r\n}\r\n\r\nfunction getWaitlistSettings(settings: any): WaitlistSettings {\r\n  if (typeof settings !== 'object' || settings === null) {\r\n    return {};\r\n  }\r\n  return settings as WaitlistSettings;\r\n}\r\n\r\n// Validation schema for subscriber data\r\nconst subscriberSchema = z.object({\r\n  email: z.string().email('Invalid email address'),\r\n  name: z.string().optional(),\r\n});\r\n\r\n// Enable debug logging in development\r\nconst isDev = process.env.NODE_ENV === 'development';\r\nconst log = (...args: any[]) => isDev && console.log('[Waitlist Subscribers API]', ...args);\r\n\r\n// GET /api/waitlists/[id]/subscribers - Get subscribers for a specific waitlist\r\n// POST /api/waitlists/[id]/subscribers - Add a new subscriber to a waitlist\r\nexport async function POST(req: NextRequest, { params }: { params: { id: string } }) {\r\n  try {\r\n    // Get the waitlist ID from the URL parameters\r\n    const waitlistId = params.id;\r\n\r\n    // Parse and validate the request body\r\n    const json = await req.json();\r\n    const body = subscriberSchema.parse(json);\r\n\r\n    // Find the waitlist\r\n    const waitlist = await db.waitlist.findUnique({\r\n      where: {\r\n        id: waitlistId,\r\n        status: 'ACTIVE',\r\n      },\r\n    });\r\n\r\n    if (!waitlist) {\r\n      return new NextResponse('Waitlist not found or not active', { status: 404 });\r\n    }\r\n\r\n    // Check if email already exists for this waitlist if duplicates are not allowed\r\n    const settings = getWaitlistSettings(waitlist.settings);\r\n    const allowDuplicates = settings.allowDuplicates === true;\r\n\r\n    if (!allowDuplicates) {\r\n      const existingSubscriber = await db.subscriber.findFirst({\r\n        where: {\r\n          email: body.email,\r\n          waitlistId,\r\n        },\r\n      });\r\n\r\n      if (existingSubscriber) {\r\n        return new NextResponse('Email already subscribed to this waitlist', { status: 400 });\r\n      }\r\n    }\r\n\r\n    // Create the subscriber\r\n    const subscriber = await db.subscriber.create({\r\n      data: {\r\n        email: body.email,\r\n        name: body.name || null,\r\n        waitlistId,\r\n        userId: waitlist.userId, // Link to the waitlist owner\r\n        status: 'PENDING',\r\n      },\r\n    });\r\n\r\n    // Increment the waitlist's subscriber count\r\n    await db.waitlist.update({\r\n      where: { id: waitlistId },\r\n      data: {\r\n        subscriberCount: {\r\n          increment: 1,\r\n        },\r\n      },\r\n    });\r\n\r\n    return NextResponse.json(subscriber);\r\n  } catch (error) {\r\n    console.error('[WAITLIST_SUBSCRIBER_POST]', error);\r\n\r\n    if (error instanceof z.ZodError) {\r\n      return new NextResponse(JSON.stringify({ errors: error.errors }), {\r\n        status: 422,\r\n        headers: { 'Content-Type': 'application/json' },\r\n      });\r\n    }\r\n\r\n    return new NextResponse(\r\n      JSON.stringify({\r\n        error: 'Internal server error',\r\n        details: process.env.NODE_ENV === 'development' ? error : undefined,\r\n      }),\r\n      { status: 500, headers: { 'Content-Type': 'application/json' } },\r\n    );\r\n  }\r\n}\r\n\r\nexport async function GET(req: NextRequest, { params }: { params: { id: string } }) {\r\n  try {\r\n    // Verify authentication\r\n    const { userId } = getAuth(req);\r\n    if (!userId) {\r\n      return new NextResponse('Unauthorized', { status: 401 });\r\n    }\r\n\r\n    // Get query parameters for pagination and filtering\r\n    const { searchParams } = new URL(req.url);\r\n    const page = parseInt(searchParams.get('page') || '1');\r\n    const limit = parseInt(searchParams.get('limit') || '20');\r\n    const status = searchParams.get('status'); // e.g., 'PENDING', 'VERIFIED', 'ALL'\r\n    const search = searchParams.get('search') || '';\r\n\r\n    // Get the waitlist ID from the URL parameters\r\n    const waitlistId = params.id;\r\n\r\n    // Find the user in the database\r\n    const user = await db.user.findUnique({\r\n      where: { externalId: userId },\r\n    });\r\n\r\n    if (!user) {\r\n      return new NextResponse('User not found', { status: 404 });\r\n    }\r\n\r\n    // Check if the waitlist exists and belongs to the user\r\n    const waitlist = await db.waitlist.findFirst({\r\n      where: {\r\n        id: waitlistId,\r\n        userId: user.id,\r\n      },\r\n    });\r\n\r\n    if (!waitlist) {\r\n      return new NextResponse('Waitlist not found', { status: 404 });\r\n    }\r\n\r\n    // Build the where clause for filtering\r\n    const whereClause: any = {\r\n      waitlistId,\r\n    };\r\n\r\n    // Add status filter if provided\r\n    if (status && status !== 'ALL') {\r\n      whereClause.status = status;\r\n    }\r\n\r\n    // Add search filter if provided\r\n    if (search) {\r\n      whereClause.OR = [\r\n        { email: { contains: search, mode: 'insensitive' } },\r\n        { name: { contains: search, mode: 'insensitive' } },\r\n      ];\r\n    }\r\n\r\n    // Get total count for pagination\r\n    const total = await db.subscriber.count({\r\n      where: whereClause,\r\n    });\r\n\r\n    // Calculate pagination values\r\n    const totalPages = Math.ceil(total / limit);\r\n    const skip = (page - 1) * limit;\r\n\r\n    // Get paginated subscribers\r\n    const subscribers = await db.subscriber.findMany({\r\n      where: whereClause,\r\n      skip,\r\n      take: limit,\r\n      orderBy: {\r\n        createdAt: 'desc',\r\n      },\r\n      select: {\r\n        id: true,\r\n        email: true,\r\n        name: true,\r\n        status: true,\r\n        referralCode: true,\r\n        referredBy: true,\r\n        customFields: true,\r\n        createdAt: true,\r\n        updatedAt: true,\r\n      },\r\n    });\r\n\r\n    // Prepare response with pagination metadata\r\n    const response = {\r\n      data: subscribers,\r\n      pagination: {\r\n        total,\r\n        totalPages,\r\n        currentPage: page,\r\n        limit,\r\n        hasNextPage: page < totalPages,\r\n        hasPreviousPage: page > 1,\r\n      },\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n  } catch (error) {\r\n    console.error('[WAITLISTS_GET_SUBSCRIBERS]', error);\r\n    log('Error details:', error);\r\n\r\n    if (error instanceof Error) {\r\n      log('Error stack:', error.stack);\r\n      return new NextResponse(\r\n        JSON.stringify({\r\n          error: 'Internal server error',\r\n        }),\r\n        {\r\n          status: 500,\r\n          headers: { 'Content-Type': 'application/json' },\r\n        },\r\n      );\r\n    }\r\n\r\n    return new NextResponse(\r\n      JSON.stringify({\r\n        error: 'Internal server error',\r\n      }),\r\n      {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' },\r\n      },\r\n    );\r\n  }\r\n}\r\n"]}