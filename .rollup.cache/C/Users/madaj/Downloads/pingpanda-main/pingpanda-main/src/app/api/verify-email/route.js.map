{"version":3,"file":"route.js","sourceRoot":"","sources":["route.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { Resend } from 'resend';\r\nimport { db } from '@/lib/db';\r\nimport { getAuth } from '@clerk/nextjs/server';\r\n\r\ninterface CustomFields {\r\n  verificationToken?: string;\r\n  [key: string]: any; // Allow other custom fields\r\n}\r\n\r\nconst resend = new Resend(process.env.RESEND_API_KEY);\r\n\r\n// Endpoint to send verification email\r\nexport async function POST(request: Request) {\r\n  const { email, verificationToken } = await request.json();\r\n\r\n  if (!email || !verificationToken) {\r\n    return NextResponse.json(\r\n      { error: 'Email and verification token are required' },\r\n      { status: 400 },\r\n    );\r\n  }\r\n\r\n  try {\r\n    await resend.emails.send({\r\n      from: 'WaitListNow <verification@waitlistnow.app>',\r\n      to: email,\r\n      subject: 'Please verify your email address - WaitListNow',\r\n      html: `\r\n        <!DOCTYPE html>\r\n        <html lang=\"en\">\r\n        <head>\r\n          <meta charset=\"UTF-8\">\r\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n          <title>Email Verification</title>\r\n          <script src=\"https://cdn.tailwindcss.com\"></script>\r\n        </head>\r\n        <body class=\"bg-gray-50 font-sans\">\r\n          <div class=\"max-w-2xl mx-auto p-6\">\r\n            <div class=\"bg-white rounded-lg shadow-lg overflow-hidden\">\r\n              <!-- Header -->\r\n              <div class=\"bg-gradient-to-r from-blue-600 to-purple-600 px-8 py-6\">\r\n                <div class=\"text-center\">\r\n                  <h1 class=\"text-2xl font-bold text-white\">WaitListNow</h1>\r\n                  <p class=\"text-blue-100 mt-2\">Email Verification Required</p>\r\n                </div>\r\n              </div>\r\n              \r\n              <!-- Content -->\r\n              <div class=\"px-8 py-8\">\r\n                <div class=\"text-center mb-6\">\r\n                  <div class=\"inline-flex items-center justify-center w-16 h-16 bg-blue-100 rounded-full mb-4\">\r\n                    <svg class=\"w-8 h-8 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\"/>\r\n                    </svg>\r\n                  </div>\r\n                  <h2 class=\"text-2xl font-bold text-gray-900 mb-4\">Verify Your Email Address</h2>\r\n                </div>\r\n                \r\n                <div class=\"text-gray-600 space-y-4 mb-8\">\r\n                  <p>Hi there! üëã</p>\r\n                  <p>Thank you for joining WaitListNow! To complete your registration and secure your account, we need to verify your email address.</p>\r\n                  <p>Click the button below to verify your email and get started:</p>\r\n                </div>\r\n                \r\n                <!-- CTA Button -->\r\n                <div class=\"text-center mb-8\">\r\n                  <a href=\"${process.env.NEXT_PUBLIC_APP_URL}/api/verify?token=${verificationToken}&email=${encodeURIComponent(email)}\" \r\n                     class=\"inline-block bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold px-8 py-4 rounded-lg hover:from-blue-700 hover:to-purple-700 transform hover:scale-105 transition-all duration-200 shadow-lg\">\r\n                    ‚úâÔ∏è Verify Email Address\r\n                  </a>\r\n                </div>\r\n                \r\n                <!-- Alternative Link -->\r\n                <div class=\"bg-gray-50 rounded-lg p-6 mb-6\">\r\n                  <p class=\"text-sm text-gray-600 mb-2\">\r\n                    <strong>Can't click the button?</strong> Copy and paste this link into your browser:\r\n                  </p>\r\n                  <div class=\"bg-white p-3 rounded border text-xs text-gray-800 break-all font-mono\">\r\n                    ${process.env.NEXT_PUBLIC_APP_URL}/api/verify?token=${verificationToken}&email=${encodeURIComponent(email)}\r\n                  </div>\r\n                </div>\r\n                \r\n                <!-- Security Notice -->\r\n                <div class=\"bg-amber-50 border border-amber-200 rounded-lg p-4 mb-6\">\r\n                  <div class=\"flex items-start\">\r\n                    <svg class=\"w-5 h-5 text-amber-600 mt-0.5 mr-3 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                      <path fill-rule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clip-rule=\"evenodd\"/>\r\n                    </svg>\r\n                    <div>\r\n                      <p class=\"text-sm text-amber-800\">\r\n                        <strong>Security Notice:</strong> This verification link will expire in 24 hours for your security. \r\n                        If you didn't create an account with WaitListNow, you can safely ignore this email.\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                \r\n                <!-- Help Section -->\r\n                <div class=\"text-center text-sm text-gray-500\">\r\n                  <p>Need help? Contact us at support@waitlistnow.app</p>\r\n                </div>\r\n              </div>\r\n              \r\n              <!-- Footer -->\r\n              <div class=\"bg-gray-50 px-8 py-6 border-t\">\r\n                <div class=\"text-center text-sm text-gray-500 space-y-2\">\r\n                  <p>&copy; ${new Date().getFullYear()} WaitListNow. All rights reserved.</p>\r\n                  <p>This email was sent to <span class=\"font-medium\">${email}</span></p>\r\n                  <p>If you didn't request this verification, you can safely ignore this email.</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </body>\r\n        </html>\r\n      `,\r\n      // Plain text fallback for better email client compatibility\r\n      text: `\r\nHi there!\r\n\r\nThank you for joining WaitListNow! To complete your registration, please verify your email address by visiting this link:\r\n\r\n${process.env.NEXT_PUBLIC_APP_URL}/api/verify?token=${verificationToken}&email=${encodeURIComponent(email)}\r\n\r\nThis verification link will expire in 24 hours for your security.\r\n\r\nIf you didn't create an account with WaitListNow, you can safely ignore this email.\r\n\r\nNeed help? Contact us at support@waitlistnow.app\r\n\r\n¬© ${new Date().getFullYear()} WaitListNow. All rights reserved.\r\n      `,\r\n    });\r\n    return NextResponse.json({ success: true });\r\n  } catch (error) {\r\n    console.error('Error sending verification email:', error);\r\n    return NextResponse.json({ error: 'Failed to send verification email' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// Endpoint to verify email using token\r\nexport async function GET(request: Request) {\r\n  const { searchParams } = new URL(request.url);\r\n  const token = searchParams.get('token');\r\n  const email = searchParams.get('email');\r\n\r\n  if (!token || !email) {\r\n    return NextResponse.json({ error: 'Token and email are required' }, { status: 400 });\r\n  }\r\n\r\n  try {\r\n    // Find subscriber by email\r\n    const subscriber = await db.subscriber.findFirst({\r\n      where: { email },\r\n      select: {\r\n        id: true,\r\n        customFields: true,\r\n        status: true,\r\n      },\r\n    });\r\n\r\n    if (!subscriber) {\r\n      return NextResponse.json({ error: 'Subscriber not found' }, { status: 404 });\r\n    }\r\n\r\n    // Check if token matches\r\n    const customFields = subscriber.customFields as CustomFields | null;\r\n    const storedToken = customFields?.verificationToken;\r\n    if (storedToken !== token) {\r\n      return NextResponse.json({ error: 'Invalid or expired verification token' }, { status: 400 });\r\n    }\r\n\r\n    // Update subscriber status to VERIFIED\r\n    const currentFields = (subscriber.customFields || {}) as CustomFields;\r\n    await db.subscriber.update({\r\n      where: { id: subscriber.id },\r\n      data: {\r\n        status: 'VERIFIED',\r\n        customFields: {\r\n          ...currentFields,\r\n          emailVerified: true,\r\n          emailVerifiedAt: new Date().toISOString(),\r\n        } as CustomFields,\r\n      },\r\n    });\r\n\r\n    return NextResponse.redirect(new URL('/verification-success', request.url));\r\n  } catch (error) {\r\n    console.error('Error verifying email:', error);\r\n    return NextResponse.json({ error: 'Failed to verify email' }, { status: 500 });\r\n  }\r\n}\r\n"]}