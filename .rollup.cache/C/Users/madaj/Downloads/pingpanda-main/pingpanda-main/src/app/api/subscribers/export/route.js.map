{"version":3,"file":"route.js","sourceRoot":"","sources":["route.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { getAuth } from '@clerk/nextjs/server';\r\nimport { db } from '@/lib/db';\r\nimport type { NextRequest } from 'next/server';\r\nimport { format } from 'date-fns';\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    // Verify authentication\r\n    const { userId } = getAuth(req);\r\n    if (!userId) {\r\n      return new NextResponse('Unauthorized', { status: 401 });\r\n    }\r\n\r\n    // Get the user\r\n    const user = await db.user.findUnique({\r\n      where: { externalId: userId },\r\n    });\r\n\r\n    if (!user) {\r\n      return new NextResponse('User not found', { status: 404 });\r\n    }\r\n\r\n    // Parse request body\r\n    const { waitlistId, subscriberIds } = await req.json();\r\n\r\n    if (!waitlistId) {\r\n      return new NextResponse('Waitlist ID is required', { status: 400 });\r\n    }\r\n\r\n    // Verify the user owns the waitlist\r\n    const waitlist = await db.waitlist.findFirst({\r\n      where: {\r\n        id: waitlistId,\r\n        userId: user.id,\r\n      },\r\n    });\r\n\r\n    if (!waitlist) {\r\n      return new NextResponse('Waitlist not found', { status: 404 });\r\n    }\r\n\r\n    // Get subscribers\r\n    const whereClause = {\r\n      waitlistId,\r\n      ...(subscriberIds?.length > 0 && { id: { in: subscriberIds } }),\r\n    };\r\n\r\n    const subscribers = await db.subscriber.findMany({\r\n      where: whereClause,\r\n      orderBy: { createdAt: 'desc' },\r\n    });\r\n\r\n    // Format subscribers for CSV\r\n    const headers = ['Email', 'Name', 'Status', 'Referral Code', 'Referred By', 'Joined At'];\r\n\r\n    const csvRows = [];\r\n    csvRows.push(headers.join(','));\r\n\r\n    for (const sub of subscribers) {\r\n      const row = [\r\n        `\"${sub.email}\"`,\r\n        `\"${sub.name || ''}\"`,\r\n        `\"${sub.status}\"`,\r\n        `\"${sub.referralCode || ''}\"`,\r\n        `\"${sub.referredBy || ''}\"`,\r\n        `\"${format(new Date(sub.createdAt), 'yyyy-MM-dd HH:mm:ss')}\"`,\r\n      ];\r\n      csvRows.push(row.join(','));\r\n    }\r\n\r\n    const csvContent = csvRows.join('\\n');\r\n    const filename = `subscribers-${waitlist.slug}-${format(new Date(), 'yyyy-MM-dd')}.csv`;\r\n\r\n    // Return the CSV file\r\n    return new NextResponse(csvContent, {\r\n      headers: {\r\n        'Content-Type': 'text/csv',\r\n        'Content-Disposition': `attachment; filename=\"${filename}\"`,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error('[SUBSCRIBERS_EXPORT]', error);\r\n    return new NextResponse(\r\n      JSON.stringify({\r\n        error: 'Internal server error',\r\n        details: process.env.NODE_ENV === 'development' ? error : undefined,\r\n      }),\r\n      { status: 500, headers: { 'Content-Type': 'application/json' } },\r\n    );\r\n  }\r\n}\r\n"]}