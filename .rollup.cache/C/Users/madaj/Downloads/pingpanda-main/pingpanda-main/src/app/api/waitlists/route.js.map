{"version":3,"file":"route.js","sourceRoot":"","sources":["route.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextResponse, type NextRequest } from 'next/server';\r\nimport { getAuth } from '@clerk/nextjs/server';\r\nimport { db } from '@/lib/db';\r\nimport { waitlistFormSchema } from '@/lib/validations/waitlist';\r\n\r\n// Enable debug logging in development\r\nconst isDev = process.env.NODE_ENV === 'development';\r\nconst log = (...args: any[]) => isDev && console.log('[Waitlist API]', ...args);\r\n\r\n// POST /api/waitlists - Create a new waitlist\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    // Verify authentication\r\n    const { userId } = getAuth(req);\r\n    if (!userId) {\r\n      return new NextResponse('Unauthorized', { status: 401 });\r\n    }\r\n\r\n    // Parse and validate request body\r\n    const json = await req.json();\r\n    const body = waitlistFormSchema.parse(json);\r\n\r\n    // Check if user exists or create a new one\r\n    let user = await db.user.findUnique({\r\n      where: { externalId: userId },\r\n    });\r\n\r\n    if (!user) {\r\n      // If user doesn't exist, create them (this might happen on first sign-in)\r\n      const email = json.email; // TODO: You might want to get this from the auth provider\r\n      if (!email) {\r\n        return new NextResponse('Email is required', { status: 400 });\r\n      }\r\n\r\n      user = await db.user.create({\r\n        data: {\r\n          externalId: userId,\r\n          email,\r\n        },\r\n      });\r\n    }\r\n\r\n    // Generate a slug from the waitlist name\r\n    if (!body.name || typeof body.name !== 'string') {\r\n      return new NextResponse('Waitlist name is required and must be a string', { status: 400 });\r\n    }\r\n\r\n    const slug = body.name\r\n      .toLowerCase()\r\n      .replace(/[^a-z0-9]+/g, '-')\r\n      .replace(/(^-|-$)/g, '');\r\n\r\n    // Check if waitlist with this slug already exists for the user\r\n    const existingWaitlist = await db.waitlist.findFirst({\r\n      where: {\r\n        slug,\r\n        userId: user.id,\r\n      },\r\n    });\r\n\r\n    if (existingWaitlist) {\r\n      return new NextResponse('You already have a waitlist with this name', {\r\n        status: 400,\r\n      });\r\n    }\r\n\r\n    // Create the waitlist\r\n    const waitlist = await db.waitlist.create({\r\n      data: {\r\n        name: body.name,\r\n        slug,\r\n        description: body.description || null,\r\n        websiteUrl: body.websiteUrl || null,\r\n        redirectUrl: body.redirectUrl || null,\r\n        userId: user.id,\r\n        status: 'DRAFT',\r\n        customFields: body.customFields || [],\r\n        style: body.style || {},\r\n        settings: body.settings || {},\r\n      },\r\n    });\r\n\r\n    return NextResponse.json(waitlist);\r\n  } catch (error) {\r\n    console.error('[WAITLISTS_POST]', error);\r\n    log('Error details:', error);\r\n\r\n    if (error instanceof Error) {\r\n      log('Error stack:', error.stack);\r\n      return new NextResponse(\r\n        JSON.stringify({\r\n          error: error.message,\r\n          stack: isDev ? error.stack : undefined,\r\n        }),\r\n        {\r\n          status: 500,\r\n          headers: { 'Content-Type': 'application/json' },\r\n        },\r\n      );\r\n    }\r\n\r\n    return new NextResponse(\r\n      JSON.stringify({\r\n        error: 'Internal server error',\r\n        details: isDev ? String(error) : undefined,\r\n      }),\r\n      {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' },\r\n      },\r\n    );\r\n  }\r\n}\r\n\r\n// GET /api/waitlists - Get all waitlists for the current user\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    console.log('[WAITLISTS_GET] Fetching waitlists...');\r\n\r\n    const { userId } = getAuth(req);\r\n    // console.log('[WAITLISTS_GET] User ID from auth:', userId);\r\n\r\n    if (!userId) {\r\n      // console.error('[WAITLISTS_GET] No user ID found in session');\r\n      return new NextResponse('Unauthorized', { status: 401 });\r\n    }\r\n\r\n    const user = await db.user.findUnique({\r\n      where: { externalId: userId },\r\n    });\r\n    // console.log('[WAITLISTS_GET] Found user:', user?.id);\r\n\r\n    if (!user) {\r\n      console.error('[WAITLISTS_GET] User not found in database');\r\n      return new NextResponse('User not found', { status: 404 });\r\n    }\r\n\r\n    // console.log('[WAITLISTS_GET] Querying waitlists for user:', user.id);\r\n    const waitlists = await db.waitlist.findMany({\r\n      where: {\r\n        userId: user.id,\r\n      },\r\n      include: {\r\n        _count: {\r\n          select: {\r\n            subscribers: true,\r\n          },\r\n        },\r\n      },\r\n      orderBy: {\r\n        createdAt: 'desc',\r\n      },\r\n    });\r\n\r\n    // console.log(`[WAITLISTS_GET] Found ${waitlists.length} waitlists`);\r\n    return NextResponse.json(waitlists);\r\n  } catch (error) {\r\n    console.error('[WAITLISTS_GET]', error);\r\n    log('Error details:', error);\r\n\r\n    if (error instanceof Error) {\r\n      log('Error stack:', error.stack);\r\n      return new NextResponse(\r\n        JSON.stringify({\r\n          error: error.message,\r\n          stack: isDev ? error.stack : undefined,\r\n        }),\r\n        {\r\n          status: 500,\r\n          headers: { 'Content-Type': 'application/json' },\r\n        },\r\n      );\r\n    }\r\n\r\n    return new NextResponse(\r\n      JSON.stringify({\r\n        error: 'Internal server error',\r\n        details: isDev ? String(error) : undefined,\r\n      }),\r\n      {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' },\r\n      },\r\n    );\r\n  }\r\n}\r\n"]}