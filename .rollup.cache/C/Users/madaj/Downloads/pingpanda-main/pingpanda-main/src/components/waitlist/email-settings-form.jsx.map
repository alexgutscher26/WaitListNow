{"version":3,"file":"email-settings-form.jsx","sourceRoot":"","sources":["email-settings-form.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport { useForm } from 'react-hook-form';\r\nimport { z } from 'zod';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { toast } from '@/components/ui/use-toast';\r\n\r\n// Define the form schema using Zod\r\nconst emailSettingsSchema = z.object({\r\n  sendConfirmationEmail: z.boolean().default(true),\r\n  customThankYouMessage: z.string().max(500).optional(),\r\n});\r\n\r\ntype EmailSettingsValues = z.infer<typeof emailSettingsSchema>;\r\n\r\ninterface EmailSettingsFormProps {\r\n  waitlist: {\r\n    id: string;\r\n    customFields?: {\r\n      sendConfirmationEmail?: boolean;\r\n      customThankYouMessage?: string;\r\n    } | null;\r\n  };\r\n}\r\n\r\nexport function EmailSettingsForm({ waitlist }: EmailSettingsFormProps) {\r\n  const router = useRouter();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const form = useForm<EmailSettingsValues>({\r\n    resolver: zodResolver(emailSettingsSchema),\r\n    defaultValues: {\r\n      sendConfirmationEmail: waitlist.customFields?.sendConfirmationEmail ?? true,\r\n      customThankYouMessage:\r\n        waitlist.customFields?.customThankYouMessage ||\r\n        \"Thank you for joining our waitlist! We'll notify you when we launch.\",\r\n    },\r\n  });\r\n\r\n  async function onSubmit(data: EmailSettingsValues) {\r\n    try {\r\n      setIsLoading(true);\r\n\r\n      const response = await fetch(`/api/waitlists/${waitlist.id}/email-settings`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          customFields: {\r\n            ...waitlist.customFields,\r\n            sendConfirmationEmail: data.sendConfirmationEmail,\r\n            customThankYouMessage: data.customThankYouMessage,\r\n          },\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to update email settings');\r\n      }\r\n\r\n      // Refresh the page to show updated data\r\n      router.refresh();\r\n\r\n      toast({\r\n        title: 'Success',\r\n        description: 'Email settings updated successfully',\r\n      });\r\n    } catch (error) {\r\n      console.error('Error updating email settings:', error);\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Failed to update email settings. Please try again.',\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form\r\n      onSubmit={form.handleSubmit(onSubmit)}\r\n      className=\"space-y-4\"\r\n    >\r\n      <div className=\"flex items-center space-x-2\">\r\n        <Switch\r\n          id=\"send-confirmation-email\"\r\n          checked={form.watch('sendConfirmationEmail')}\r\n          onCheckedChange={(checked) => form.setValue('sendConfirmationEmail', checked)}\r\n          disabled={isLoading}\r\n        />\r\n        <Label\r\n          htmlFor=\"send-confirmation-email\"\r\n          className=\"cursor-pointer\"\r\n        >\r\n          Send confirmation emails to new subscribers\r\n        </Label>\r\n      </div>\r\n\r\n      <div className=\"space-y-2\">\r\n        <Label htmlFor=\"custom-thank-you\">Custom Thank You Message</Label>\r\n        <Textarea\r\n          id=\"custom-thank-you\"\r\n          placeholder=\"Enter a custom thank you message\"\r\n          className=\"min-h-[100px]\"\r\n          {...form.register('customThankYouMessage')}\r\n          disabled={isLoading}\r\n        />\r\n        <p className=\"text-sm text-muted-foreground\">\r\n          This message will be shown to users after they sign up for your waitlist.\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"flex justify-end\">\r\n        <Button\r\n          type=\"submit\"\r\n          disabled={isLoading}\r\n        >\r\n          {isLoading ? 'Saving...' : 'Save Email Settings'}\r\n        </Button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n"]}