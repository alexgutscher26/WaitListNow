{"version":3,"file":"route.js","sourceRoot":"","sources":["route.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextResponse } from 'next/server';\nimport { db } from '@/lib/db';\nimport { z } from 'zod';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Define validation schema\nconst submissionSchema = z.object({\n  email: z.string().email('Invalid email address'),\n  name: z.string().optional(),\n  fields: z.record(z.any()).optional(),\n  referralCode: z.string().optional(),\n});\n\nexport async function POST(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    // Handle CORS preflight\n    if (request.method === 'OPTIONS') {\n      return new Response(null, {\n        status: 204,\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'POST, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type',\n        },\n      });\n    }\n\n    // Get waitlist\n    const waitlist = await db.waitlist.findUnique({\n      where: { id: params.id },\n      select: {\n        id: true,\n        settings: true,\n        requireEmailVerification: true,\n      },\n    });\n\n    if (!waitlist) {\n      return NextResponse.json(\n        { error: 'Waitlist not found' },\n        { status: 404 }\n      );\n    }\n\n    // Parse and validate request body\n    const body = await request.json();\n    const validation = submissionSchema.safeParse(body);\n\n    if (!validation.success) {\n      return NextResponse.json(\n        { error: 'Invalid submission', details: validation.error.issues },\n        { status: 400 }\n      );\n    }\n\n    const { email, name, fields, referralCode } = validation.data;\n    \n    // Check for existing subscriber\n    const existingSubscriber = await db.subscriber.findFirst({\n      where: {\n        email,\n        waitlistId: waitlist.id,\n      },\n    });\n\n    if (existingSubscriber) {\n      return NextResponse.json(\n        { error: 'You are already on the waitlist!' },\n        { status: 400 }\n      );\n    }\n\n    // Create subscriber\n    const subscriber = await db.subscriber.create({\n      data: {\n        id: uuidv4(),\n        email,\n        name: name || null,\n        waitlistId: waitlist.id,\n        fields: fields || {},\n        referralCode: referralCode || null,\n        isVerified: !waitlist.requireEmailVerification,\n      },\n    });\n\n    // TODO: Send verification email if required\n    // if (waitlist.requireEmailVerification) {\n    //   await sendVerificationEmail(subscriber);\n    // }\n\n\n    // Set CORS headers\n    const headers = {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    };\n\n    return NextResponse.json(\n      { \n        success: true, \n        message: 'Successfully joined the waitlist!',\n        requiresVerification: waitlist.requireEmailVerification\n      },\n      { headers }\n    );\n  } catch (error) {\n    console.error('Error processing submission:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function OPTIONS() {\n  return new Response(null, {\n    status: 204,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    },\n  });\n}\n"]}