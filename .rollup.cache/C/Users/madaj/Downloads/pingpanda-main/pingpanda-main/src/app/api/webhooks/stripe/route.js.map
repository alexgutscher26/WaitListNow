{"version":3,"file":"route.js","sourceRoot":"","sources":["route.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,EAAE,EAAE,MAAM,UAAU,CAAC;AAC9B,OAAO,EAAE,MAAM,EAAE,MAAM,cAAc,CAAC;AACtC,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;AAGvC;;;;;;;;;GASG;AACH,MAAM,UAAgB,IAAI,CAAC,GAAY;;;;;;wBACxB,qBAAM,GAAG,CAAC,IAAI,EAAE,EAAA;;oBAAvB,IAAI,GAAG,SAAgB;oBACvB,SAAS,GAAG,OAAO,EAAE,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;oBAE9C,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,cAAc,CAC1C,IAAI,EACJ,SAAS,aAAT,SAAS,cAAT,SAAS,GAAI,EAAE,EACf,MAAA,OAAO,CAAC,GAAG,CAAC,qBAAqB,mCAAI,EAAE,CACxC,CAAC;yBAEE,CAAA,KAAK,CAAC,IAAI,KAAK,4BAA4B,CAAA,EAA3C,wBAA2C;oBACvC,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,MAAiC,CAAC;oBAErD,MAAM,GAAK,CAAA,OAAO,CAAC,QAAQ,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAA,OAAzC,CAA0C;oBAExD,IAAI,CAAC,MAAM,EAAE,CAAC;wBACZ,sBAAO,IAAI,QAAQ,CAAC,kBAAkB,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,EAAC;oBAC3D,CAAC;oBAED,qBAAM,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC;4BACnB,KAAK,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE;4BACrB,IAAI,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE;yBACtB,CAAC,EAAA;;oBAHF,SAGE,CAAC;;wBAGL,sBAAO,IAAI,QAAQ,CAAC,IAAI,CAAC,EAAC;;;;CAC3B","sourcesContent":["import { db } from '@/lib/db';\r\nimport { stripe } from '@/lib/stripe';\r\nimport { headers } from 'next/headers';\r\nimport Stripe from 'stripe';\r\n\r\n/**\r\n * Handles incoming POST requests from Stripe webhooks.\r\n *\r\n * This function processes the incoming request, verifies the event signature,\r\n * and updates user plans based on completed checkout sessions. It checks for valid metadata\r\n * and performs database operations accordingly.\r\n *\r\n * @param req - The HTTP request object containing the webhook payload.\r\n * @returns A Response object indicating success or failure.\r\n */\r\nexport async function POST(req: Request) {\r\n  const body = await req.text();\r\n  const signature = headers().get('stripe-signature');\r\n\r\n  const event = stripe.webhooks.constructEvent(\r\n    body,\r\n    signature ?? '',\r\n    process.env.STRIPE_WEBHOOK_SECRET ?? '',\r\n  );\r\n\r\n  if (event.type === 'checkout.session.completed') {\r\n    const session = event.data.object as Stripe.Checkout.Session;\r\n\r\n    const { userId } = session.metadata || { userId: null };\r\n\r\n    if (!userId) {\r\n      return new Response('Invalid metadata', { status: 400 });\r\n    }\r\n\r\n    await db.user.update({\r\n      where: { id: userId },\r\n      data: { plan: 'PRO' },\r\n    });\r\n  }\r\n\r\n  return new Response('OK');\r\n}\r\n"]}