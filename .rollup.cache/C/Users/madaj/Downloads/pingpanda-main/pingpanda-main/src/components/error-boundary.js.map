{"version":3,"file":"error-boundary.js","sourceRoot":"","sources":["error-boundary.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;AAEb,OAAc,EAAE,SAAS,EAAwB,MAAM,OAAO,CAAC;AAY/D;IAAmC,iCAAuB;IACxD,uBAAY,KAAY;QACtB,YAAA,MAAK,YAAC,KAAK,CAAC,SAAC;QACb,KAAI,CAAC,KAAK,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC;;IACnC,CAAC;IAED;;OAEG;IACI,sCAAwB,GAA/B,UAAgC,KAAY;QAC1C,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,KAAK,OAAA,EAAE,CAAC;IACnC,CAAC;IAED;;OAEG;IACH,yCAAiB,GAAjB,UAAkB,KAAY,EAAE,SAAoB;QAClD,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,OAAA,EAAE,SAAS,WAAA,EAAE,CAAC,CAAC;QAEpC,oCAAoC;QACpC,IAAI,OAAO,MAAM,KAAK,WAAW,IAAK,MAAc,CAAC,OAAO,EAAE,CAAC;YAC5D,MAAc,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE;gBAC5C,kBAAkB,EAAE,KAAK,CAAC,OAAO;gBACjC,eAAe,EAAE,KAAK,CAAC,IAAI;gBAC3B,gBAAgB,EAAE,KAAK,CAAC,KAAK;gBAC7B,0BAA0B,EAAE,SAAS,CAAC,cAAc;aACrD,CAAC,CAAC;QACL,CAAC;QAED,OAAO,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;IACrE,CAAC;IAED;;OAEG;IACH,8BAAM,GAAN;QACE,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;YACxB,mEAAmE;YACnE,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;gBACxB,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;YAC7B,CAAC;YAED,OAAO,CACL,eAAK,SAAS,EAAC,iBAAiB,aAC9B,aAAI,SAAS,EAAC,uCAAuC,qCAA0B,EAC/E,YAAG,SAAS,EAAC,4BAA4B,+EAErC,EACJ,iBACE,OAAO,EAAE,cAAM,OAAA,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAxB,CAAwB,EACvC,SAAS,EAAC,wJAAwJ,4BAG3J,IACL,CACP,CAAC;QACJ,CAAC;QAED,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;IAC7B,CAAC;IACH,oBAAC;AAAD,CAAC,AA5DD,CAAmC,SAAS,GA4D3C","sourcesContent":["'use client';\n\nimport React, { Component, ErrorInfo, ReactNode } from 'react';\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: ErrorInfo;\n}\n\nexport class ErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  /**\n   * Returns a new state object indicating an error occurred.\n   */\n  static getDerivedStateFromError(error: Error): State {\n    return { hasError: true, error };\n  }\n\n  /**\n   * Captures an error and its associated information using PostHog.\n   */\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    this.setState({ error, errorInfo });\n    \n    // Log error to PostHog if available\n    if (typeof window !== 'undefined' && (window as any).posthog) {\n      (window as any).posthog.capture('$exception', {\n        $exception_message: error.message,\n        $exception_type: error.name,\n        $exception_stack: error.stack,\n        $exception_component_stack: errorInfo.componentStack,\n      });\n    }\n    \n    console.error('Error Boundary caught an error:', error, errorInfo);\n  }\n\n  /**\n   * Renders children or a fallback UI if an error has occurred.\n   */\n  render() {\n    if (this.state.hasError) {\n      // You can customize the error UI here or use the provided fallback\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n      \n      return (\n        <div className=\"p-4 text-center\">\n          <h2 className=\"text-lg font-medium text-red-600 mb-2\">Something went wrong</h2>\n          <p className=\"text-sm text-gray-600 mb-4\">\n            We've been notified about this issue and are working on a fix.\n          </p>\n          <button\n            onClick={() => window.location.reload()}\n            className=\"px-4 py-2 text-sm font-medium text-white bg-red-600 rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500\"\n          >\n            Reload Page\n          </button>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\n"]}