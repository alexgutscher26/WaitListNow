{"version":3,"file":"route.js","sourceRoot":"","sources":["route.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { auth } from '@clerk/nextjs/server';\r\nimport { db } from '@/lib/db';\r\nimport { format } from 'date-fns';\r\n\r\n/**\r\n * Export user waitlists with subscribers in CSV format.\r\n *\r\n * This function handles the export of waitlist data including subscriber information\r\n * to a CSV file. It fetches the waitlists associated with the authenticated user,\r\n * processes the data into CSV format, and returns it as a downloadable response.\r\n *\r\n * @returns A NextResponse object containing the CSV file or an error message.\r\n */\r\nexport async function GET() {\r\n  try {\r\n    const authResponse = await auth();\r\n    const userId = authResponse.userId;\r\n\r\n    if (!userId) {\r\n      return new NextResponse('Unauthorized', { status: 401 });\r\n    }\r\n\r\n    // Get user's waitlists with subscribers\r\n    const waitlists = await db.waitlist.findMany({\r\n      where: {\r\n        user: {\r\n          externalId: userId,\r\n        },\r\n      },\r\n      include: {\r\n        subscribers: {\r\n          select: {\r\n            email: true,\r\n            status: true,\r\n            createdAt: true,\r\n            updatedAt: true,\r\n            referralCode: true,\r\n            referredBy: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    if (!waitlists || waitlists.length === 0) {\r\n      return new NextResponse('No waitlists found', { status: 404 });\r\n    }\r\n\r\n    // Convert waitlists to CSV format\r\n    let csvContent =\r\n      'Waitlist Name,Subscriber Email,Status,Signup Date,Last Updated,Referral Code,Referred By\\n';\r\n\r\n    waitlists.forEach((waitlist) => {\r\n      if (waitlist.subscribers && waitlist.subscribers.length > 0) {\r\n        waitlist.subscribers.forEach((subscriber) => {\r\n          csvContent += `\"${waitlist.name.replace(/\"/g, '\"\"')}\",`;\r\n          csvContent += `\"${subscriber.email}\",`;\r\n          csvContent += `\"${subscriber.status}\",`;\r\n          csvContent += `\"${format(new Date(subscriber.createdAt), 'yyyy-MM-dd HH:mm:ss')}\",`;\r\n          csvContent += `\"${subscriber.updatedAt ? format(new Date(subscriber.updatedAt), 'yyyy-MM-dd HH:mm:ss') : ''}\",`;\r\n          csvContent += `\"${subscriber.referralCode || ''}\",`;\r\n          csvContent += `\"${subscriber.referredBy || ''}\"\\n`;\r\n        });\r\n      } else {\r\n        // Include waitlist even if it has no subscribers\r\n        csvContent += `\"${waitlist.name.replace(/\"/g, '\"\"')}\",,,,,,\\n`;\r\n      }\r\n    });\r\n\r\n    // Create a response with the CSV file\r\n    const response = new NextResponse(csvContent);\r\n\r\n    // Set headers for file download\r\n    response.headers.set('Content-Type', 'text/csv');\r\n    response.headers.set(\r\n      'Content-Disposition',\r\n      `attachment; filename=waitlist-export-${format(new Date(), 'yyyy-MM-dd')}.csv`,\r\n    );\r\n\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Export error:', error);\r\n    return new NextResponse('Internal Server Error', { status: 500 });\r\n  }\r\n}\r\n"]}