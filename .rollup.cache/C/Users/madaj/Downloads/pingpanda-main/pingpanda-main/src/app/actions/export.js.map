{"version":3,"file":"export.js","sourceRoot":"","sources":["export.ts"],"names":[],"mappings":"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","sourcesContent":["'server only';\r\n\r\nimport { auth } from '@clerk/nextjs/server';\r\nimport { db } from '@/lib/db';\r\nimport { format } from 'date-fns';\r\n\r\ntype ExportResult = {\r\n  success: boolean;\r\n  url?: string;\r\n  filename?: string;\r\n  error?: string;\r\n};\r\n\r\n/**\r\n * Exports user's waitlists with subscribers in CSV format.\r\n *\r\n * This function first authenticates the user, retrieves their waitlists along with subscribers,\r\n * converts the data to CSV format, and returns a Blob URL for download.\r\n *\r\n * @returns An ExportResult object containing success status, the Blob URL, filename, or error message.\r\n * @throws Error If authentication fails, no waitlists are found, or an unexpected error occurs during export.\r\n */\r\nexport async function exportWaitlists(): Promise<ExportResult> {\r\n  try {\r\n    const authResponse = await auth();\r\n    const userId = authResponse.userId;\r\n\r\n    if (!userId) {\r\n      throw new Error('Unauthorized');\r\n    }\r\n\r\n    // Get user's waitlists with subscribers\r\n    const waitlists = await db.waitlist.findMany({\r\n      where: {\r\n        user: {\r\n          externalId: userId,\r\n        },\r\n      },\r\n      include: {\r\n        subscribers: {\r\n          select: {\r\n            email: true,\r\n            status: true,\r\n            createdAt: true,\r\n            updatedAt: true,\r\n            referralCode: true,\r\n            referredBy: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    if (!waitlists || waitlists.length === 0) {\r\n      throw new Error('No waitlists found');\r\n    }\r\n\r\n    // Convert waitlists to CSV format\r\n    let csvContent =\r\n      'Waitlist Name,Subscriber Email,Status,Signup Date,Last Updated,Referral Code,Referred By\\n';\r\n\r\n    waitlists.forEach((waitlist) => {\r\n      if (waitlist.subscribers && waitlist.subscribers.length > 0) {\r\n        waitlist.subscribers.forEach((subscriber) => {\r\n          csvContent += `\"${waitlist.name}\",`;\r\n          csvContent += `\"${subscriber.email}\",`;\r\n          csvContent += `\"${subscriber.status}\",`;\r\n          csvContent += `\"${format(new Date(subscriber.createdAt), 'yyyy-MM-dd HH:mm:ss')}\",`;\r\n          csvContent += `\"${subscriber.updatedAt ? format(new Date(subscriber.updatedAt), 'yyyy-MM-dd HH:mm:ss') : ''}\",`;\r\n          csvContent += `\"${subscriber.referralCode || ''}\",`;\r\n          csvContent += `\"${subscriber.referredBy || ''}\"\\n`;\r\n        });\r\n      } else {\r\n        // Include waitlist even if it has no subscribers\r\n        csvContent += `\"${waitlist.name}\",,,,,,\\n`;\r\n      }\r\n    });\r\n\r\n    // Create a Blob and return it\r\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n    const url = URL.createObjectURL(blob);\r\n\r\n    return {\r\n      success: true,\r\n      url,\r\n      filename: `waitlist-export-${format(new Date(), 'yyyy-MM-dd')}.csv`,\r\n    };\r\n  } catch (error) {\r\n    console.error('Export failed:', error);\r\n    return {\r\n      success: false,\r\n      error: error instanceof Error ? error.message : 'Failed to export waitlists',\r\n    };\r\n  }\r\n}\r\n"]}