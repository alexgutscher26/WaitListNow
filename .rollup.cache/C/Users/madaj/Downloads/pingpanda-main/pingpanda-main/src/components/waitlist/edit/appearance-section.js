import { __assign } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, } from '@/components/ui/select';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Slider } from '@/components/ui/slider';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { ChromePicker } from 'react-color';
var FONT_FAMILIES = [
    { value: 'sans', label: 'Sans' },
    { value: 'serif', label: 'Serif' },
    { value: 'mono', label: 'Monospace' },
    { value: 'inter', label: 'Inter' },
    { value: 'poppins', label: 'Poppins' },
];
var BUTTON_VARIANTS = [
    { value: 'default', label: 'Solid' },
    { value: 'outline', label: 'Outline' },
    { value: 'secondary', label: 'Secondary' },
    { value: 'ghost', label: 'Ghost' },
    { value: 'link', label: 'Link' },
];
var BORDER_RADII = [
    { value: 'none', label: 'None' },
    { value: 'sm', label: 'Small' },
    { value: 'md', label: 'Medium' },
    { value: 'lg', label: 'Large' },
    { value: 'full', label: 'Full' },
];
export function AppearanceSection(_a) {
    var formData = _a.formData, onStyleChange = _a.onStyleChange, getBorderRadius = _a.getBorderRadius;
    var _b = useState('colors'), activeTab = _b[0], setActiveTab = _b[1];
    var _c = useState({ open: false, color: '#000000', name: '' }), colorPicker = _c[0], setColorPicker = _c[1];
    var handleColorChange = function (name, color) {
        onStyleChange(name, color);
        setColorPicker(function (prev) { return (__assign(__assign({}, prev), { color: color })); });
    };
    var openColorPicker = function (name, color) {
        setColorPicker({
            open: true,
            color: formData.style[name] || color,
            name: name,
        });
    };
    return (_jsxs(Card, { children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { children: "Appearance" }), _jsx(CardDescription, { children: "Customize how your waitlist form looks." })] }), _jsx(CardContent, { children: _jsxs(Tabs, { value: activeTab, onValueChange: setActiveTab, className: "space-y-6", children: [_jsxs(TabsList, { children: [_jsx(TabsTrigger, { value: "colors", children: "Colors" }), _jsx(TabsTrigger, { value: "button", children: "Button" }), _jsx(TabsTrigger, { value: "form", children: "Form" }), _jsx(TabsTrigger, { value: "typography", children: "Typography" })] }), _jsx(TabsContent, { value: "colors", className: "space-y-6", children: _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx(Label, { children: "Primary Color" }), _jsxs("div", { className: "mt-1 flex items-center", children: [_jsx("div", { className: "w-10 h-10 rounded-md border border-gray-300 cursor-pointer mr-3", style: { backgroundColor: formData.style.primaryColor }, onClick: function () { return openColorPicker('primaryColor', '#3b82f6'); } }), _jsx(Input, { value: formData.style.primaryColor, onChange: function (e) { return onStyleChange('primaryColor', e.target.value); }, className: "flex-1" })] })] }), _jsxs("div", { children: [_jsx(Label, { children: "Background Color" }), _jsxs("div", { className: "mt-1 flex items-center", children: [_jsx("div", { className: "w-10 h-10 rounded-md border border-gray-300 cursor-pointer mr-3", style: { backgroundColor: formData.style.backgroundColor }, onClick: function () { return openColorPicker('backgroundColor', '#ffffff'); } }), _jsx(Input, { value: formData.style.backgroundColor, onChange: function (e) { return onStyleChange('backgroundColor', e.target.value); }, className: "flex-1" })] })] })] }), _jsx("div", { className: "space-y-4", children: _jsxs("div", { children: [_jsx(Label, { children: "Text Color" }), _jsxs("div", { className: "mt-1 flex items-center", children: [_jsx("div", { className: "w-10 h-10 rounded-md border border-gray-300 cursor-pointer mr-3", style: { backgroundColor: formData.style.textColor }, onClick: function () { return openColorPicker('textColor', '#1f2937'); } }), _jsx(Input, { value: formData.style.textColor, onChange: function (e) { return onStyleChange('textColor', e.target.value); }, className: "flex-1" })] })] }) })] }) }), _jsx(TabsContent, { value: "button", className: "space-y-6", children: _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx(Label, { children: "Button Text" }), _jsx(Input, { value: formData.style.buttonText, onChange: function (e) { return onStyleChange('buttonText', e.target.value); }, placeholder: "e.g., Join Waitlist" })] }), _jsxs("div", { children: [_jsx(Label, { children: "Button Color" }), _jsxs("div", { className: "mt-1 flex items-center", children: [_jsx("div", { className: "w-10 h-10 rounded-md border border-gray-300 cursor-pointer mr-3", style: { backgroundColor: formData.style.buttonColor }, onClick: function () { return openColorPicker('buttonColor', formData.style.primaryColor); } }), _jsx(Input, { value: formData.style.buttonColor, onChange: function (e) { return onStyleChange('buttonColor', e.target.value); }, className: "flex-1" })] })] })] }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx(Label, { children: "Button Text Color" }), _jsxs("div", { className: "mt-1 flex items-center", children: [_jsx("div", { className: "w-10 h-10 rounded-md border border-gray-300 cursor-pointer mr-3", style: { backgroundColor: formData.style.buttonTextColor }, onClick: function () { return openColorPicker('buttonTextColor', '#ffffff'); } }), _jsx(Input, { value: formData.style.buttonTextColor, onChange: function (e) { return onStyleChange('buttonTextColor', e.target.value); }, className: "flex-1" })] })] }), _jsxs("div", { children: [_jsx(Label, { children: "Button Style" }), _jsxs(Select, { value: formData.style.buttonVariant, onValueChange: function (value) { return onStyleChange('buttonVariant', value); }, children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, { placeholder: "Select button style" }) }), _jsx(SelectContent, { children: BUTTON_VARIANTS.map(function (variant) { return (_jsx(SelectItem, { value: variant.value, children: variant.label }, variant.value)); }) })] })] }), _jsxs("div", { children: [_jsx(Label, { children: "Button Rounded" }), _jsxs(Select, { value: formData.style.buttonRounded, onValueChange: function (value) {
                                                            return onStyleChange('buttonRounded', value);
                                                        }, children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, { placeholder: "Select border radius" }) }), _jsx(SelectContent, { children: BORDER_RADII.map(function (radius) { return (_jsx(SelectItem, { value: radius.value, children: radius.label }, radius.value)); }) })] })] })] })] }) }), _jsx(TabsContent, { value: "form", className: "space-y-6", children: _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx(Label, { children: "Form Layout" }), _jsxs(Select, { value: formData.style.formLayout, onValueChange: function (value) { return onStyleChange('formLayout', value); }, children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, { placeholder: "Select layout" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "stacked", children: "Stacked" }), _jsx(SelectItem, { value: "inline", children: "Inline" })] })] })] }), _jsxs("div", { children: [_jsx(Label, { children: "Show Labels" }), _jsxs("div", { className: "mt-2 flex items-center", children: [_jsx("input", { type: "checkbox", id: "show-labels", checked: formData.style.showLabels, onChange: function (e) { return onStyleChange('showLabels', e.target.checked); }, className: "h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500" }), _jsx("label", { htmlFor: "show-labels", className: "ml-2 block text-sm text-gray-700", children: "Show field labels" })] })] })] }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx(Label, { children: "Form Padding" }), _jsxs("div", { className: "mt-2", children: [_jsx(Slider, { value: [parseInt(formData.style.padding) || 6], min: 0, max: 12, step: 1, onValueChange: function (_a) {
                                                                    var value = _a[0];
                                                                    return onStyleChange('padding', value.toString());
                                                                }, className: "w-full" }), _jsxs("div", { className: "mt-2 text-sm text-gray-500", children: [formData.style.padding, " (", parseInt(formData.style.padding) * 4, "px)"] })] })] }), _jsxs("div", { children: [_jsx(Label, { children: "Box Shadow" }), _jsxs(Select, { value: formData.style.boxShadow, onValueChange: function (value) { return onStyleChange('boxShadow', value); }, children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, { placeholder: "Select shadow" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "none", children: "None" }), _jsx(SelectItem, { value: "sm", children: "Small" }), _jsx(SelectItem, { value: "md", children: "Medium" }), _jsx(SelectItem, { value: "lg", children: "Large" }), _jsx(SelectItem, { value: "xl", children: "Extra Large" })] })] })] })] })] }) }), _jsx(TabsContent, { value: "typography", className: "space-y-6", children: _jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx(Label, { children: "Font Family" }), _jsxs(Select, { value: formData.style.fontFamily, onValueChange: function (value) { return onStyleChange('fontFamily', value); }, children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, { placeholder: "Select font family" }) }), _jsx(SelectContent, { children: FONT_FAMILIES.map(function (font) { return (_jsx(SelectItem, { value: font.value, children: font.label }, font.value)); }) })] })] }), _jsxs("div", { children: [_jsx(Label, { children: "Border Radius" }), _jsxs(Select, { value: formData.style.borderRadius, onValueChange: function (value) { return onStyleChange('borderRadius', value); }, children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, { placeholder: "Select border radius" }) }), _jsx(SelectContent, { children: ['none', 'sm', 'md', 'lg', 'xl', '2xl', '3xl', 'full'].map(function (radius) { return (_jsx(SelectItem, { value: radius, children: radius.charAt(0).toUpperCase() + radius.slice(1) }, radius)); }) })] })] })] }) }) })] }) }), colorPicker.open && (_jsx("div", { className: "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4", children: _jsxs("div", { className: "bg-white rounded-lg p-6 w-full max-w-sm", children: [_jsx(ChromePicker, { color: colorPicker.color, onChange: function (color) { return handleColorChange(colorPicker.name, color.hex); } }), _jsxs("div", { className: "mt-4 flex justify-end space-x-2", children: [_jsx(Button, { variant: "outline", onClick: function () { return setColorPicker(function (prev) { return (__assign(__assign({}, prev), { open: false })); }); }, children: "Cancel" }), _jsx(Button, { onClick: function () {
                                        onStyleChange(colorPicker.name, colorPicker.color);
                                        setColorPicker(function (prev) { return (__assign(__assign({}, prev), { open: false })); });
                                    }, children: "Apply" })] })] }) }))] }));
}
//# sourceMappingURL=appearance-section.js.map