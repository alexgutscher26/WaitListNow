{"version":3,"file":"route.js","sourceRoot":"","sources":["route.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextResponse, type NextRequest } from 'next/server';\r\nimport { getAuth, currentUser } from '@clerk/nextjs/server';\r\nimport { db } from '@/lib/db';\r\nimport { onboardingCompleteSchema } from '@/lib/validations/onboarding';\r\nimport { z } from 'zod';\r\n\r\n// Enable debug logging in development\r\nconst isDev = process.env.NODE_ENV === 'development';\r\nconst log = (...args: any[]) => isDev && console.log('[Onboarding API]', ...args);\r\n\r\n// POST /api/onboarding/complete - Mark onboarding as complete\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    // Verify authentication\r\n    const { userId } = getAuth(req);\r\n    if (!userId) {\r\n      return new NextResponse('Unauthorized', { status: 401 });\r\n    }\r\n\r\n    // Parse and validate request body\r\n    const json = await req.json();\r\n    const data = onboardingCompleteSchema.parse(json);\r\n\r\n    log('Onboarding data received:', data);\r\n\r\n    // Get the current user from Clerk to get their email\r\n    const clerkUser = await currentUser();\r\n    if (!clerkUser) {\r\n      return new NextResponse(JSON.stringify({ error: 'Unauthorized' }), {\r\n        status: 401,\r\n        headers: { 'Content-Type': 'application/json' },\r\n      });\r\n    }\r\n\r\n    const userEmail = clerkUser.emailAddresses?.[0]?.emailAddress;\r\n    if (!userEmail) {\r\n      return new NextResponse(JSON.stringify({ error: 'Email address not found' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' },\r\n      });\r\n    }\r\n\r\n    // Find or create the user in the database\r\n    let user = await db.user.findUnique({\r\n      where: { externalId: userId },\r\n    });\r\n\r\n    // If user doesn't exist, create them\r\n    if (!user) {\r\n      log('User not found, creating new user with externalId:', userId);\r\n      try {\r\n        user = await db.user.create({\r\n          data: {\r\n            externalId: userId,\r\n            email: userEmail,\r\n            // Add any other required fields with default values\r\n          },\r\n        });\r\n        log('Created new user:', user.id);\r\n      } catch (createError) {\r\n        console.error('Error creating user:', createError);\r\n        return new NextResponse(JSON.stringify({ error: 'Failed to create user' }), {\r\n          status: 500,\r\n          headers: { 'Content-Type': 'application/json' },\r\n        });\r\n      }\r\n    } else {\r\n      log('Found existing user:', user.id);\r\n    }\r\n\r\n    // Prepare the update data with the correct field names from Prisma schema\r\n    const updateData = {\r\n      onboardingComplete: true,\r\n      onboardingCompletedAt: new Date(),\r\n    };\r\n\r\n    // Alternative: Store in separate onboarding fields if you have them\r\n    // Uncomment and modify based on your actual schema:\r\n    /*\r\n    updateData = {\r\n      onboardingComplete: true,\r\n      onboardingCompletedAt: new Date(),\r\n      // Add other specific fields based on your onboarding data structure\r\n      // companyName: data.companyName,\r\n      // role: data.role,\r\n      // etc.\r\n    };\r\n    */\r\n\r\n    log('Update data:', updateData);\r\n\r\n    // Update the user to mark onboarding as complete\r\n    const updatedUser = await db.user.update({\r\n      where: { id: user.id },\r\n      data: updateData,\r\n      select: {\r\n        id: true,\r\n        email: true,\r\n        plan: true,\r\n        createdAt: true,\r\n        updatedAt: true,\r\n      } as const, // Use const assertion to help with type inference\r\n    });\r\n\r\n    log('User updated successfully:', updatedUser.id);\r\n\r\n    // Generate a slug from the waitlist name\r\n    const waitlistName = data.name || 'My Waitlist';\r\n    const slug = waitlistName\r\n      .toLowerCase()\r\n      .replace(/[^a-z0-9]+/g, '-')\r\n      .replace(/(^-|-$)/g, '');\r\n\r\n    // Create a default waitlist for the user\r\n    const waitlist = await db.waitlist.create({\r\n      data: {\r\n        name: waitlistName,\r\n        slug: `${slug}-${Math.random().toString(36).substring(2, 8)}`,\r\n        description: data.description || null,\r\n        websiteUrl: data.websiteUrl || null,\r\n        redirectUrl: data.redirectUrl || null,\r\n        userId: user.id,\r\n        status: 'DRAFT',\r\n        customFields: [],\r\n        style: {},\r\n        settings: {},\r\n      },\r\n    });\r\n\r\n    log('Created default waitlist:', waitlist.id);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Onboarding completed successfully',\r\n      user: updatedUser,\r\n      waitlist,\r\n    });\r\n  } catch (error) {\r\n    console.error('[ONBOARDING_COMPLETE]', error);\r\n    log('Error details:', error);\r\n\r\n    // Handle Prisma errors specifically\r\n    if (error && typeof error === 'object' && 'code' in error) {\r\n      const prismaError = error as any;\r\n      if (prismaError.code === 'P2002') {\r\n        return new NextResponse(\r\n          JSON.stringify({\r\n            error: 'Unique constraint violation',\r\n            details: isDev ? prismaError.message : undefined,\r\n          }),\r\n          {\r\n            status: 409,\r\n            headers: { 'Content-Type': 'application/json' },\r\n          },\r\n        );\r\n      }\r\n      if (prismaError.code === 'P2025') {\r\n        return new NextResponse(\r\n          JSON.stringify({\r\n            error: 'Record not found',\r\n            details: isDev ? prismaError.message : undefined,\r\n          }),\r\n          {\r\n            status: 404,\r\n            headers: { 'Content-Type': 'application/json' },\r\n          },\r\n        );\r\n      }\r\n    }\r\n\r\n    if (error instanceof z.ZodError) {\r\n      return new NextResponse(\r\n        JSON.stringify({\r\n          error: 'Validation error',\r\n          details: error.errors,\r\n        }),\r\n        {\r\n          status: 400,\r\n          headers: { 'Content-Type': 'application/json' },\r\n        },\r\n      );\r\n    }\r\n\r\n    if (error instanceof Error) {\r\n      return new NextResponse(\r\n        JSON.stringify({\r\n          error: error.message,\r\n          stack: isDev ? error.stack : undefined,\r\n        }),\r\n        {\r\n          status: 500,\r\n          headers: { 'Content-Type': 'application/json' },\r\n        },\r\n      );\r\n    }\r\n\r\n    return new NextResponse(\r\n      JSON.stringify({\r\n        error: 'Internal server error',\r\n        details: isDev ? String(error) : undefined,\r\n      }),\r\n      {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' },\r\n      },\r\n    );\r\n  }\r\n}\r\n"]}