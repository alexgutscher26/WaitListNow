{"version":3,"file":"check-neon.js","sourceRoot":"","sources":["check-neon.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAE9C,6CAA6C;AAE7C,IAAM,MAAM,GAAG,IAAI,YAAY,CAAC;IAC9B,GAAG,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC;CACxC,CAAC,CAAC;AAEH;;;;;;GAMG;AACH,SAAe,aAAa;;;;;;;oBAGV,qBAAM,MAAM,CAAC,SAAS,2FAAA,wBAAsB,MAAA;;oBAApD,KAAK,GAAG,SAA4C;;;;oBAG1D,OAAO,CAAC,KAAK,CAAC,wBAAwB,EAAE,OAAK,CAAC,CAAC;;wBAE/C,qBAAM,MAAM,CAAC,WAAW,EAAE,EAAA;;oBAA1B,SAA0B,CAAC;;;;;;CAE9B;AAED,aAAa,EAAE,CAAC","sourcesContent":["import { PrismaClient } from '@prisma/client';\r\n\r\n// console.log('üîç Checking NeonDB data...');\r\n\r\nconst prisma = new PrismaClient({\r\n  log: ['query', 'info', 'warn', 'error'],\r\n});\r\n\r\n/**\r\n * Asynchronously queries users from the NeonDB database and logs the results.\r\n *\r\n * This function fetches all records from the \"User\" table in the NeonDB database using Prisma's `$queryRaw` method.\r\n * It logs the fetched user data to the console. If an error occurs during the query, it catches and logs the error.\r\n * Finally, it ensures that the Prisma client is disconnected regardless of the operation's success or failure.\r\n */\r\nasync function checkNeonData() {\r\n  try {\r\n    // console.log('\\nüîé Querying users from NeonDB...');\r\n    const users = await prisma.$queryRaw`SELECT * FROM \"User\"`;\r\n    // console.log('Users in NeonDB:', users);\r\n  } catch (error) {\r\n    console.error('Error querying NeonDB:', error);\r\n  } finally {\r\n    await prisma.$disconnect();\r\n  }\r\n}\r\n\r\ncheckNeonData();\r\n"]}