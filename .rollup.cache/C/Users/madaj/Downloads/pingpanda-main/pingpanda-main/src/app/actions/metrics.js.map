{"version":3,"file":"metrics.js","sourceRoot":"","sources":["metrics.ts"],"names":[],"mappings":"AAAA,aAAa,CAAC;;AAEd,OAAO,EAAE,IAAI,EAAE,MAAM,sBAAsB,CAAC;AAC5C,OAAO,EAAE,EAAE,EAAE,MAAM,UAAU,CAAC;AAE9B;;;;;;;;;GASG;AACH,MAAM,UAAgB,cAAc;;;;;;;oBAEX,qBAAM,IAAI,EAAE,EAAA;;oBAA3B,YAAY,GAAG,SAAY;oBAC3B,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;oBAEnC,IAAI,CAAC,MAAM,EAAE,CAAC;wBACZ,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;oBAClC,CAAC;oBAGY,qBAAM,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC;4BACpC,KAAK,EAAE,EAAE,UAAU,EAAE,MAAM,EAAE;4BAC7B,OAAO,EAAE;gCACP,SAAS,EAAE;oCACT,OAAO,EAAE;wCACP,MAAM,EAAE;4CACN,MAAM,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE;yCAC9B;qCACF;iCACF;gCACD,WAAW,EAAE,IAAI;6BAClB;yBACF,CAAC,EAAA;;oBAZI,IAAI,GAAG,SAYX;oBAEF,IAAI,CAAC,IAAI,EAAE,CAAC;wBACV,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;oBACpC,CAAC;oBAGK,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAC3C,UAAC,QAAQ,IAAK,OAAA,QAAQ,CAAC,MAAM,KAAK,QAAQ,EAA5B,CAA4B,CAC3C,CAAC,MAAM,CAAC;oBAEH,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;oBAIvC,cAAc,GAClB,eAAe,GAAG,CAAC;wBACjB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,YAAY,GAAG,CAAC,eAAe,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;wBAC1E,CAAC,CAAC,CAAC,CAAC;oBAER,sBAAO;4BACL,eAAe,iBAAA;4BACf,YAAY,cAAA;4BACZ,cAAc,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,cAAc,CAAC,EAAE,cAAc;yBAC9D,EAAC;;;oBAEF,OAAO,CAAC,KAAK,CAAC,8BAA8B,EAAE,OAAK,CAAC,CAAC;oBACrD,yCAAyC;oBACzC,sBAAO;4BACL,eAAe,EAAE,CAAC;4BAClB,YAAY,EAAE,CAAC;4BACf,cAAc,EAAE,CAAC;yBAClB,EAAC;;;;;CAEL","sourcesContent":["'server only';\r\n\r\nimport { auth } from '@clerk/nextjs/server';\r\nimport { db } from '@/lib/db';\r\n\r\n/**\r\n * Fetches and calculates user metrics such as active waitlists, total signups, and conversion rate.\r\n *\r\n * The function first authenticates the user to get their ID. It then retrieves the user's data including\r\n * their waitlists and subscribers from the database. If the user is not found or unauthorized, it throws an error.\r\n * Metrics are calculated based on the retrieved data, and a default set of metrics is returned in case of any errors.\r\n *\r\n * @returns An object containing the active waitlists count, total signups count, and conversion rate.\r\n * @throws Error If authentication fails or if the user is not found.\r\n */\r\nexport async function getUserMetrics() {\r\n  try {\r\n    const authResponse = await auth();\r\n    const userId = authResponse.userId;\r\n\r\n    if (!userId) {\r\n      throw new Error('Unauthorized');\r\n    }\r\n\r\n    // Get the user with their waitlists and subscribers\r\n    const user = await db.user.findUnique({\r\n      where: { externalId: userId },\r\n      include: {\r\n        waitlists: {\r\n          include: {\r\n            _count: {\r\n              select: { subscribers: true },\r\n            },\r\n          },\r\n        },\r\n        subscribers: true,\r\n      },\r\n    });\r\n\r\n    if (!user) {\r\n      throw new Error('User not found');\r\n    }\r\n\r\n    // Calculate metrics\r\n    const activeWaitlists = user.waitlists.filter(\r\n      (waitlist) => waitlist.status === 'ACTIVE',\r\n    ).length;\r\n\r\n    const totalSignups = user.subscribers.length;\r\n\r\n    // Calculate conversion rate (for simplicity, we'll use a placeholder)\r\n    // In a real app, you'd track visits and calculate actual conversion rate\r\n    const conversionRate =\r\n      activeWaitlists > 0\r\n        ? Math.min(100, Math.round((totalSignups / (activeWaitlists * 50)) * 100))\r\n        : 0;\r\n\r\n    return {\r\n      activeWaitlists,\r\n      totalSignups,\r\n      conversionRate: Math.min(100, conversionRate), // Cap at 100%\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching user metrics:', error);\r\n    // Return default values in case of error\r\n    return {\r\n      activeWaitlists: 0,\r\n      totalSignups: 0,\r\n      conversionRate: 0,\r\n    };\r\n  }\r\n}\r\n"]}