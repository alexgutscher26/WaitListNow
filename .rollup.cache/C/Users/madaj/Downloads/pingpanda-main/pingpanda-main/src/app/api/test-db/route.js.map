{"version":3,"file":"route.js","sourceRoot":"","sources":["route.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { headers as getHeaders } from 'next/headers';\r\nimport { rateLimit } from '@/lib/rate-limit';\r\nimport { db } from '@/lib/db';\r\nimport { currentUser } from '@clerk/nextjs/server';\r\n\r\n// Disable caching for this route\r\nexport const dynamic = 'force-dynamic';\r\n\r\ntype UserData = {\r\n  id: string;\r\n  email: string;\r\n  createdAt: Date;\r\n};\r\n\r\n// Rate limiting configuration\r\nconst limiter = rateLimit({\r\n  interval: 60 * 1000, // 1 minute\r\n  uniqueTokenPerInterval: 500, // Max 500 users per second\r\n});\r\n\r\nexport const runtime = 'nodejs';\r\n\r\nexport async function GET() {\r\n  try {\r\n    // Rate limiting check\r\n    const identifier = (await getHeaders()).get('x-forwarded-for') || 'unknown';\r\n    const { success } = await limiter.check(10, identifier); // 10 requests per minute\r\n\r\n    if (!success) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Too many requests' },\r\n        {\r\n          status: 429,\r\n          headers: {\r\n            'Retry-After': '60',\r\n            'Cache-Control': 'no-store, max-age=0',\r\n          },\r\n        },\r\n      );\r\n    }\r\n\r\n    // Authentication check\r\n    const user = await currentUser();\r\n\r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Unauthorized' },\r\n        {\r\n          status: 401,\r\n          headers: { 'Cache-Control': 'no-store, max-age=0' },\r\n        },\r\n      );\r\n    }\r\n\r\n    // Debug: Log the Clerk user ID\r\n    // console.log('Clerk User ID:', user.id);\r\n\r\n    // Verify user exists in our database\r\n    let dbUser: UserData | null = null;\r\n    try {\r\n      // First try to find by Clerk ID\r\n      dbUser = await db.user.findUnique({\r\n        where: { id: user.id },\r\n        select: {\r\n          id: true,\r\n          email: true,\r\n          createdAt: true,\r\n        },\r\n      });\r\n\r\n      // If not found by Clerk ID, try to find by email\r\n      if (!dbUser && user.emailAddresses?.[0]?.emailAddress) {\r\n        // console.log('Trying to find user by email:', user.emailAddresses[0].emailAddress);\r\n        const userByEmail = await db.user.findFirst({\r\n          where: { email: user.emailAddresses[0].emailAddress },\r\n          select: {\r\n            id: true,\r\n            email: true,\r\n            createdAt: true,\r\n          },\r\n        });\r\n        dbUser = userByEmail;\r\n      }\r\n\r\n      // Debug: Log all users if still not found\r\n      if (!dbUser) {\r\n        // console.log('User not found, listing all users:');\r\n        const allUsers = await db.user.findMany({\r\n          select: { id: true, email: true, createdAt: true },\r\n          take: 10,\r\n        });\r\n        // console.log('First 10 users in DB:', allUsers);\r\n\r\n        return NextResponse.json(\r\n          {\r\n            success: false,\r\n            error: 'User not found',\r\n            debug: {\r\n              clerkUserId: user.id,\r\n              clerkEmail: user.emailAddresses?.[0]?.emailAddress,\r\n              dbUsersSample: allUsers,\r\n            },\r\n          },\r\n          {\r\n            status: 404,\r\n            headers: {\r\n              'Cache-Control': 'no-store, max-age=0',\r\n              'X-Content-Type-Options': 'nosniff',\r\n            },\r\n          },\r\n        );\r\n      }\r\n    } catch (dbError) {\r\n      console.error('Database error:', dbError);\r\n      return NextResponse.json(\r\n        { success: false, error: 'Database error' },\r\n        {\r\n          status: 500,\r\n          headers: { 'Cache-Control': 'no-store, max-age=0' },\r\n        },\r\n      );\r\n    }\r\n\r\n    // Simple query to test the connection - only return non-sensitive data\r\n    let users: Array<{ id: string; email: string; createdAt: Date }> = [];\r\n    try {\r\n      users = await db.user.findMany({\r\n        take: 1,\r\n        select: {\r\n          id: true,\r\n          email: true,\r\n          createdAt: true,\r\n        },\r\n        orderBy: { createdAt: 'desc' },\r\n      });\r\n    } catch (queryError) {\r\n      console.error('Query error:', queryError);\r\n      return NextResponse.json(\r\n        { success: false, error: 'Query error' },\r\n        {\r\n          status: 500,\r\n          headers: { 'Cache-Control': 'no-store, max-age=0' },\r\n        },\r\n      );\r\n    }\r\n\r\n    // Security headers\r\n    const responseHeaders = {\r\n      'Content-Type': 'application/json',\r\n      'X-Content-Type-Options': 'nosniff',\r\n      'X-Frame-Options': 'DENY',\r\n      'X-XSS-Protection': '1; mode=block',\r\n      'Referrer-Policy': 'strict-origin-when-cross-origin',\r\n      'Permissions-Policy': 'camera=(), microphone=(), geolocation=()',\r\n      'Cache-Control': 'no-store, max-age=0',\r\n    };\r\n\r\n    return NextResponse.json(\r\n      {\r\n        success: true,\r\n        users: users.map((u) => ({\r\n          id: u.id,\r\n          email: u.email,\r\n          // Don't expose sensitive information\r\n          createdAt: u.createdAt.toISOString(),\r\n        })),\r\n        message: 'Database connection successful!',\r\n      },\r\n      {\r\n        headers: responseHeaders,\r\n      },\r\n    );\r\n  } catch (error) {\r\n    console.error('Database connection error:', error);\r\n    // Don't leak stack traces in production\r\n    const errorMessage =\r\n      process.env.NODE_ENV === 'development'\r\n        ? error instanceof Error\r\n          ? error.message\r\n          : 'Unknown error'\r\n        : 'Internal server error';\r\n\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: errorMessage,\r\n      },\r\n      {\r\n        status: 500,\r\n        headers: {\r\n          'Cache-Control': 'no-store, max-age=0',\r\n          'X-Content-Type-Options': 'nosniff',\r\n        },\r\n      },\r\n    );\r\n  }\r\n}\r\n"]}