{"version":3,"file":"route.js","sourceRoot":"","sources":["route.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,aAAa,CAAC;AAE3C,OAAO,EAAE,OAAO,EAAE,MAAM,sBAAsB,CAAC;AAC/C,OAAO,EAAE,EAAE,EAAE,MAAM,UAAU,CAAC;AAC9B,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,IAAM,mBAAmB,GAAG,CAAC,CAAC,MAAM,CAAC;IACnC,YAAY,EAAE,CAAC,CAAC,MAAM,CAAC;QACrB,qBAAqB,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE;QAC7C,qBAAqB,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;KAC7C,CAAC;CACH,CAAC,CAAC;AAEH,MAAM,UAAgB,KAAK;wDAAC,GAAgB,EAAE,EAAsC;;YAApC,MAAM,YAAA;;;;;oBAG1C,MAAM,GAAK,OAAO,CAAC,GAAG,CAAC,OAAjB,CAAkB;oBAChC,IAAI,CAAC,MAAM,EAAE,CAAC;wBACZ,sBAAO,IAAI,YAAY,CAAC,cAAc,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,EAAC;oBAC3D,CAAC;oBAGK,UAAU,GAAG,MAAM,CAAC,EAAE,CAAC;oBAGhB,qBAAM,GAAG,CAAC,IAAI,EAAE,EAAA;;oBAAvB,IAAI,GAAG,SAAgB;oBACvB,UAAU,GAAG,mBAAmB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;oBAEvD,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;wBACxB,sBAAO,IAAI,YAAY,CACrB,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,sBAAsB,EAAE,OAAO,EAAE,UAAU,CAAC,KAAK,EAAE,CAAC,EAC5E,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE,EAAE,CACjE,EAAC;oBACJ,CAAC;oBAEO,YAAY,GAAK,UAAU,CAAC,IAAI,aAApB,CAAqB;oBAG5B,qBAAM,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC;4BACpC,KAAK,EAAE,EAAE,UAAU,EAAE,MAAM,EAAE;yBAC9B,CAAC,EAAA;;oBAFI,IAAI,GAAG,SAEX;oBAEF,IAAI,CAAC,IAAI,EAAE,CAAC;wBACV,sBAAO,IAAI,YAAY,CAAC,gBAAgB,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,EAAC;oBAC7D,CAAC;oBAGuB,qBAAM,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC;4BACnD,KAAK,EAAE,EAAE,EAAE,EAAE,UAAU,EAAE;yBAC1B,CAAC,EAAA;;oBAFI,eAAe,GAAG,SAEtB;oBAEF,IAAI,CAAC,eAAe,EAAE,CAAC;wBACrB,sBAAO,IAAI,YAAY,CAAC,oBAAoB,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,EAAC;oBACjE,CAAC;oBAGK,mBAAmB,yBACpB,CAAE,eAAe,CAAC,YAAwC,IAAI,EAAE,CAAC,GACjE,YAAY,CAChB,CAAC;oBAGsB,qBAAM,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC;4BAC/C,KAAK,EAAE;gCACL,EAAE,EAAE,UAAU;gCACd,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,0CAA0C;6BAC5D;4BACD,IAAI,EAAE;gCACJ,YAAY,EAAE,mBAAmB;6BAClC;yBACF,CAAC,EAAA;;oBARI,eAAe,GAAG,SAQtB;oBAEF,sBAAO,YAAY,CAAC,IAAI,CAAC,eAAe,CAAC,EAAC;;;oBAE1C,OAAO,CAAC,KAAK,CAAC,kCAAkC,EAAE,OAAK,CAAC,CAAC;oBACzD,sBAAO,IAAI,YAAY,CACrB,IAAI,CAAC,SAAS,CAAC;4BACb,KAAK,EAAE,uBAAuB;4BAC9B,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,OAAK,CAAC,CAAC,CAAC,CAAC,SAAS;yBAC5E,CAAC,EACF;4BACE,MAAM,EAAE,GAAG;4BACX,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;yBAChD,CACF,EAAC;;;;;CAEL","sourcesContent":["import { NextResponse } from 'next/server';\r\nimport type { NextRequest } from 'next/server';\r\nimport { getAuth } from '@clerk/nextjs/server';\r\nimport { db } from '@/lib/db';\r\nimport { z } from 'zod';\r\n\r\nconst emailSettingsSchema = z.object({\r\n  customFields: z.object({\r\n    sendConfirmationEmail: z.boolean().optional(),\r\n    customThankYouMessage: z.string().optional(),\r\n  }),\r\n});\r\n\r\nexport async function PATCH(req: NextRequest, { params }: { params: { id: string } }) {\r\n  try {\r\n    // Verify authentication\r\n    const { userId } = getAuth(req);\r\n    if (!userId) {\r\n      return new NextResponse('Unauthorized', { status: 401 });\r\n    }\r\n\r\n    // Get the waitlist ID from the URL parameters\r\n    const waitlistId = params.id;\r\n\r\n    // Validate request body\r\n    const body = await req.json();\r\n    const validation = emailSettingsSchema.safeParse(body);\r\n\r\n    if (!validation.success) {\r\n      return new NextResponse(\r\n        JSON.stringify({ error: 'Invalid request data', details: validation.error }),\r\n        { status: 400, headers: { 'Content-Type': 'application/json' } },\r\n      );\r\n    }\r\n\r\n    const { customFields } = validation.data;\r\n\r\n    // Find the user in the database\r\n    const user = await db.user.findUnique({\r\n      where: { externalId: userId },\r\n    });\r\n\r\n    if (!user) {\r\n      return new NextResponse('User not found', { status: 404 });\r\n    }\r\n\r\n    // Get the current waitlist to preserve existing customFields\r\n    const currentWaitlist = await db.waitlist.findUnique({\r\n      where: { id: waitlistId },\r\n    });\r\n\r\n    if (!currentWaitlist) {\r\n      return new NextResponse('Waitlist not found', { status: 404 });\r\n    }\r\n\r\n    // Merge existing customFields with new ones\r\n    const updatedCustomFields = {\r\n      ...((currentWaitlist.customFields as Record<string, unknown>) || {}),\r\n      ...customFields,\r\n    };\r\n\r\n    // Update the waitlist with the merged customFields\r\n    const updatedWaitlist = await db.waitlist.update({\r\n      where: {\r\n        id: waitlistId,\r\n        userId: user.id, // Ensure the waitlist belongs to the user\r\n      },\r\n      data: {\r\n        customFields: updatedCustomFields,\r\n      },\r\n    });\r\n\r\n    return NextResponse.json(updatedWaitlist);\r\n  } catch (error) {\r\n    console.error('[WAITLIST_EMAIL_SETTINGS_UPDATE]', error);\r\n    return new NextResponse(\r\n      JSON.stringify({\r\n        error: 'Internal server error',\r\n        details: process.env.NODE_ENV === 'development' ? String(error) : undefined,\r\n      }),\r\n      {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' },\r\n      },\r\n    );\r\n  }\r\n}\r\n"]}