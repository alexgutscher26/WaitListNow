{"version":3,"file":"check-db.js","sourceRoot":"","sources":["check-db.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAE9C,kDAAkD;AAElD,IAAM,MAAM,GAAG,IAAI,YAAY,CAAC;IAC9B,GAAG,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC;CACxC,CAAC,CAAC;AAEH;;;;;GAKG;AACH,SAAe,SAAS;;;;;;;oBAGN,qBAAM,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAA;;oBAApC,KAAK,GAAG,SAA4B;;;;oBAG1C,OAAO,CAAC,KAAK,CAAC,0BAA0B,EAAE,OAAK,CAAC,CAAC;;wBAEjD,qBAAM,MAAM,CAAC,WAAW,EAAE,EAAA;;oBAA1B,SAA0B,CAAC;;;;;;CAE9B;AAED,SAAS,EAAE,CAAC","sourcesContent":["import { PrismaClient } from '@prisma/client';\r\n\r\n// console.log('üîç Checking database content...');\r\n\r\nconst prisma = new PrismaClient({\r\n  log: ['query', 'info', 'warn', 'error'],\r\n});\r\n\r\n/**\r\n * Asynchronously queries and logs all users from the database.\r\n * This function uses Prisma's `findMany` method to fetch user records.\r\n * If successful, it logs the user data; otherwise, it logs any errors encountered.\r\n * Finally, it ensures that the Prisma client connection is properly disconnected.\r\n */\r\nasync function checkData() {\r\n  try {\r\n    // console.log('\\nüîé Querying users...');\r\n    const users = await prisma.user.findMany();\r\n    // console.log('Users:', users);\r\n  } catch (error) {\r\n    console.error('Error querying database:', error);\r\n  } finally {\r\n    await prisma.$disconnect();\r\n  }\r\n}\r\n\r\ncheckData();\r\n"]}