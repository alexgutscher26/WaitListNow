{"version":3,"file":"types.js","sourceRoot":"","sources":["types.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,WAAW,EAAE,MAAM,UAAU,CAAC;AA2CvC,OAAO,EAAE,WAAW,IAAI,GAAG,EAAE,WAAW,IAAI,IAAI,EAAE,CAAC","sourcesContent":["import { Context, TypedResponse } from 'hono';\r\nimport { z } from 'zod';\r\n\r\nimport { httpHandler } from '@/server';\r\nimport { Variables } from 'hono/types';\r\nimport { Bindings } from '../env';\r\n\r\nexport type Middleware<Ctx> = ({\r\n  ctx,\r\n  next,\r\n  c,\r\n}: {\r\n  ctx: Ctx;\r\n  next: <B>(args?: B) => B & Ctx;\r\n  c: Context<{ Bindings: Bindings; Variables: Variables }>;\r\n}) => Promise<unknown>;\r\n\r\nexport type QueryOperation<Schema extends Record<string, unknown>, ZodInput = never> = {\r\n  type: 'query';\r\n  schema?: z.ZodType<Schema>;\r\n  handler: <Ctx, Output>({\r\n    ctx,\r\n    c,\r\n    input,\r\n  }: {\r\n    ctx: Ctx;\r\n    c: Context;\r\n    input: ZodInput;\r\n  }) => Promise<TypedResponse<Output>>;\r\n  middlewares: Middleware<any>[];\r\n};\r\n\r\nexport type MutationOperation<Schema extends Record<string, unknown>, ZodInput = never> = {\r\n  type: 'mutation';\r\n  schema?: z.ZodType<Schema>;\r\n  handler: <Input, Output>({\r\n    ctx,\r\n    c,\r\n  }: {\r\n    ctx: Input;\r\n    c: Context;\r\n    input: ZodInput;\r\n  }) => Promise<TypedResponse<Output>>;\r\n  middlewares: Middleware<any>[];\r\n};\r\n\r\nexport { httpHandler as GET, httpHandler as POST };\r\n"]}