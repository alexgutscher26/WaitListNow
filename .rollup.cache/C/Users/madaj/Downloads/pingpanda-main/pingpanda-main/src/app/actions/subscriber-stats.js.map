{"version":3,"file":"subscriber-stats.js","sourceRoot":"","sources":["subscriber-stats.ts"],"names":[],"mappings":"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","sourcesContent":["'use server';\r\n\r\nimport { auth } from '@clerk/nextjs/server';\r\nimport { db } from '@/lib/db';\r\n\r\ntype SubscriberGrowthData = Array<{\r\n  date: string;\r\n  count: number;\r\n  cumulative: number;\r\n}>;\r\n\r\nexport async function getSubscriberGrowth(waitlistId: string, days = 30) {\r\n  try {\r\n    const { userId } = auth();\r\n    if (!userId) {\r\n      throw new Error('Unauthorized');\r\n    }\r\n\r\n    // Verify the waitlist belongs to the user\r\n    const waitlist = await db.waitlist.findFirst({\r\n      where: {\r\n        id: waitlistId,\r\n        user: {\r\n          externalId: userId,\r\n        },\r\n      },\r\n    });\r\n\r\n    if (!waitlist) {\r\n      throw new Error('Waitlist not found');\r\n    }\r\n\r\n    // Calculate date range\r\n    const endDate = new Date();\r\n    const startDate = new Date();\r\n    startDate.setDate(startDate.getDate() - days);\r\n\r\n    // Get daily subscriber counts\r\n    const dailyCounts = await db.$queryRaw<Array<{ date: string; count: bigint }>>`\r\n      SELECT \r\n        DATE_TRUNC('day', \"createdAt\") as date,\r\n        COUNT(*)::bigint as count\r\n      FROM \"Subscriber\"\r\n      WHERE \r\n        \"waitlistId\" = ${waitlistId}\r\n        AND \"createdAt\" >= ${startDate}\r\n        AND \"createdAt\" <= ${endDate}\r\n      GROUP BY DATE_TRUNC('day', \"createdAt\")\r\n      ORDER BY date ASC\r\n    `;\r\n\r\n    // Format the data for the chart\r\n    let cumulativeCount = 0;\r\n    const result: SubscriberGrowthData = [];\r\n\r\n    // Generate all dates in the range to ensure we have entries for all days\r\n    const dateMap = new Map<string, number>();\r\n    const currentDate = new Date(startDate);\r\n\r\n    while (currentDate <= endDate) {\r\n      const dateStr = currentDate.toISOString().split('T')[0];\r\n      dateMap.set(dateStr, 0);\r\n      currentDate.setDate(currentDate.getDate() + 1);\r\n    }\r\n\r\n    // Fill in the actual counts\r\n    dailyCounts.forEach((item) => {\r\n      const dateStr = new Date(item.date).toISOString().split('T')[0];\r\n      dateMap.set(dateStr, Number(item.count));\r\n    });\r\n\r\n    // Convert to array and calculate cumulative\r\n    let runningTotal = await db.subscriber.count({\r\n      where: {\r\n        waitlistId,\r\n        createdAt: { lt: startDate },\r\n      },\r\n    });\r\n\r\n    Array.from(dateMap.entries()).forEach(([date, count]) => {\r\n      runningTotal += count;\r\n      result.push({\r\n        date,\r\n        count,\r\n        cumulative: runningTotal,\r\n      });\r\n    });\r\n\r\n    return result;\r\n  } catch (error) {\r\n    console.error('Error fetching subscriber growth data:', error);\r\n    throw new Error('Failed to fetch subscriber growth data');\r\n  }\r\n}\r\n"]}