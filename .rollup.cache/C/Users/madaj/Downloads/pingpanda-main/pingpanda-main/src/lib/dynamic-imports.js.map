{"version":3,"file":"dynamic-imports.js","sourceRoot":"","sources":["dynamic-imports.ts"],"names":[],"mappings":"AAAA,OAAO,OAAmB,MAAM,cAAc,CAAC;AAS/C;;;;;GAKG;AACH,MAAM,UAAU,aAAa,CAC3B,QAAsD,EACtD,OAAqC;IAArC,wBAAA,EAAA,YAAqC;IAE7B,IAAA,OAAO,GAAkB,OAAO,QAAzB,EAAE,KAAgB,OAAO,IAAZ,EAAX,GAAG,mBAAG,KAAK,KAAA,CAAa;IAEzC,OAAO,OAAO,CAAC,QAAqB,EAAE;QACpC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,cAAM,OAAA,OAAO,EAAE,EAAT,CAAS,CAAC,CAAC,CAAC,SAAS;QAC9C,GAAG,KAAA;KACJ,CAAgC,CAAC;AACpC,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,oBAAoB,CAAI,QAA0B;IAChE,OAAO,QAAQ,EAAE,CAAC,IAAI,CAAC,cAAO,CAAC,CAAC,CAAC;AACnC,CAAC","sourcesContent":["import dynamic, { Loader } from 'next/dynamic';\nimport { ComponentType, ReactNode } from 'react';\n\ninterface DynamicImportOptions<T = object> {\n  loading?: () => ReactNode;\n  ssr?: boolean;\n  suspense?: boolean;\n}\n\n/**\n * Helper function to create a dynamic import with common options\n * @param importFn - Dynamic import function (e.g., () => import('./Component'))\n * @param options - Dynamic import options\n * @returns A dynamically imported component with proper TypeScript types\n */\nexport function dynamicImport<T extends object>(\n  importFn: () => Promise<{ default: ComponentType<T> }>,\n  options: DynamicImportOptions<T> = {}\n) {\n  const { loading, ssr = false } = options;\n\n  return dynamic(importFn as Loader<T>, {\n    loading: loading ? () => loading() : undefined,\n    ssr,\n  }) as unknown as ComponentType<T>;\n}\n\n/**\n * Preload a dynamic import for better performance\n * @param importFn - Dynamic import function to preload\n */\nexport function preloadDynamicImport<T>(importFn: () => Promise<T>): Promise<void> {\n  return importFn().then(() => {});\n}\n"]}