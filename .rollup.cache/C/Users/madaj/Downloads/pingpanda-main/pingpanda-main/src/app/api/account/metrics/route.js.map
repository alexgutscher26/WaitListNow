{"version":3,"file":"route.js","sourceRoot":"","sources":["route.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,aAAa,CAAC;AAC3C,OAAO,EAAE,IAAI,EAAE,MAAM,sBAAsB,CAAC;AAC5C,OAAO,EAAE,EAAE,EAAE,MAAM,UAAU,CAAC;AAE9B;;;;;;;;GAQG;AACH,MAAM,UAAgB,GAAG;;;;;;;oBAEA,qBAAM,IAAI,EAAE,EAAA;;oBAA3B,YAAY,GAAG,SAAY;oBAC3B,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;oBAEnC,IAAI,CAAC,MAAM,EAAE,CAAC;wBACZ,sBAAO,YAAY,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,cAAc,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,EAAC;oBACvE,CAAC;oBAGY,qBAAM,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC;4BACpC,KAAK,EAAE,EAAE,UAAU,EAAE,MAAM,EAAE;4BAC7B,OAAO,EAAE;gCACP,SAAS,EAAE;oCACT,OAAO,EAAE;wCACP,MAAM,EAAE;4CACN,MAAM,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE;yCAC9B;qCACF;iCACF;gCACD,WAAW,EAAE,IAAI;6BAClB;yBACF,CAAC,EAAA;;oBAZI,IAAI,GAAG,SAYX;oBAEF,IAAI,CAAC,IAAI,EAAE,CAAC;wBACV,sBAAO,YAAY,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,gBAAgB,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,EAAC;oBACzE,CAAC;oBAGK,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAC3C,UAAC,QAAQ,IAAK,OAAA,QAAQ,CAAC,MAAM,KAAK,QAAQ,EAA5B,CAA4B,CAC3C,CAAC,MAAM,CAAC;oBAEH,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;oBAIvC,cAAc,GAClB,eAAe,GAAG,CAAC;wBACjB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,YAAY,GAAG,CAAC,eAAe,GAAG,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;wBAC1E,CAAC,CAAC,CAAC,CAAC;oBAER,sBAAO,YAAY,CAAC,IAAI,CAAC;4BACvB,eAAe,iBAAA;4BACf,YAAY,cAAA;4BACZ,cAAc,gBAAA;4BACd,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,0CAA0C;yBAC5D,CAAC,EAAC;;;oBAEH,OAAO,CAAC,KAAK,CAAC,8BAA8B,EAAE,OAAK,CAAC,CAAC;oBACrD,sBAAO,YAAY,CAAC,IAAI,CACtB;4BACE,KAAK,EAAE,yBAAyB;4BAChC,OAAO,EAAE,OAAK,YAAY,KAAK,CAAC,CAAC,CAAC,OAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;yBAClE,EACD,EAAE,MAAM,EAAE,GAAG,EAAE,CAChB,EAAC;;;;;CAEL","sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { auth } from '@clerk/nextjs/server';\r\nimport { db } from '@/lib/db';\r\n\r\n/**\r\n * Handles GET requests to fetch user metrics.\r\n *\r\n * This function retrieves user data, including their waitlists and subscribers,\r\n * calculates various metrics such as active waitlists, total signups, and a placeholder conversion rate,\r\n * and returns these metrics in a JSON response. If the user is not found or unauthorized, it returns an appropriate error.\r\n *\r\n * @returns A JSON response containing user metrics or an error message.\r\n */\r\nexport async function GET() {\r\n  try {\r\n    const authResponse = await auth();\r\n    const userId = authResponse.userId;\r\n\r\n    if (!userId) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    // Get the user with their waitlists and subscribers\r\n    const user = await db.user.findUnique({\r\n      where: { externalId: userId },\r\n      include: {\r\n        waitlists: {\r\n          include: {\r\n            _count: {\r\n              select: { subscribers: true },\r\n            },\r\n          },\r\n        },\r\n        subscribers: true,\r\n      },\r\n    });\r\n\r\n    if (!user) {\r\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\r\n    }\r\n\r\n    // Calculate metrics\r\n    const activeWaitlists = user.waitlists.filter(\r\n      (waitlist) => waitlist.status === 'ACTIVE',\r\n    ).length;\r\n\r\n    const totalSignups = user.subscribers.length;\r\n\r\n    // Calculate conversion rate (for simplicity, we'll use a placeholder)\r\n    // In a real app, you'd track visits and calculate actual conversion rate\r\n    const conversionRate =\r\n      activeWaitlists > 0\r\n        ? Math.min(100, Math.round((totalSignups / (activeWaitlists * 50)) * 100))\r\n        : 0;\r\n\r\n    return NextResponse.json({\r\n      activeWaitlists,\r\n      totalSignups,\r\n      conversionRate,\r\n      plan: user.plan, // Include the user's plan in the response\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching user metrics:', error);\r\n    return NextResponse.json(\r\n      {\r\n        error: 'Failed to fetch metrics',\r\n        details: error instanceof Error ? error.message : 'Unknown error',\r\n      },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n"]}