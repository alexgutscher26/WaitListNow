{"version":3,"file":"modal.js","sourceRoot":"","sources":["modal.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,yBAAyB,CAAC;AACxD,OAAO,EAAE,EAAE,EAAE,MAAM,SAAS,CAAC;AAE7B,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAC9B,OAAO,EAAE,MAAM,EAAE,aAAa,EAAE,WAAW,EAAE,MAAM,UAAU,CAAC;AAY9D;;;;;;;;;;;;;;GAcG;AACH,MAAM,CAAC,IAAM,KAAK,GAAG,UAAC,EAQT;QAPX,QAAQ,cAAA,EACR,SAAS,eAAA,EACT,WAAW,iBAAA,EACX,OAAO,aAAA,EACP,mBAAmB,yBAAA,EACnB,YAAY,kBAAA,EACZ,SAAS,eAAA;IAET;;;;;;;;;OASG;IACH,IAAM,UAAU,GAAG,UAAC,EAAkC;YAAhC,OAAO,aAAA;QAC3B,IAAI,mBAAmB,IAAI,CAAC,OAAO,EAAE,CAAC;YACpC,OAAO;QACT,CAAC;QAED,IAAI,YAAY,EAAE,CAAC;YACjB,YAAY,CAAC,KAAK,CAAC,CAAC;QACtB,CAAC;IACH,CAAC,CAAC;IAEM,IAAA,QAAQ,GAAK,aAAa,EAAE,SAApB,CAAqB;IAErC,IAAI,QAAQ,IAAI,CAAC,WAAW,EAAE,CAAC;QAC7B,OAAO,CACL,MAAC,MAAM,CAAC,IAAI,IACV,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,EACrC,YAAY,EAAE,UAAC,IAAI;gBACjB,IAAI,CAAC,IAAI,EAAE,CAAC;oBACV,UAAU,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;gBAChC,CAAC;YACH,CAAC,aAED,KAAC,MAAM,CAAC,OAAO,IAAC,SAAS,EAAC,4DAA4D,GAAG,EACzF,KAAC,MAAM,CAAC,MAAM,cACZ,MAAC,MAAM,CAAC,OAAO,IACb,SAAS,EAAE,EAAE,CACX,yGAAyG,EACzG,SAAS,CACV,aAED,cAAK,SAAS,EAAC,uFAAuF,YACpG,cAAK,SAAS,EAAC,wCAAwC,GAAG,GACtD,EAEL,QAAQ,IACM,GACH,IACJ,CACf,CAAC;IACJ,CAAC;IAED,OAAO,CACL,MAAC,MAAM,IACL,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,EACrC,YAAY,EAAE,UAAC,IAAI;YACjB,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,UAAU,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;YAChC,CAAC;QACH,CAAC,aAED,KAAC,WAAW,IAAC,SAAS,EAAC,SAAS,uBAAqB,EACrD,KAAC,aAAa,cAAE,QAAQ,GAAiB,IAClC,CACV,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { useMediaQuery } from '@/hooks/use-media-query';\r\nimport { cn } from '@/utils';\r\nimport { Dispatch, ReactNode, SetStateAction } from 'react';\r\nimport { Drawer } from 'vaul';\r\nimport { Dialog, DialogContent, DialogTitle } from './dialog';\r\n\r\ninterface ModalProps {\r\n  children?: ReactNode;\r\n  className?: string;\r\n  showModal?: boolean;\r\n  setShowModal?: Dispatch<SetStateAction<boolean>>;\r\n  onClose?: () => void;\r\n  desktopOnly?: boolean;\r\n  preventDefaultClose?: boolean;\r\n}\r\n\r\n/**\r\n * Modal component that renders a dialog or drawer based on screen size and configuration.\r\n *\r\n * This component conditionally renders either a Dialog or Drawer depending on whether the screen is mobile or desktop.\r\n * It handles closing the modal, managing state through props, and applying styles based on provided className.\r\n *\r\n * @param children - The content to be rendered inside the Modal.\r\n * @param className - Additional CSS classes to apply to the Modal content.\r\n * @param desktopOnly - If true, the Modal will only be shown on desktop sizes.\r\n * @param onClose - Callback function invoked when the Modal is closed.\r\n * @param preventDefaultClose - Prevents closing the Modal unless dragged if set to true.\r\n * @param setShowModal - Function to update the showModal state.\r\n * @param showModal - The current visibility state of the Modal.\r\n * @returns A Dialog or Drawer component based on screen size and configuration.\r\n */\r\nexport const Modal = ({\r\n  children,\r\n  className,\r\n  desktopOnly,\r\n  onClose,\r\n  preventDefaultClose,\r\n  setShowModal,\r\n  showModal,\r\n}: ModalProps) => {\r\n  /**\r\n   * Closes the modal based on certain conditions.\r\n   *\r\n   * This function checks if `preventDefaultClose` is true and if the modal was not dragged.\r\n   * If both conditions are met, it returns early without closing the modal.\r\n   * Otherwise, it sets `setShowModal` to false to close the modal visually.\r\n   *\r\n   * @param {Object} options - An object containing optional parameters.\r\n   * @param {boolean} [options.dragged] - A flag indicating whether the modal was dragged.\r\n   */\r\n  const closeModal = ({ dragged }: { dragged?: boolean }) => {\r\n    if (preventDefaultClose && !dragged) {\r\n      return;\r\n    }\r\n\r\n    if (setShowModal) {\r\n      setShowModal(false);\r\n    }\r\n  };\r\n\r\n  const { isMobile } = useMediaQuery();\r\n\r\n  if (isMobile && !desktopOnly) {\r\n    return (\r\n      <Drawer.Root\r\n        open={setShowModal ? showModal : true}\r\n        onOpenChange={(open) => {\r\n          if (!open) {\r\n            closeModal({ dragged: true });\r\n          }\r\n        }}\r\n      >\r\n        <Drawer.Overlay className=\"fixed inset-0 z-40 bg-gray-100 bg-opacity-10 backdrop-blur\" />\r\n        <Drawer.Portal>\r\n          <Drawer.Content\r\n            className={cn(\r\n              'fixed !max-w-none bottom-0 left-0 right-0 z-50 mt-24 rounded-t-[10px] border-t border-gray-200 bg-white',\r\n              className,\r\n            )}\r\n          >\r\n            <div className=\"sticky top-0 z-20 flex w-full items-center justify-center rounded-t-[10px] bg-inherit\">\r\n              <div className=\"my-3 h-1 w-12 rounded-full bg-gray-300\" />\r\n            </div>\r\n\r\n            {children}\r\n          </Drawer.Content>\r\n        </Drawer.Portal>\r\n      </Drawer.Root>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Dialog\r\n      open={setShowModal ? showModal : true}\r\n      onOpenChange={(open) => {\r\n        if (!open) {\r\n          closeModal({ dragged: true });\r\n        }\r\n      }}\r\n    >\r\n      <DialogTitle className=\"sr-only\">Dialog</DialogTitle>\r\n      <DialogContent>{children}</DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n"]}