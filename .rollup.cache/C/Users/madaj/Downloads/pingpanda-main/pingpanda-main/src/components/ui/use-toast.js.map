{"version":3,"file":"use-toast.js","sourceRoot":"","sources":["use-toast.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\n\r\nimport type { ToastActionElement, ToastProps } from '@/components/ui/toast';\r\n\r\nconst TOAST_LIMIT = 1;\r\nconst TOAST_REMOVE_DELAY = 1000000;\r\n\r\ntype ToasterToast = ToastProps & {\r\n  id: string;\r\n  title?: React.ReactNode;\r\n  description?: React.ReactNode;\r\n  action?: ToastActionElement;\r\n};\r\n\r\nconst actionTypes = {\r\n  ADD_TOAST: 'ADD_TOAST',\r\n  UPDATE_TOAST: 'UPDATE_TOAST',\r\n  DISMISS_TOAST: 'DISMISS_TOAST',\r\n  REMOVE_TOAST: 'REMOVE_TOAST',\r\n} as const;\r\n\r\nlet count = 0;\r\n\r\n/**\r\n * Generates a unique ID by incrementing and wrapping around a counter.\r\n */\r\nfunction genId() {\r\n  count = (count + 1) % Number.MAX_VALUE;\r\n  return count.toString();\r\n}\r\n\r\ntype ActionType = typeof actionTypes;\r\n\r\ntype Action =\r\n  | {\r\n      type: ActionType['ADD_TOAST'];\r\n      toast: ToasterToast;\r\n    }\r\n  | {\r\n      type: ActionType['UPDATE_TOAST'];\r\n      toast: Partial<ToasterToast>;\r\n    }\r\n  | {\r\n      type: ActionType['DISMISS_TOAST'];\r\n      toastId?: ToasterToast['id'];\r\n    }\r\n  | {\r\n      type: ActionType['REMOVE_TOAST'];\r\n      toastId?: ToasterToast['id'];\r\n    };\r\n\r\ninterface State {\r\n  toasts: ToasterToast[];\r\n}\r\n\r\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\r\n\r\n/**\r\n * Adds a toast to the removal queue with a specified delay.\r\n */\r\nconst addToRemoveQueue = (toastId: string) => {\r\n  if (toastTimeouts.has(toastId)) {\r\n    return;\r\n  }\r\n\r\n  const timeout = setTimeout(() => {\r\n    toastTimeouts.delete(toastId);\r\n    dispatch({\r\n      type: 'REMOVE_TOAST',\r\n      toastId,\r\n    });\r\n  }, TOAST_REMOVE_DELAY);\r\n\r\n  toastTimeouts.set(toastId, timeout);\r\n};\r\n\r\n/**\r\n * Reducer function for managing toast notifications in the application state.\r\n *\r\n * Handles different actions such as adding, updating, dismissing, and removing toasts.\r\n * Maintains a list of toasts with a limit defined by TOAST_LIMIT.\r\n * Manages side effects like adding toasts to the removal queue.\r\n *\r\n * @param state - The current state containing the list of toasts.\r\n * @param action - An object describing the action to be performed on the toast state.\r\n * @returns The updated state after processing the action.\r\n */\r\nexport const reducer = (state: State, action: Action): State => {\r\n  switch (action.type) {\r\n    case 'ADD_TOAST':\r\n      return {\r\n        ...state,\r\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\r\n      };\r\n\r\n    case 'UPDATE_TOAST':\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.map((t) => (t.id === action.toast.id ? { ...t, ...action.toast } : t)),\r\n      };\r\n\r\n    case 'DISMISS_TOAST': {\r\n      const { toastId } = action;\r\n\r\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\r\n      // but I'll keep it here for simplicity\r\n      if (toastId) {\r\n        addToRemoveQueue(toastId);\r\n      } else {\r\n        state.toasts.forEach((toast) => {\r\n          addToRemoveQueue(toast.id);\r\n        });\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.map((t) =>\r\n          t.id === toastId || toastId === undefined\r\n            ? {\r\n                ...t,\r\n                open: false,\r\n              }\r\n            : t,\r\n        ),\r\n      };\r\n    }\r\n    case 'REMOVE_TOAST':\r\n      if (action.toastId === undefined) {\r\n        return {\r\n          ...state,\r\n          toasts: [],\r\n        };\r\n      }\r\n      return {\r\n        ...state,\r\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst listeners: Array<(state: State) => void> = [];\r\n\r\nlet memoryState: State = { toasts: [] };\r\n\r\n/**\r\n * Updates the memory state with the given action and notifies all registered listeners.\r\n */\r\nfunction dispatch(action: Action) {\r\n  memoryState = reducer(memoryState, action);\r\n  listeners.forEach((listener) => {\r\n    listener(memoryState);\r\n  });\r\n}\r\n\r\ntype Toast = Omit<ToasterToast, 'id'>;\r\n\r\n/**\r\n * Creates and manages a toast notification with specified properties, providing methods to update and dismiss it.\r\n */\r\nfunction toast({ ...props }: Toast) {\r\n  const id = genId();\r\n\r\n  /**\r\n   * Dispatches an action to update a toast with new properties and an ID.\r\n   */\r\n  const update = (props: ToasterToast) =>\r\n    dispatch({\r\n      type: 'UPDATE_TOAST',\r\n      toast: { ...props, id },\r\n    });\r\n  /**\r\n   * Dispatches an action to dismiss a toast notification by ID.\r\n   */\r\n  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id });\r\n\r\n  dispatch({\r\n    type: 'ADD_TOAST',\r\n    toast: {\r\n      ...props,\r\n      id,\r\n      open: true,\r\n      onOpenChange: (open: boolean) => {\r\n        if (!open) dismiss();\r\n      },\r\n    },\r\n  });\r\n\r\n  return {\r\n    id,\r\n    dismiss,\r\n    update,\r\n  };\r\n}\r\n\r\n/**\r\n * Manages and returns toast state, including adding listeners and dismissing toasts.\r\n */\r\nfunction useToast() {\r\n  const [state, setState] = React.useState<State>(memoryState);\r\n\r\n  React.useEffect(() => {\r\n    listeners.push(setState);\r\n    return () => {\r\n      const index = listeners.indexOf(setState);\r\n      if (index > -1) {\r\n        listeners.splice(index, 1);\r\n      }\r\n    };\r\n  }, [state]);\r\n\r\n  return {\r\n    ...state,\r\n    toast,\r\n    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),\r\n  };\r\n}\r\n\r\nexport { useToast, toast };\r\n"]}