{"version":3,"file":"client.js","sourceRoot":"","sources":["client.ts"],"names":[],"mappings":"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","sourcesContent":["import { AppType } from '@/server';\r\nimport { hc } from 'hono/client';\r\nimport { HTTPException } from 'hono/http-exception';\r\nimport { ContentfulStatusCode } from 'hono/utils/http-status';\r\nimport { parse, stringify } from 'superjson';\r\n\r\n/**\r\n * Determines the base URL based on the environment and deployment context.\r\n *\r\n * This function first checks if it is running in a browser environment by verifying\r\n * the presence of the `window` object. If true, it returns an empty string for\r\n * relative paths. Otherwise, it determines the base URL based on the Node.js\r\n * environment:\r\n * - In development mode, it uses 'http://localhost:3000/'.\r\n * - In production, it checks for the VERCEL_URL environment variable and constructs\r\n *   the URL accordingly. If VERCEL_URL is not set, it defaults to a placeholder\r\n *   deployed worker URL.\r\n */\r\nconst getBaseUrl = () => {\r\n  // browser should use relative path\r\n  if (typeof window !== 'undefined') {\r\n    return '';\r\n  }\r\n\r\n  return process.env.NODE_ENV === 'development'\r\n    ? 'http://localhost:3000/'\r\n    : process.env.VERCEL_URL\r\n      ? `https://${process.env.VERCEL_URL}`\r\n      : 'https://<YOUR_DEPLOYED_WORKER_URL>/';\r\n};\r\n\r\nexport const baseClient = hc<AppType>(getBaseUrl(), {\r\n  fetch: async (input: RequestInfo | URL, init?: RequestInit) => {\r\n    const response = await fetch(input, { ...init, cache: 'no-store' });\r\n\r\n    if (!response.ok) {\r\n      throw new HTTPException(response.status as ContentfulStatusCode, {\r\n        message: response.statusText,\r\n        res: response,\r\n      });\r\n    }\r\n\r\n    const contentType = response.headers.get('Content-Type');\r\n\r\n    response.json = async () => {\r\n      const text = await response.text();\r\n\r\n      if (contentType === 'application/superjson') {\r\n        return parse(text);\r\n      }\r\n\r\n      try {\r\n        return JSON.parse(text);\r\n      } catch (error) {\r\n        console.error('Failed to parse response as JSON:', error);\r\n        throw new Error('Invalid JSON response');\r\n      }\r\n    };\r\n\r\n    return response;\r\n  },\r\n})['api'];\r\n\r\n/**\r\n * Retrieves a nested function from an object using a series of keys.\r\n *\r\n * Iterates through each key, checking for the existence of the property on the current object and ensuring it does not lead to prototype pollution.\r\n * Throws errors if any validation fails at any step.\r\n *\r\n * @param obj - The initial object from which to start retrieving nested properties.\r\n * @param keys - A rest parameter representing the series of keys to navigate through the object.\r\n * @returns The function located at the specified path within the object.\r\n * @throws Error If the initial object is invalid, a key does not exist, or the final value is not a function.\r\n */\r\nfunction getHandler(obj: object, ...keys: string[]) {\r\n  let current = obj;\r\n\r\n  // Check if the object is safe to work with\r\n  if (obj === null || typeof obj !== 'object' || Array.isArray(obj)) {\r\n    throw new Error('Invalid object provided to getHandler');\r\n  }\r\n\r\n  for (const key of keys) {\r\n    // Prevent prototype pollution by checking if the key exists on the object itself\r\n    // and not on its prototype chain\r\n    if (!Object.prototype.hasOwnProperty.call(current, key)) {\r\n      throw new Error(`Property '${key}' does not exist on the target object`);\r\n    }\r\n\r\n    const value = current[key as keyof typeof current];\r\n\r\n    // Ensure we don't allow access to prototype methods\r\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\r\n      throw new Error(`Access to '${key}' is not allowed`);\r\n    }\r\n\r\n    current = value;\r\n\r\n    // If we hit a non-object before processing all keys, it's an invalid path\r\n    if (current === null || typeof current !== 'object') {\r\n      throw new Error('Invalid path: not an object');\r\n    }\r\n  }\r\n\r\n  if (typeof current !== 'function') {\r\n    throw new Error('The specified path does not point to a function');\r\n  }\r\n\r\n  return current as (...args: unknown[]) => unknown;\r\n}\r\n\r\n/**\r\n * Serializes an object using SuperJSON for its values.\r\n */\r\nfunction serializeWithSuperJSON<T>(data: T): T {\r\n  if (typeof data !== 'object' || data === null) {\r\n    return data;\r\n  }\r\n  if (data === null || typeof data !== 'object') {\r\n    return data;\r\n  }\r\n  return Object.fromEntries(\r\n    Object.entries(data).map(([key, value]) => [key, stringify(value)]),\r\n  ) as T;\r\n}\r\n\r\n/**\r\n * Creates a proxy to facilitate API requests with convenience methods.\r\n *\r\n * This function wraps an object and provides `$get` and `$post` methods\r\n * for making API calls. It uses recursion to handle nested objects,\r\n * constructing the request path dynamically based on property access.\r\n *\r\n * @param target - The target object to be proxied.\r\n * @param path - An optional array representing the current path in the object hierarchy.\r\n */\r\nfunction createProxy<T extends object>(target: T, path: string[] = []): T {\r\n  return new Proxy(target, {\r\n    get(target: T, prop: string | symbol, receiver: unknown) {\r\n      if (typeof prop === 'string') {\r\n        const newPath = [...path, prop];\r\n\r\n        if (prop === '$get') {\r\n          return async (args: unknown) => {\r\n            const executor = getHandler(baseClient, ...newPath);\r\n            const serializedQuery = serializeWithSuperJSON(args);\r\n            return executor({ query: serializedQuery });\r\n          };\r\n        }\r\n\r\n        if (prop === '$post') {\r\n          return async (args: unknown) => {\r\n            const executor = getHandler(baseClient, ...newPath);\r\n            const serializedJson = serializeWithSuperJSON(args);\r\n            return executor({ json: serializedJson });\r\n          };\r\n        }\r\n\r\n        // Safe property access with type assertion\r\n        const value = (target as Record<string, unknown>)[prop];\r\n        if (value && typeof value === 'object') {\r\n          return createProxy(value as object, newPath);\r\n        }\r\n        return value;\r\n      }\r\n      return Reflect.get(target, prop, receiver);\r\n    },\r\n  }) as T;\r\n}\r\n\r\nexport const client: typeof baseClient = createProxy(baseClient);\r\n"]}