{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAGH,OAAO,EAAE,cAAc,EAAE,MAAM,SAAS,CAAC;AAEzC;;GAEG;AACH,MAAM,CAAC,IAAM,sBAAsB,GAAsB,UAAO,CAAC,EAAE,IAAI;;;;;gBAC/D,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;gBACzB,WAAW,GAA4B,EAAE,CAAC;gBAEhD,WAAmD,EAAxB,KAAA,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAxB,cAAwB,EAAxB,IAAwB,EAAE,CAAC;oBAA3C,WAAY,EAAX,GAAG,QAAA,EAAE,KAAK,QAAA;oBACpB,WAAW,CAAC,GAAG,CAAC,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;gBAC3C,CAAC;gBAED,CAAC,CAAC,GAAG,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;gBAClC,qBAAM,IAAI,EAAE,EAAA;;gBAAZ,SAAY,CAAC;;;;KACd,CAAC;AAEF;;;;;GAKG;AACH,MAAM,CAAC,IAAM,qBAAqB,GAAsB,UAAO,CAAC,EAAE,IAAI;;;;oBACpD,qBAAM,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,EAAA;;gBAA5B,OAAO,GAAG,SAAkB;gBAC5B,UAAU,GAA4B,EAAE,CAAC;gBAE/C,WAAkD,EAAvB,KAAA,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,EAAvB,cAAuB,EAAvB,IAAuB,EAAE,CAAC;oBAA1C,WAAY,EAAX,GAAG,QAAA,EAAE,KAAK,QAAA;oBACpB,UAAU,CAAC,GAAG,CAAC,GAAG,cAAc,CAAC,KAAgB,CAAC,CAAC;gBACrD,CAAC;gBAED,CAAC,CAAC,GAAG,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;gBAChC,qBAAM,IAAI,EAAE,EAAA;;gBAAZ,SAAY,CAAC;;;;KACd,CAAC","sourcesContent":["/**\r\n * Internal middlewares\r\n * Do not modify unless you know what you're doing\r\n */\r\n\r\nimport { MiddlewareHandler } from 'hono';\r\nimport { parseSuperJSON } from './utils';\r\n\r\n/**\r\n * Parses query parameters of a GET request and attaches them to the context.\r\n */\r\nexport const queryParsingMiddleware: MiddlewareHandler = async (c, next) => {\r\n  const rawQuery = c.req.query();\r\n  const parsedQuery: Record<string, unknown> = {};\r\n\r\n  for (const [key, value] of Object.entries(rawQuery)) {\r\n    parsedQuery[key] = parseSuperJSON(value);\r\n  }\r\n\r\n  c.set('parsedQuery', parsedQuery);\r\n  await next();\r\n};\r\n\r\n/**\r\n * Middleware to parse POST requests using SuperJSON and store the result in the context.\r\n *\r\n * This function reads the raw JSON body from the request, parses each value using `parseSuperJSON`,\r\n * and stores the parsed body in the context under the key 'parsedBody'. It then proceeds to the next middleware or handler.\r\n */\r\nexport const bodyParsingMiddleware: MiddlewareHandler = async (c, next) => {\r\n  const rawBody = await c.req.json();\r\n  const parsedBody: Record<string, unknown> = {};\r\n\r\n  for (const [key, value] of Object.entries(rawBody)) {\r\n    parsedBody[key] = parseSuperJSON(value as unknown);\r\n  }\r\n\r\n  c.set('parsedBody', parsedBody);\r\n  await next();\r\n};\r\n"]}