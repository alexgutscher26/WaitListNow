{"version":3,"file":"stripe.js","sourceRoot":"","sources":["stripe.ts"],"names":[],"mappings":";;AAAA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAE5B,MAAM,CAAC,IAAM,MAAM,GAAG,IAAI,MAAM,CAAC,MAAA,OAAO,CAAC,GAAG,CAAC,iBAAiB,mCAAI,EAAE,EAAE;IACpE,UAAU,EAAE,kBAAkB;IAC9B,UAAU,EAAE,IAAI;CACjB,CAAC,CAAC;AAEH;;GAEG;AACH,oCAAoC;AACpC,MAAM,CAAC,IAAM,cAAc,GAA2B;IACpD,GAAG,EAAE,uBAAuB;IAC5B,OAAO,EAAE,2BAA2B;IACpC,MAAM,EAAE,0BAA0B;IAClC,2BAA2B;CAC5B,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,IAAM,qBAAqB,GAAG,iEAAO,EAQ3C;;QAPC,SAAS,eAAA,EACT,MAAM,YAAA,EACN,IAAI,UAAA;;;;gBAME,OAAO,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC;gBACrC,IAAI,CAAC,OAAO,EAAE,CAAC;oBACb,MAAM,IAAI,KAAK,CAAC,wBAAiB,IAAI,CAAE,CAAC,CAAC;gBAC3C,CAAC;gBACe,qBAAM,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC;wBACpD,UAAU,EAAE;4BACV;gCACE,KAAK,EAAE,OAAO;gCACd,QAAQ,EAAE,CAAC;6BACZ;yBACF;wBACD,IAAI,EAAE,SAAS;wBACf,WAAW,EAAE,UAAG,OAAO,CAAC,GAAG,CAAC,mBAAmB,4BAAyB;wBACxE,UAAU,EAAE,UAAG,OAAO,CAAC,GAAG,CAAC,mBAAmB,aAAU;wBACxD,cAAc,EAAE,SAAS;wBACzB,QAAQ,EAAE;4BACR,MAAM,QAAA;4BACN,IAAI,MAAA;yBACL;qBACF,CAAC,EAAA;;gBAfI,OAAO,GAAG,SAed;gBAEF,sBAAO,OAAO,EAAC;;;KAChB,CAAC","sourcesContent":["import Stripe from 'stripe';\r\n\r\nexport const stripe = new Stripe(process.env.STRIPE_SECRET_KEY ?? '', {\r\n  apiVersion: '2025-05-28.basil',\r\n  typescript: true,\r\n});\r\n\r\n/**\r\n * Mapping of plan names to Stripe price IDs \r\n */\r\n// TODO: add price ids for each plan\r\nexport const PLAN_PRICE_IDS: Record<string, string> = {\r\n  PRO: 'price_PRO_PLACEHOLDER',\r\n  STARTER: 'price_STARTER_PLACEHOLDER',\r\n  GROWTH: 'price_GROWTH_PLACEHOLDER',\r\n  // Add more plans as needed\r\n};\r\n\r\n/**\r\n * Creates a Stripe checkout session for payment with specified user details and plan.\r\n */\r\nexport const createCheckoutSession = async ({\r\n  userEmail,\r\n  userId,\r\n  plan,\r\n}: {\r\n  userEmail: string;\r\n  userId: string;\r\n  plan: keyof typeof PLAN_PRICE_IDS;\r\n}) => {\r\n  const priceId = PLAN_PRICE_IDS[plan];\r\n  if (!priceId) {\r\n    throw new Error(`Invalid plan: ${plan}`);\r\n  }\r\n  const session = await stripe.checkout.sessions.create({\r\n    line_items: [\r\n      {\r\n        price: priceId,\r\n        quantity: 1,\r\n      },\r\n    ],\r\n    mode: 'payment',\r\n    success_url: `${process.env.NEXT_PUBLIC_APP_URL}/dashboard?success=true`,\r\n    cancel_url: `${process.env.NEXT_PUBLIC_APP_URL}/pricing`,\r\n    customer_email: userEmail,\r\n    metadata: {\r\n      userId,\r\n      plan,\r\n    },\r\n  });\r\n\r\n  return session;\r\n};\r\n"]}