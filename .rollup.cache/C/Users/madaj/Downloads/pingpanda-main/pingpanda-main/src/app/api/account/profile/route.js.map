{"version":3,"file":"route.js","sourceRoot":"","sources":["route.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { auth } from '@clerk/nextjs/server';\r\nimport { db } from '@/lib/db';\r\n\r\n// GET handler to fetch user profile\r\n/**\r\n * Handles a GET request to fetch user profile information.\r\n *\r\n * The function first authenticates the user and retrieves their userId. If the userId is missing, it returns an unauthorized error response.\r\n * It then queries the database for the user details based on the externalId (userId). If the user is not found, it returns a not found error response.\r\n * On success, it returns the user profile information as JSON.\r\n *\r\n * @returns A NextResponse object containing either the user profile data or an error message with the corresponding HTTP status code.\r\n */\r\nexport async function GET() {\r\n  try {\r\n    const authUser = await auth();\r\n    const userId = authUser.userId;\r\n\r\n    if (!userId) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    const user = await db.user.findUnique({\r\n      where: { externalId: userId },\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        email: true,\r\n        company: true,\r\n        website: true,\r\n        bio: true,\r\n        timezone: true,\r\n      },\r\n    });\r\n\r\n    if (!user) {\r\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\r\n    }\r\n\r\n    return NextResponse.json(user);\r\n  } catch (error) {\r\n    console.error('Error fetching profile:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// PUT handler to update user profile\r\n/**\r\n * Updates a user's profile information based on the provided request data.\r\n *\r\n * The function first authenticates the user and retrieves their userId. If the userId is missing,\r\n * it returns an unauthorized response. It then parses the JSON data from the request, validates\r\n * that the 'name' field is present and not just whitespace, and updates the user's profile in the database.\r\n * Finally, it returns the updated user information or an error response if any step fails.\r\n *\r\n * @param request - The HTTP request object containing user update data.\r\n * @returns A JSON response with the updated user information or an error message.\r\n */\r\nexport async function PUT(request: Request) {\r\n  try {\r\n    const authUser = await auth();\r\n    const userId = authUser.userId;\r\n\r\n    if (!userId) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    const data = await request.json();\r\n\r\n    // Validate required fields\r\n    if (!data.name?.trim()) {\r\n      return NextResponse.json({ error: 'Name is required' }, { status: 400 });\r\n    }\r\n\r\n    const updatedUser = await db.user.update({\r\n      where: { externalId: userId },\r\n      data: {\r\n        name: data.name,\r\n        company: data.company || null,\r\n        website: data.website || null,\r\n        bio: data.bio || null,\r\n        timezone: data.timezone || 'UTC',\r\n      },\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        email: true,\r\n        company: true,\r\n        website: true,\r\n        bio: true,\r\n        timezone: true,\r\n      },\r\n    });\r\n\r\n    return NextResponse.json(updatedUser);\r\n  } catch (error) {\r\n    console.error('Error updating profile:', error);\r\n    return NextResponse.json({ error: 'Failed to update profile' }, { status: 500 });\r\n  }\r\n}\r\n"]}