{"version":3,"file":"waitlist.js","sourceRoot":"","sources":["waitlist.ts"],"names":[],"mappings":"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","sourcesContent":["'use server';\r\n\r\nimport { auth } from '@clerk/nextjs/server';\r\nimport { db } from '@/lib/db';\r\n\r\n// Type for the auth response\r\ntype AuthResponse = {\r\n  userId: string | null;\r\n};\r\n\r\n/**\r\n * Fetches comprehensive statistics related to user waitlists.\r\n *\r\n * This function retrieves detailed data including total subscribers, new subscribers from the past week,\r\n * growth rate, active and completed waitlists, recent activities, and individual waitlist details.\r\n * It involves multiple database queries to gather all necessary information and performs calculations\r\n * for derived metrics like growth rate and recent activities. The function handles user authentication\r\n * and ensures that only authorized users can access their waitlist statistics.\r\n *\r\n * @returns An object containing various statistics and details about the user's waitlists.\r\n * @throws Error if the user is not authenticated or if there is an issue fetching data from the database.\r\n */\r\nexport async function getWaitlistStats() {\r\n  try {\r\n    const authResponse = (await auth()) as AuthResponse;\r\n    const clerkUserId = authResponse.userId;\r\n\r\n    if (!clerkUserId) {\r\n      throw new Error('Unauthorized: You must be signed in to view waitlist stats');\r\n    }\r\n\r\n    // Find the internal user ID that matches the Clerk user ID\r\n    const user = await db.user.findUnique({\r\n      where: { externalId: clerkUserId },\r\n      select: { id: true },\r\n    });\r\n\r\n    if (!user) {\r\n      return {\r\n        totalSubscribers: 0,\r\n        newThisWeek: 0,\r\n        growthRate: 0,\r\n        activeWaitlists: 0,\r\n        completedWaitlists: 0,\r\n        recentActivities: [],\r\n        waitlists: [],\r\n      };\r\n    }\r\n\r\n    const userId = user.id;\r\n\r\n    // Get waitlists for the current user with subscriber counts\r\n    const userWaitlists = await db.waitlist.findMany({\r\n      where: { userId },\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        subscribers: {\r\n          select: {\r\n            id: true,\r\n            email: true,\r\n            name: true,\r\n            createdAt: true,\r\n            referralCode: true,\r\n            referredBy: true,\r\n          },\r\n          orderBy: { createdAt: 'desc' },\r\n          take: 100,\r\n        },\r\n        _count: {\r\n          select: { subscribers: true },\r\n        },\r\n        createdAt: true,\r\n      },\r\n      orderBy: { createdAt: 'desc' },\r\n    });\r\n\r\n    // If no waitlists found, return early with empty results\r\n    if (userWaitlists.length === 0) {\r\n      return {\r\n        totalSubscribers: 0,\r\n        newThisWeek: 0,\r\n        growthRate: 0,\r\n        activeWaitlists: 0,\r\n        completedWaitlists: 0,\r\n        recentActivities: [],\r\n        waitlists: [],\r\n      };\r\n    }\r\n\r\n    // Get subscriber count for all waitlists\r\n    const subscriberStats = await db.waitlist.aggregate({\r\n      where: { userId },\r\n      _sum: { subscriberCount: true },\r\n      _count: { id: true },\r\n    });\r\n\r\n    // Get waitlists with subscriber counts and recent subscribers\r\n    const waitlists = await db.waitlist.findMany({\r\n      where: { userId },\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        status: true,\r\n        slug: true,\r\n        createdAt: true,\r\n        subscribers: {\r\n          select: {\r\n            id: true,\r\n            email: true,\r\n            name: true,\r\n            createdAt: true,\r\n            referralCode: true,\r\n            referredBy: true,\r\n            status: true,\r\n          },\r\n          orderBy: { createdAt: 'desc' },\r\n          take: 10, // Limit to most recent 10 subscribers per waitlist\r\n        },\r\n      },\r\n      orderBy: { createdAt: 'desc' },\r\n    });\r\n\r\n    // Get recent waitlist creation activity\r\n    const recentWaitlists = await db.waitlist.findMany({\r\n      where: { userId },\r\n      orderBy: { createdAt: 'desc' },\r\n      take: 5, // Get 5 most recent waitlists\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        slug: true,\r\n        createdAt: true,\r\n      },\r\n    });\r\n\r\n    // Calculate stats\r\n    const totalSubscribers = waitlists.reduce((sum, wl) => sum + wl.subscribers.length, 0);\r\n\r\n    const newThisWeek = waitlists.reduce((sum, wl) => {\r\n      const oneWeekAgo = new Date();\r\n      oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\r\n      return sum + wl.subscribers.filter((sub) => new Date(sub.createdAt) > oneWeekAgo).length;\r\n    }, 0);\r\n\r\n    // Calculate growth rate based on subscriber growth over the past 4 weeks\r\n    const now = new Date();\r\n    const fourWeeksAgo = new Date(now);\r\n    fourWeeksAgo.setDate(fourWeeksAgo.getDate() - 28); // 4 weeks ago\r\n\r\n    // Get all subscribers from the past 4 weeks grouped by week\r\n    const weeklySubscribers = Array(4).fill(0);\r\n\r\n    waitlists.forEach((wl) => {\r\n      wl.subscribers.forEach((sub) => {\r\n        const subDate = new Date(sub.createdAt);\r\n        if (subDate > fourWeeksAgo) {\r\n          // Calculate which week (0-3) this subscriber belongs to\r\n          const weekNum = Math.min(\r\n            3,\r\n            Math.floor((now.getTime() - subDate.getTime()) / (7 * 24 * 60 * 60 * 1000)),\r\n          );\r\n          weeklySubscribers[3 - weekNum]++; // Reverse order (most recent week last)\r\n        }\r\n      });\r\n    });\r\n\r\n    // Calculate week-over-week growth rate\r\n    let growthRate = 0;\r\n    let validWeeks = 0;\r\n\r\n    for (let i = 1; i < weeklySubscribers.length; i++) {\r\n      const currentWeek = weeklySubscribers[i];\r\n      const previousWeek = weeklySubscribers[i - 1];\r\n\r\n      if (previousWeek > 0) {\r\n        const weeklyGrowth = ((currentWeek - previousWeek) / previousWeek) * 100;\r\n        growthRate += weeklyGrowth;\r\n        validWeeks++;\r\n      }\r\n    }\r\n\r\n    // Calculate average growth rate if we have valid data, otherwise default to 0\r\n    growthRate = validWeeks > 0 ? growthRate / validWeeks : 0;\r\n\r\n    // Generate recent activity\r\n    const recentActivity = [];\r\n    const currentTime = new Date();\r\n\r\n    // Add waitlist creation activities\r\n    for (const wl of recentWaitlists) {\r\n      recentActivity.push({\r\n        id: `wl-${wl.id}`,\r\n        type: 'waitlist_created' as const,\r\n        name: wl.name,\r\n        time: wl.createdAt,\r\n        subscribers: 0, // Will be updated in the next step\r\n      });\r\n    }\r\n\r\n    // Add subscriber activities\r\n    let subscriberCount = 0;\r\n    for (const wl of waitlists) {\r\n      // Update waitlist creation activity with subscriber count\r\n      const wlActivity = recentActivity.find((a) => a.id === `wl-${wl.id}`);\r\n      if (wlActivity) {\r\n        wlActivity.subscribers = wl.subscribers.length;\r\n      }\r\n\r\n      // Add subscriber activities\r\n      for (const sub of wl.subscribers) {\r\n        subscriberCount++;\r\n        if (subscriberCount > 10) break; // Limit total activities to prevent too many\r\n\r\n        recentActivity.push({\r\n          id: `sub-${sub.id}`,\r\n          type: 'new_subscriber' as const,\r\n          name: sub.name || sub.email.split('@')[0],\r\n          email: sub.email,\r\n          avatar: `https://api.dicebear.com/7.x/initials/svg?seed=${sub.email}`,\r\n          waitlist: wl.name,\r\n          time: sub.createdAt,\r\n        });\r\n\r\n        // Add referral activity if applicable\r\n        if (sub.referralCode || sub.referredBy) {\r\n          recentActivity.push({\r\n            id: `ref-${sub.id}`,\r\n            type: 'referral' as const,\r\n            name: sub.name || sub.email.split('@')[0],\r\n            referrer: sub.referredBy || 'someone',\r\n            referred: sub.email,\r\n            reward: 'Early access',\r\n            time: new Date(sub.createdAt.getTime() + 1000), // Add 1 second to ensure proper ordering\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    // Add milestone activity (every 100 subscribers)\r\n    const milestone = Math.floor(totalSubscribers / 100) * 100;\r\n    if (milestone > 0 && totalSubscribers % 100 < 10) {\r\n      // Only show milestone when close to the next 100\r\n      recentActivity.push({\r\n        id: `mile-${milestone}`,\r\n        type: 'milestone' as const,\r\n        name: 'Milestone Reached',\r\n        message: `🎉 You've reached ${milestone} total subscribers!`,\r\n        time: new Date(currentTime.getTime() - 1000), // 1 second ago\r\n      });\r\n    }\r\n\r\n    // Sort activities by time (newest first) and limit to 10\r\n    const sortedActivities = recentActivity\r\n      .sort((a, b) => b.time.getTime() - a.time.getTime())\r\n      .slice(0, 10);\r\n\r\n    return {\r\n      totalSubscribers,\r\n      newThisWeek,\r\n      growthRate,\r\n      activeWaitlists: waitlists.filter((wl) => wl.status === 'ACTIVE').length,\r\n      completedWaitlists: waitlists.filter((wl) => wl.status === 'ARCHIVED').length,\r\n      recentActivities: sortedActivities,\r\n      waitlists: waitlists.map((wl) => ({\r\n        id: wl.id,\r\n        name: wl.name,\r\n        subscribers: wl.subscribers.length,\r\n        createdAt: wl.createdAt,\r\n      })),\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching waitlist stats:', error);\r\n    throw new Error('Failed to fetch waitlist stats');\r\n  }\r\n}\r\n"]}