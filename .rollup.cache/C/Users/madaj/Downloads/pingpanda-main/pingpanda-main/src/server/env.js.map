{"version":3,"file":"env.js","sourceRoot":"","sources":["env.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB;;GAEG;AACH,IAAM,SAAS,GAAG,CAAC,CAAC,MAAM,CAAC;IACzB,WAAW;IACX,YAAY,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,sBAAsB,CAAC;IAEpD,iBAAiB;IACjB,gBAAgB,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,8BAA8B,CAAC;IACnE,qBAAqB,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,mCAAmC,CAAC;IAC7E,oBAAoB,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,kCAAkC,CAAC;IAC3E,eAAe,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,6BAA6B,CAAC;IACjE,YAAY,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,sBAAsB,CAAC;IAEpD,SAAS;IACT,iBAAiB,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,+BAA+B,CAAC;IACrE,qBAAqB,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,mCAAmC,CAAC;IAE7E,cAAc;IACd,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,aAAa,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC;IAC9E,UAAU,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IACjC,mBAAmB,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,yBAAyB,CAAC;IAE9D,sBAAsB;IACtB,4BAA4B,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAEnD,kBAAkB;IAClB,YAAY,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC,QAAQ,EAAE;IAE7D,KAAK;IACL,cAAc,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,4BAA4B,CAAC;IAC/D,cAAc,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,4BAA4B,CAAC;IAE/D,QAAQ;IACR,cAAc,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,4BAA4B,CAAC;CAChE,CAAC,CAAC;AAOH;;;;;;GAMG;AACH,MAAM,UAAU,MAAM;IACpB,IAAI,CAAC;QACH,OAAO,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IACtC,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,IAAI,KAAK,YAAY,CAAC,CAAC,QAAQ,EAAE,CAAC;YAChC,IAAM,WAAW,GAAG,KAAK,CAAC,MAAM;iBAC7B,GAAG,CAAC,UAAC,CAAC;gBACL,IAAM,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAC7B,OAAO,UAAG,GAAG,eAAK,CAAC,CAAC,OAAO,CAAE,CAAC;YAChC,CAAC,CAAC;iBACD,IAAI,CAAC,QAAQ,CAAC,CAAC;YAElB,MAAM,IAAI,KAAK,CAAC,yDAAkD,WAAW,CAAE,CAAC,CAAC;QACnF,CAAC;QAED,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;IAC3D,CAAC;AACH,CAAC","sourcesContent":["import { z } from 'zod';\r\n\r\n/**\r\n * Schema for environment variables validation\r\n */\r\nconst envSchema = z.object({\r\n  // Database\r\n  DATABASE_URL: z.string().url('Invalid database URL'),\r\n\r\n  // Authentication\r\n  CLERK_SECRET_KEY: z.string().min(1, 'CLERK_SECRET_KEY is required'),\r\n  CLERK_PUBLISHABLE_KEY: z.string().min(1, 'CLERK_PUBLISHABLE_KEY is required'),\r\n  CLERK_WEBHOOK_SECRET: z.string().min(1, 'CLERK_WEBHOOK_SECRET is required'),\r\n  NEXTAUTH_SECRET: z.string().min(1, 'NEXTAUTH_SECRET is required'),\r\n  NEXTAUTH_URL: z.string().url('Invalid NEXTAUTH_URL'),\r\n\r\n  // Stripe\r\n  STRIPE_SECRET_KEY: z.string().min(1, 'STRIPE_SECRET_KEY is required'),\r\n  STRIPE_WEBHOOK_SECRET: z.string().min(1, 'STRIPE_WEBHOOK_SECRET is required'),\r\n\r\n  // Application\r\n  NODE_ENV: z.enum(['development', 'production', 'test']).default('development'),\r\n  VERCEL_URL: z.string().optional(),\r\n  NEXT_PUBLIC_APP_URL: z.string().url('Invalid application URL'),\r\n\r\n  // Plausible Analytics\r\n  NEXT_PUBLIC_PLAUSIBLE_DOMAIN: z.string().optional(),\r\n\r\n  // Next.js Runtime\r\n  NEXT_RUNTIME: z.enum(['nodejs', 'edge', 'client']).optional(),\r\n\r\n  // AI\r\n  OPENAI_API_KEY: z.string().min(1, 'OPENAI_API_KEY is required'),\r\n  CLAUDE_API_KEY: z.string().min(1, 'CLAUDE_API_KEY is required'),\r\n\r\n  // Email\r\n  RESEND_API_KEY: z.string().min(1, 'RESEND_API_KEY is required'),\r\n});\r\n\r\n/**\r\n * Environment variables type\r\n */\r\nexport type Env = z.infer<typeof envSchema>;\r\n\r\n/**\r\n * Validates and returns the environment variables.\r\n *\r\n * This function parses the environment variables using `envSchema`. If any required environment\r\n * variables are missing or invalid, it throws an error with detailed information about the missing or invalid\r\n * variables. For other parsing failures, a generic error is thrown.\r\n */\r\nexport function getEnv(): Env {\r\n  try {\r\n    return envSchema.parse(process.env);\r\n  } catch (error) {\r\n    if (error instanceof z.ZodError) {\r\n      const missingEnvs = error.errors\r\n        .map((e) => {\r\n          const key = e.path.join('.');\r\n          return `${key}: ${e.message}`;\r\n        })\r\n        .join('\\n  - ');\r\n\r\n      throw new Error(`Missing or invalid environment variables:\\n  - ${missingEnvs}`);\r\n    }\r\n\r\n    throw new Error('Failed to parse environment variables');\r\n  }\r\n}\r\n\r\n/**\r\n * @deprecated Use getEnv() instead\r\n */\r\nexport type Bindings = Env;\r\n"]}