{"version":3,"file":"subscriber-growth-chart.jsx","sourceRoot":"","sources":["subscriber-growth-chart.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client';\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport dynamic from 'next/dynamic';\r\nimport { useTheme } from 'next-themes';\r\nimport { format } from 'date-fns';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Skeleton } from '@/components/ui/skeleton';\n\n// Define the type for chart data\ninterface ChartData {\n  formattedDate: string;\n  date: string;\n  count: number;\n  cumulative: number;\n}\n\n// Define props interface for the Chart component\ninterface TooltipProps {\n  active?: boolean;\n  payload?: Array<{\n    value: number;\n    payload: ChartData;\n  }>;\n  label?: string;\n}\n\ninterface ChartProps {\n  data: ChartData[];\n  isDark: boolean;\n  maxValue: number;\n  CustomTooltip: React.ComponentType<TooltipProps>;\n}\n\n// Create a single dynamic import for all Recharts components\nconst RechartsComponents = dynamic<ChartProps>(\n  () =>\n    import('recharts').then((recharts) => {\n      const ChartComponent = ({ data, isDark, maxValue, CustomTooltip }: ChartProps) => {\n        const { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } =\n          recharts;\n\n        return (\n          <ResponsiveContainer\n            width=\"100%\"\n            height=\"100%\"\n          >\n            <AreaChart\n              data={data}\n              margin={{ top: 10, right: 10, left: 0, bottom: 0 }}\n            >\n              <defs>\n                <linearGradient\n                  id=\"colorCount\"\n                  x1=\"0\"\n                  y1=\"0\"\n                  x2=\"0\"\n                  y2=\"1\"\n                >\n                  <stop\n                    offset=\"5%\"\n                    stopColor=\"#8884d8\"\n                    stopOpacity={0.8}\n                  />\n                  <stop\n                    offset=\"95%\"\n                    stopColor=\"#8884d8\"\n                    stopOpacity={0}\n                  />\n                </linearGradient>\n                <linearGradient\n                  id=\"colorCumulative\"\n                  x1=\"0\"\n                  y1=\"0\"\n                  x2=\"0\"\n                  y2=\"1\"\n                >\n                  <stop\n                    offset=\"5%\"\n                    stopColor=\"#82ca9d\"\n                    stopOpacity={0.8}\n                  />\n                  <stop\n                    offset=\"95%\"\n                    stopColor=\"#82ca9d\"\n                    stopOpacity={0}\n                  />\n                </linearGradient>\n              </defs>\n              <XAxis\n                dataKey=\"formattedDate\"\n                stroke={isDark ? '#94a3b8' : '#64748b'}\n                fontSize={12}\n                tickLine={false}\n                axisLine={false}\n                tickMargin={10}\n              />\n              <YAxis\n                stroke={isDark ? '#94a3b8' : '#64748b'}\n                fontSize={12}\n                tickLine={false}\n                axisLine={false}\n                tickFormatter={(value: any) => Number(value).toLocaleString()}\n                domain={[0, maxValue]}\n                width={40}\n              />\n              <CartesianGrid\n                strokeDasharray=\"3 3\"\n                className=\"stroke-muted\"\n                vertical={false}\n              />\n              <Tooltip\n                content={(props: any) => <CustomTooltip {...props} />}\n                contentStyle={{\n                  backgroundColor: isDark ? '#1e293b' : '#ffffff',\n                  border: 'none',\n                  borderRadius: '0.5rem',\n                  boxShadow:\n                    '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n                }}\n              />\n              <Area\n                type=\"monotone\"\n                dataKey=\"count\"\n                stroke=\"#8884d8\"\n                fillOpacity={1}\n                fill=\"url(#colorCount)\"\n                strokeWidth={2}\n                activeDot={{ r: 6, stroke: '#8884d8', strokeWidth: 2, fill: '#ffffff' }}\n              />\n              <Area\n                type=\"monotone\"\n                dataKey=\"cumulative\"\n                stroke=\"#82ca9d\"\n                fillOpacity={1}\n                fill=\"url(#colorCumulative)\"\n                strokeWidth={2}\n                activeDot={{ r: 6, stroke: '#82ca9d', strokeWidth: 2, fill: '#ffffff' }}\n              />\n            </AreaChart>\n          </ResponsiveContainer>\n        );\n      };\n\n      return ChartComponent;\n    }),\n  {\n    ssr: false,\n    loading: () => <Skeleton className=\"h-[300px] w-full\" />,\n  },\n);\n\ninterface ChartDataPoint {\n  date: string;\n  count: number;\n  cumulative: number;\n  formattedDate?: string;\n}\n\ninterface SubscriberGrowthChartProps {\n  waitlistId: string;\n  className?: string;\n  days?: number;\n}\n\nconst CustomTooltip = ({ active, payload, label }: TooltipProps) => {\n  if (!active || !payload?.length) return null;\n\n  // Find the original data point to get the correct date\n  const originalDate = payload[0]?.payload?.date;\n  let formattedDate = label;\n\n  if (originalDate) {\n    try {\n      // Parse the date correctly\n      const date = new Date(originalDate + 'T00:00:00');\n      formattedDate = format(date, 'MMMM d, yyyy');\n    } catch (error) {\n      console.error('Error formatting tooltip date:', error);\n    }\n  }\n\n  return (\n    <div className=\"bg-card p-3 border border-border rounded-md shadow-sm\">\n      <p className=\"font-medium text-sm\">{formattedDate}</p>\n      {payload.map((entry: any, index: number) => (\n        <p\n          key={`tooltip-${index}`}\n          className=\"text-sm\"\n          style={{ color: entry.color }}\n        >\n          {entry.dataKey === 'count' ? 'New Subscribers' : 'Total Subscribers'}:{' '}\n          <span className=\"font-medium\">{entry.value.toLocaleString()}</span>\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport function SubscriberGrowthChart({\n  waitlistId,\n  className,\n  days = 30,\n}: SubscriberGrowthChartProps) {\n  const { theme } = useTheme();\n  const [isMounted, setIsMounted] = useState(false);\n  const [chartData, setChartData] = useState<ChartData[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedPeriod, setSelectedPeriod] = useState<'7d' | '30d' | '90d' | 'all'>('7d');\n  const isDark = theme === 'dark';\n\n  useEffect(() => {\n    setIsMounted(true);\n  }, []);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n\n        const response = await fetch(\n          `/api/waitlists/${waitlistId}/subscribers/growth?days=${days}`,\n        );\n\n        if (!response.ok) {\n          throw new Error('Failed to load growth data');\n        }\n\n        const result = await response.json();\n        setChartData(Array.isArray(result) ? result : []);\n      } catch (err) {\n        console.error('Error fetching growth data:', err);\n        setError('Failed to load growth data');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    if (waitlistId && isMounted) {\n      fetchData();\n    } else if (!waitlistId) {\n      setIsLoading(false);\n    }\n  }, [waitlistId, days, isMounted]);\n\n  if (!isMounted || isLoading) {\n    return (\n      <Card className={className}>\n        <CardHeader>\n          <CardTitle>Subscriber Growth</CardTitle>\n        </CardHeader>\n        <CardContent className=\"h-[300px]\">\n          <Skeleton className=\"h-full w-full\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card className={className}>\n        <CardHeader>\n          <CardTitle>Subscriber Growth</CardTitle>\n        </CardHeader>\n        <CardContent className=\"h-[300px] flex items-center justify-center text-destructive\">\n          {error}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Debug log the raw data\n  // console.log('Raw data from API:', data);\n\n  // Format the data for the chart with proper timezone handling\n  const formattedChartData = chartData.map((item) => {\n    try {\n      // Keep the original date string as-is for data integrity\n      const originalDate = item.date;\n\n      // Parse the date by adding time component to avoid timezone issues\n      const date = new Date(originalDate + 'T00:00:00');\n\n      // Verify the date is valid\n      if (isNaN(date.getTime())) {\n        console.error('Invalid date:', originalDate);\n        return {\n          ...item,\n          formattedDate: 'Invalid Date',\n        };\n      }\n\n      // Format the date as 'MMM d' (e.g., 'May 28')\n      const formattedDate = date.toLocaleDateString('en-US', {\n        month: 'short',\n        day: 'numeric',\n      });\n\n      // Return the formatted data, keeping original date\n      return {\n        ...item,\n        date: originalDate, // Keep original date string\n        formattedDate,\n      };\n    } catch (error) {\n      console.error('Error formatting date:', error, 'for item:', item);\n      return {\n        ...item,\n        formattedDate: 'Date Error',\n      };\n    }\n  });\n\n  // console.log('Formatted chart data:', chartData);\n\n  // Calculate the max value for the Y-axis with some padding\n  const maxValue = Math.max(...chartData.map((item) => item.cumulative), 10) * 1.1;\n\n  if (chartData.length === 0) {\n    return (\n      <Card className={className}>\n        <CardHeader>\n          <CardTitle>Subscriber Growth</CardTitle>\n        </CardHeader>\n        <CardContent className=\"h-[300px] flex items-center justify-center text-muted-foreground\">\n          No data available\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={className}>\n      <CardHeader className=\"pb-2\">\n        <CardTitle className=\"text-lg\">Subscriber Growth</CardTitle>\n      </CardHeader>\n      <CardContent className=\"h-[300px] -mt-2\">\n        <RechartsComponents\n          data={formattedChartData}\n          isDark={isDark}\n          maxValue={maxValue}\n          CustomTooltip={CustomTooltip}\n        />\n      </CardContent>\n    </Card>\n  );\n}\n"]}