# PingPanda Project Guidelines
 
You are an expert developer working with this repository. Your focus is on:
 
- **Expertise:** Next.js (App Router), React, TypeScript, Tailwind CSS, Prisma, Stripe, NeonDB, and Clerk
- **Focus:** Code clarity, scalability, maintainability, and security
- **Style:** Consistent, explicit, and production-ready
- **Libraries:** Stripe, Clerk, Prisma, Shadcn UI, Tailwind CSS, and NeonDB
 
---
 
## Application Scope
 
This repository serves multiple purposes:
 
- **Marketing Pages:** Static pages (e.g. license, privacy, terms) found under "src/app/(landing)" for public information.
- **Authentication:** Routes for sign-in, sign-out found under "src/app/(auth)/sign-in" and "src/app/(auth)/sign-out".
- **Dashboard & Workspace:** Protected routes for user dashboards, settings, and workspaces are located under "src/app/dashboard". These include dedicated areas for account, settings, category, and more.
 
---
 
## Project Structure
 
The repository follows the Next.js App Router convention and is organized as follows:
 
pingpanda-main/
├── .next/                     # Next.js build output
├── .env                       # Environment variables
├── .eslintrc.json            # ESLint configuration
├── .prettierrc               # Prettier configuration
├── .gitignore                # Git ignore rules
├── .windsurfrules            # Project rules
├── next.config.mjs           # Next.js configuration
├── postcss.config.mjs        # PostCSS configuration
├── tailwind.config.ts        # Tailwind CSS configuration
├── tsconfig.json             # TypeScript configuration
├── wrangler.toml             # Cloudflare Wrangler configuration
├── package.json              # Project dependencies
├── pnpm-lock.yaml            # Package lock file
├── public/                   # Static assets
├── prisma/                   # Prisma database configuration
└── src/                      # Source code
    ├── app/                  # Next.js App Router pages
    │   ├── (landing)/        # Public marketing pages
    │   ├── (auth)/          # Authentication pages
    │   └── (dashboard)/     # Protected dashboard pages
    ├── components/          # Reusable UI components
    ├── config.ts            # Application configuration
    ├── db.ts                # Database configuration
    ├── hooks/              # Custom React hooks
    ├── lib/                 # Utility functions and configurations
    ├── middleware.ts        # Next.js middleware
    ├── server/              # Server-side logic
    │   ├── actions/         # Server actions
    │   ├── db/             # Database configuration
    │   └── queries/         # Database queries
    └── utils.ts            # Shared utility functions
  "
 
---
 
## Configuration
 
- **Central Config Files:**
- Application-wide settings are defined in "src/config.ts", "next.config.ts", and "src/server/env.ts".
- Environment variables are managed in ".env".
 
- **ESLint & Prettier:**
- Code style and formatting rules are enforced by ESLint and Prettier. Always run linters and formatters before committing changes.
 
---
 
## Database
 
- **ORM & Schema:**
- The project uses **prisma** for database interactions.
- Database configuration and migrations are located under "prisma/".
 
- **Data Consistency & Security:**
- Write robust queries and ensure that all mutations are validated.
 
---
 
## UI Components
 
- **Organization & Reusability:**
- All UI components are placed in the "src/components/" directory.
- Component names follow **shadcn** naming conventions.
- Use Tailwind CSS utility classes for styling, favoring semantic names over raw color codes (e.g., use "bg-card" or "text-muted-foreground").
 
- **Naming & File Conventions:**
- Files: Use kebab-case (e.g., "create-item-form.tsx").
- Functions & Variables: Use camelCase.
- Constants: Use UPPER_SNAKE_CASE.
 
---
 
## Hooks & Utilities
 
- Custom hooks are centralized in the "src/hooks/" directory.
- Utility functions (e.g., formatting, routing helpers) are in "src/lib/".
- Use type inference and explicit typing with TypeScript to ensure reliability and maintainability.
 
---
 
## Server Actions & API Routes
 
- **API Routes:**
- API endpoints are defined under "app/api/".
- Use Next.js Route Handlers and the TRPC framework where applicable.
- For legacy REST routes, use structured error handling and logging.
 
---
 
## Forms & Validation
 
- **Form Libraries:**
- Use React Hook Form for client-side form management.
- Validate forms using Zod schemas.
- **Form Organization:**
- Define reusable Zod schemas in a dedicated folder (e.g., "lib/schemas.ts").
- Keep form components modular and store them in "components/forms/".
 
---
 
## Error Handling & Logging
 
- **Error Management:**
 
- Handle asynchronous errors gracefully in both Client and Server Components.
- Log errors using structured logging practices (e.g., using a centralized logger in "server/utils/").
- **User Feedback:**
 
- Always surface meaningful error messages to users, while not exposing sensitive details.
 
---
 
## Authentication & Onboarding
 
- **Authentication Flow:**
 
- Managed via Clerk (see "app/api/auth/[...all]/route.ts").
- Protected pages under the dashboard use server-side checks to ensure that the user is authenticated.
- The sign-in and sign-out flows are defined in "app/(auth)/sign-in" and "app/(auth)/sign-out".
 
---
 
## Code Quality & Best Practices
 
- **TypeScript Best Practices:**
 
- Avoid the use of "any"; strive for explicit type definitions and inference.
- Prefer types over interfaces unless extending complex objects.
- **Modularity & Reusability:**
- Write self-contained components and functions.
- Keep business logic separate from UI components whenever possible.
- **Version Control:**
- Commit frequently with clear commit messages.
 
- Use feature branches and code reviews to maintain high code quality.
 
---
 
By following these guidelines, developers working on the repository will ensure consistency, maintainability, and high-quality code that adheres to modern best practices. Adjustments and updates to these rules should be discussed in code reviews to ensure they meet evolving project needs.
 
---
 
Code Style and Structure
 
- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.
 
Naming Conventions
 
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.
 
TypeScript Usage
 
- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.
 
Syntax and Formatting
 
- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.
 
UI and Styling
 
- Use Shadcn UI, Radix, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.
 
Performance Optimization
 
- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.
 
Key Conventions
 
- Use 'nuqs' for URL search parameter state management.
- Optimize Web Vitals (LCP, CLS, FID).
- Limit 'use client':
  - Favor server components and Next.js SSR.
  - Use only for Web API access in small components.
  - Avoid for data fetching or state management.
 
Follow Next.js docs for Data Fetching, Rendering, and Routing.
 
### Code Standards
 
- Files
  - Always use kebab-case
- Naming
  - Functions/Vars: camelCase
  - Constants: UPPER_SNAKE_CASE
  - Types/Classes: PascalCase
- TypeScript
  - Prefer types over interfaces
  - Use type inference whenever possible
  - Avoid any, any[], unknown, or any other generic type
  - Use spaces between code blocks to improve readability
 
### Styling
 
- Styling is done using Tailwind CSS. We use the "cn" function from the "@kit/ui/utils" package to generate class names.
- Avoid fixes classes such as "bg-gray-500". Instead, use Shadcn classes such as "bg-background", "text-secondary-foreground", "text-muted-foreground", etc.

### SEO
 
- Use Next.js's built-in SEO features to optimize your application for search engines.
- Use the "next-seo" package to add metadata to your pages.

### Security
 
- Use Next.js's built-in security features to protect your application from attacks.

### Performance
 
- Use Next.js's built-in performance features to optimize your application for performance.
