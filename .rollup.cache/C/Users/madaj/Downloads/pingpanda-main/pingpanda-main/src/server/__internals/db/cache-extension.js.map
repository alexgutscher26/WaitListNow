{"version":3,"file":"cache-extension.js","sourceRoot":"","sources":["cache-extension.ts"],"names":[],"mappings":"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","sourcesContent":["import { Prisma } from '@prisma/client';\r\nimport { Redis } from '@upstash/redis/cloudflare';\r\nimport { deserialize, stringify, SuperJSONResult } from 'superjson';\r\n\r\ntype PrismaModel = {\r\n  findFirst: (args: unknown) => Promise<unknown>;\r\n  findUnique: (args: unknown) => Promise<unknown>;\r\n  findMany: (args: unknown) => Promise<unknown>;\r\n  create: (args: unknown) => Promise<unknown>;\r\n  update: (args: unknown) => Promise<unknown>;\r\n  delete: (args: unknown) => Promise<unknown>;\r\n};\r\n\r\nexport type CacheArgs = { cache?: { id: string; ttl?: number } };\r\n\r\nfunction isSuperJSONResult(obj: unknown): obj is SuperJSONResult {\r\n  return typeof obj === 'object' && obj !== null && 'json' in obj && 'meta' in obj;\r\n}\r\n\r\nexport const cacheExtension = ({ redis }: { redis: Redis }) => {\r\n  return Prisma.defineExtension({\r\n    name: 'prisma-extension-cache',\r\n    model: {\r\n      $allModels: {\r\n        async findFirst<T, A>(\r\n          this: T,\r\n          args: Prisma.Args<T, 'findFirst'> & CacheArgs,\r\n        ): Promise<Prisma.Result<T, A, 'findFirst'>> {\r\n          const { cache: _cache, ...rest } = args;\r\n          const cache = _cache as CacheArgs['cache'];\r\n          const ctx = Prisma.getExtensionContext(this);\r\n\r\n          if (cache) {\r\n            const cachedResult = await redis.get<string>(cache.id);\r\n\r\n            if (cachedResult && isSuperJSONResult(cachedResult)) {\r\n              return deserialize<Prisma.Result<T, A, 'findFirst'>>(cachedResult);\r\n            }\r\n          }\r\n\r\n          const result = await (ctx as unknown as { $parent: { [key: string]: PrismaModel } }).$parent[ctx.$name as string].findFirst(rest) as Prisma.Result<T, A, 'findFirst'>;\r\n\r\n          if (cache && result) {\r\n            const serializedResult = stringify(result);\r\n\r\n            if (cache.ttl) {\r\n              await redis.set(cache.id, serializedResult, { ex: cache.ttl });\r\n            } else {\r\n              await redis.set(cache.id, serializedResult);\r\n            }\r\n          }\r\n\r\n          return result;\r\n        },\r\n        async findUnique<T, A>(\r\n          this: T,\r\n          args: Prisma.Args<T, 'findUnique'> & CacheArgs,\r\n        ): Promise<Prisma.Result<T, A, 'findUnique'>> {\r\n          const { cache: _cache, ...rest } = args;\r\n          const cache = _cache as CacheArgs['cache'];\r\n          const ctx = Prisma.getExtensionContext(this);\r\n\r\n          if (cache) {\r\n            const cachedResult = await redis.get<string>(cache.id);\r\n\r\n            if (cachedResult && isSuperJSONResult(cachedResult)) {\r\n              return deserialize<Prisma.Result<T, A, 'findUnique'>>(cachedResult);\r\n            }\r\n          }\r\n\r\n          const result = await (ctx as unknown as { $parent: { [key: string]: PrismaModel } }).$parent[ctx.$name as string].findUnique(rest) as Prisma.Result<T, A, 'findUnique'>;\r\n\r\n          if (cache && result) {\r\n            const serializedResult = stringify(result);\r\n\r\n            if (cache.ttl) {\r\n              await redis.set(cache.id, serializedResult, { ex: cache.ttl });\r\n            } else {\r\n              await redis.set(cache.id, serializedResult);\r\n            }\r\n          }\r\n\r\n          return result;\r\n        },\r\n        async findMany<T, A>(\r\n          this: T,\r\n          args: Prisma.Args<T, 'findMany'> & CacheArgs,\r\n        ): Promise<Prisma.Result<T, A, 'findMany'>> {\r\n          const { cache: _cache, ...rest } = args;\r\n          const cache = _cache as CacheArgs['cache'];\r\n          const ctx = Prisma.getExtensionContext(this);\r\n\r\n          if (cache) {\r\n            const cachedResult = await redis.get<string>(cache.id);\r\n\r\n            if (cachedResult && isSuperJSONResult(cachedResult)) {\r\n              return deserialize<Prisma.Result<T, A, 'findMany'>>(cachedResult);\r\n            }\r\n          }\r\n\r\n          const result = await (ctx as unknown as { $parent: { [key: string]: PrismaModel } }).$parent[ctx.$name as string].findMany(rest) as Prisma.Result<T, A, 'findMany'>;\r\n\r\n          if (cache && result) {\r\n            const serializedResult = stringify(result);\r\n\r\n            if (cache.ttl) {\r\n              await redis.set(cache.id, serializedResult, { ex: cache.ttl });\r\n            } else {\r\n              await redis.set(cache.id, serializedResult);\r\n            }\r\n          }\r\n\r\n          return result;\r\n        },\r\n        async create<T, A>(\r\n          this: T,\r\n          args: Prisma.Args<T, 'create'> & CacheArgs,\r\n        ): Promise<Prisma.Result<T, A, 'create'>> {\r\n          const { cache: _cache, ...rest } = args;\r\n          const cache = _cache as CacheArgs['cache'];\r\n          const ctx = Prisma.getExtensionContext(this);\r\n\r\n          if (cache) {\r\n            await redis.del(cache.id);\r\n          }\r\n\r\n          const result = await (ctx as unknown as { $parent: { [key: string]: PrismaModel } }).$parent[ctx.$name as string].create(rest) as Prisma.Result<T, A, 'create'>;\r\n\r\n          return result;\r\n        },\r\n        async update<T, A>(\r\n          this: T,\r\n          args: Prisma.Args<T, 'update'> & CacheArgs,\r\n        ): Promise<Prisma.Result<T, A, 'update'>> {\r\n          const { cache: _cache, ...rest } = args;\r\n          const cache = _cache as CacheArgs['cache'];\r\n          const ctx = Prisma.getExtensionContext(this);\r\n\r\n          if (cache) {\r\n            await redis.del(cache.id);\r\n          }\r\n\r\n          const result = await (ctx as unknown as { $parent: { [key: string]: PrismaModel } }).$parent[ctx.$name as string].update(rest) as Prisma.Result<T, A, 'update'>;\r\n\r\n          return result;\r\n        },\r\n        async delete<T, A>(\r\n          this: T,\r\n          args: Prisma.Args<T, 'delete'> & CacheArgs,\r\n        ): Promise<Prisma.Result<T, A, 'delete'>> {\r\n          const { cache: _cache, ...rest } = args;\r\n          const cache = _cache as CacheArgs['cache'];\r\n          const ctx = Prisma.getExtensionContext(this);\r\n\r\n          if (cache) {\r\n            await redis.del(cache.id);\r\n          }\r\n\r\n          const result = await (ctx as unknown as { $parent: { [key: string]: PrismaModel } }).$parent[ctx.$name as string].delete(rest) as Prisma.Result<T, A, 'delete'>;\r\n\r\n          return result;\r\n        },\r\n      },\r\n    },\r\n  });\r\n};\r\n"]}