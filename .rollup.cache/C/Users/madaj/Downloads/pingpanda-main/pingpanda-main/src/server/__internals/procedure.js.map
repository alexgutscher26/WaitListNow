{"version":3,"file":"procedure.js","sourceRoot":"","sources":["procedure.ts"],"names":[],"mappings":";AAIA,OAAO,SAAS,MAAM,WAAW,CAAC;AAmBlC;IAsBE,mBAAY,WAAmC;QAAnC,4BAAA,EAAA,gBAAmC;QAA/C,iBAOC;QA5BgB,gBAAW,GAAsB,EAAE,CAAC;QA+CrD,UAAK,GAAG,UAAyC,MAA2B,IAAK,OAAA,CAAC;YAChF,KAAK,EAAE,UACL,EAQ4D,IACzB,OAAA,CAAC;gBACpC,IAAI,EAAE,OAAO;gBACb,MAAM,QAAA;gBACN,OAAO,EAAE,EAAS;gBAClB,WAAW,EAAE,KAAI,CAAC,WAAW;aAC9B,CAAC,EALmC,CAKnC;YAEF,QAAQ,EAAE,UACR,EAQ4D,IACtB,OAAA,CAAC;gBACvC,IAAI,EAAE,UAAU;gBAChB,MAAM,QAAA;gBACN,OAAO,EAAE,EAAS;gBAClB,WAAW,EAAE,KAAI,CAAC,WAAW;aAC9B,CAAC,EALsC,CAKtC;SACH,CAAC,EAlC+E,CAkC/E,CAAC;QA3DD,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAE/B,2DAA2D;QAC3D,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAC,EAAE,IAAK,OAAA,EAAE,CAAC,IAAI,KAAK,qBAAqB,EAAjC,CAAiC,CAAC,EAAE,CAAC;YACtE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;QACvD,CAAC;IACH,CAAC;IA1BD;;;OAGG;IACkB,6BAAmB,GAAxC;4DAA8C,EAGb;gBAF/B,CAAC,OAAA,EACD,IAAI,UAAA;;;;wBAEJ,CAAC,CAAC,SAAS,GAAG,CAAC,UAAC,IAAa,EAAE,MAAmB;4BAChD,IAAM,UAAU,GAAG,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;4BAC7C,OAAO,IAAI,QAAQ,CAAC,UAAU,EAAE;gCAC9B,MAAM,EAAE,MAAM,IAAI,GAAG;gCACrB,OAAO,EAAE,EAAE,cAAc,EAAE,uBAAuB,EAAE;6BACrD,CAAC,CAAC;wBACL,CAAC,CAAkB,CAAC;wBAEb,qBAAM,IAAI,EAAE,EAAA;4BAAnB,sBAAO,SAAY,EAAC;;;;KACrB;IAWD;;OAEG;IACH,uBAAG,GAAH,UACE,EAQqB;QAErB,OAAO,IAAI,SAAS,iCAAuB,IAAI,CAAC,WAAW,UAAE,EAAS,UAAE,CAAC;IAC3E,CAAC;IAsCD;;OAEG;IACH,yBAAK,GAAL,UACE,EAQ8E;QAE9E,OAAO;YACL,IAAI,EAAE,OAAO;YACb,OAAO,EAAE,EAAS;YAClB,WAAW,EAAE,IAAI,CAAC,WAAW;SAC9B,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,4BAAQ,GAAR,UACE,EAQ4D;QAE5D,OAAO;YACL,IAAI,EAAE,UAAU;YAChB,OAAO,EAAE,EAAS;YAClB,WAAW,EAAE,IAAI,CAAC,WAAW;SAC9B,CAAC;IACJ,CAAC;IACH,gBAAC;AAAD,CAAC,AA7HD,IA6HC","sourcesContent":["import { Context, TypedResponse } from 'hono';\r\nimport { z } from 'zod';\r\nimport { Middleware, MutationOperation, QueryOperation } from './types';\r\nimport { StatusCode } from 'hono/utils/http-status';\r\nimport superjson from 'superjson';\r\nimport { Bindings } from '../env';\r\n\r\n/**\r\n * Type-level SuperJSON integration\r\n */\r\ndeclare module 'hono' {\r\n  interface Context {\r\n    superjson: <T>(data: T, status?: number) => SuperJSONTypedResponse<T>;\r\n  }\r\n}\r\n\r\ntype SuperJSONParsedType<T> = ReturnType<typeof superjson.parse<T>>;\r\nexport type SuperJSONTypedResponse<T, U extends StatusCode = StatusCode> = TypedResponse<\r\n  SuperJSONParsedType<T>,\r\n  U,\r\n  'json'\r\n>;\r\n\r\nexport class Procedure<ctx = Record<string, never>> {\r\n  private readonly middlewares: Middleware<ctx>[] = [];\r\n\r\n  /**\r\n   * Optional, but recommended:\r\n   * This makes \"c.superjson\" available to your API routes\r\n   */\r\n  private static async superjsonMiddleware<Ctx>({\r\n    c,\r\n    next,\r\n  }: Parameters<Middleware<Ctx>>[0]): Promise<unknown> {\r\n    c.superjson = ((data: unknown, status?: StatusCode): Response => {\r\n      const serialized = superjson.stringify(data);\r\n      return new Response(serialized, {\r\n        status: status || 200,\r\n        headers: { 'Content-Type': 'application/superjson' },\r\n      });\r\n    }) as typeof c.json;\r\n\r\n    return await next();\r\n  }\r\n\r\n  constructor(middlewares: Middleware<ctx>[] = []) {\r\n    this.middlewares = middlewares;\r\n\r\n    // add built-in superjson middleware if not already present\r\n    if (!this.middlewares.some((mw) => mw.name === 'superjsonMiddleware')) {\r\n      this.middlewares.push(Procedure.superjsonMiddleware);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a middleware function to the procedure chain and returns a new procedure with updated context.\r\n   */\r\n  use<T, Return = void>(\r\n    fn: ({\r\n      ctx,\r\n      next,\r\n      c,\r\n    }: {\r\n      ctx: ctx;\r\n      next: <B>(args?: B) => Promise<B & ctx>;\r\n      c: Context<{ Bindings: Bindings }>;\r\n    }) => Promise<Return>,\r\n  ): Procedure<ctx & T & Return> {\r\n    return new Procedure<ctx & T & Return>([...this.middlewares, fn as any]);\r\n  }\r\n\r\n  input = <Schema extends Record<string, unknown>>(schema: z.ZodSchema<Schema>) => ({\r\n    query: <Output>(\r\n      fn: ({\r\n        input,\r\n        ctx,\r\n        c,\r\n      }: {\r\n        input: Schema;\r\n        ctx: ctx;\r\n        c: Context<{ Bindings: Bindings }>;\r\n      }) => TypedResponse<Output> | Promise<TypedResponse<Output>>,\r\n    ): QueryOperation<Schema, Output> => ({\r\n      type: 'query',\r\n      schema,\r\n      handler: fn as any,\r\n      middlewares: this.middlewares,\r\n    }),\r\n\r\n    mutation: <Output>(\r\n      fn: ({\r\n        input,\r\n        ctx,\r\n        c,\r\n      }: {\r\n        input: Schema;\r\n        ctx: ctx;\r\n        c: Context<{ Bindings: Bindings }>;\r\n      }) => TypedResponse<Output> | Promise<TypedResponse<Output>>,\r\n    ): MutationOperation<Schema, Output> => ({\r\n      type: 'mutation',\r\n      schema,\r\n      handler: fn as any,\r\n      middlewares: this.middlewares,\r\n    }),\r\n  });\r\n\r\n  /**\r\n   * Registers a query operation with the specified function and returns it.\r\n   */\r\n  query<Output>(\r\n    fn: ({\r\n      input,\r\n      ctx,\r\n      c,\r\n    }: {\r\n      input: never;\r\n      ctx: ctx;\r\n      c: Context<{ Bindings: Bindings }>;\r\n    }) => SuperJSONTypedResponse<Output> | Promise<SuperJSONTypedResponse<Output>>,\r\n  ): QueryOperation<Record<string, never>, Output> {\r\n    return {\r\n      type: 'query',\r\n      handler: fn as any,\r\n      middlewares: this.middlewares,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Registers a mutation operation with specified handler and middleware.\r\n   */\r\n  mutation<Output>(\r\n    fn: ({\r\n      input,\r\n      ctx,\r\n      c,\r\n    }: {\r\n      input: never;\r\n      ctx: ctx;\r\n      c: Context<{ Bindings: Bindings }>;\r\n    }) => TypedResponse<Output> | Promise<TypedResponse<Output>>,\r\n  ): MutationOperation<Record<string, never>, Output> {\r\n    return {\r\n      type: 'mutation',\r\n      handler: fn as any,\r\n      middlewares: this.middlewares,\r\n    };\r\n  }\r\n}\r\n"]}