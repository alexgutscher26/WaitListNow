{"version":3,"file":"route.js","sourceRoot":"","sources":["route.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,aAAa,CAAC;AAC3C,OAAO,EAAE,EAAE,EAAE,MAAM,UAAU,CAAC;AAE9B,MAAM,UAAgB,GAAG;;;;;;;oBAGf,OAAO,GAAG;wBACd,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ;wBAC7B,WAAW,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS;wBACzD,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,OAAO;qBAC5B,CAAC;oBAGa,qBAAM,EAAE,CAAC,SAAS,uHAAA,oDAAoD,MAAA;;oBAA/E,MAAM,GAAG,SAAsE;oBAGnE,qBAAM,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC;4BAC3C,MAAM,EAAE;gCACN,EAAE,EAAE,IAAI;gCACR,IAAI,EAAE,IAAI;gCACV,IAAI,EAAE,IAAI;gCACV,MAAM,EAAE,IAAI;gCACZ,SAAS,EAAE,IAAI;gCACf,SAAS,EAAE,IAAI;gCACf,MAAM,EAAE,IAAI;gCACZ,MAAM,EAAE;oCACN,MAAM,EAAE;wCACN,WAAW,EAAE,IAAI;qCAClB;iCACF;6BACF;4BACD,OAAO,EAAE;gCACP,SAAS,EAAE,MAAM;6BAClB;yBACF,CAAC,EAAA;;oBAlBI,SAAS,GAAG,SAkBhB;oBAGqB,qBAAM,EAAE,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAA;;oBAA1C,cAAc,GAAG,SAAyB;oBACvB,qBAAM,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,EAAA;;oBAA9C,gBAAgB,GAAG,SAA2B;oBAEpD,sBAAO,YAAY,CAAC,IAAI,CAAC;4BACvB,IAAI,EAAE;gCACJ,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gCACnC,WAAW,EAAE,OAAO;gCACpB,QAAQ,EAAE,MAAM;gCAChB,MAAM,EAAE;oCACN,SAAS,EAAE,cAAc;oCACzB,WAAW,EAAE,gBAAgB;iCAC9B;6BACF;4BACD,SAAS,WAAA;yBACV,CAAC,EAAC;;;oBAEH,OAAO,CAAC,KAAK,CAAC,0BAA0B,EAAE,OAAK,CAAC,CAAC;oBACjD,sBAAO,YAAY,CAAC,IAAI,CACtB;4BACE,KAAK,EAAE,sBAAsB;4BAC7B,OAAO,EAAE,OAAK,YAAY,KAAK,CAAC,CAAC,CAAC,OAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;4BACjE,KAAK,EACH,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,IAAI,OAAK,YAAY,KAAK;gCAC9D,CAAC,CAAC,OAAK,CAAC,KAAK;gCACb,CAAC,CAAC,SAAS;yBAChB,EACD,EAAE,MAAM,EAAE,GAAG,EAAE,CAChB,EAAC;;;;;CAEL","sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { db } from '@/lib/db';\r\n\r\nexport async function GET() {\r\n  try {\r\n    // Log environment variables (excluding sensitive ones)\r\n    const envInfo = {\r\n      nodeEnv: process.env.NODE_ENV,\r\n      databaseUrl: process.env.DATABASE_URL ? '***' : 'Not set',\r\n      appEnv: process.env.APP_ENV,\r\n    };\r\n\r\n    // Get database connection info\r\n    const dbInfo = await db.$queryRaw`SELECT current_database(), current_user, version()`;\r\n\r\n    // Get all waitlists with subscriber counts\r\n    const waitlists = await db.waitlist.findMany({\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        slug: true,\r\n        status: true,\r\n        createdAt: true,\r\n        updatedAt: true,\r\n        userId: true,\r\n        _count: {\r\n          select: {\r\n            subscribers: true,\r\n          },\r\n        },\r\n      },\r\n      orderBy: {\r\n        createdAt: 'desc',\r\n      },\r\n    });\r\n\r\n    // Get total counts\r\n    const totalWaitlists = await db.waitlist.count();\r\n    const totalSubscribers = await db.subscriber.count();\r\n\r\n    return NextResponse.json({\r\n      meta: {\r\n        timestamp: new Date().toISOString(),\r\n        environment: envInfo,\r\n        database: dbInfo,\r\n        counts: {\r\n          waitlists: totalWaitlists,\r\n          subscribers: totalSubscribers,\r\n        },\r\n      },\r\n      waitlists,\r\n    });\r\n  } catch (error) {\r\n    console.error('Error in debug endpoint:', error);\r\n    return NextResponse.json(\r\n      {\r\n        error: 'Debug endpoint error',\r\n        message: error instanceof Error ? error.message : 'Unknown error',\r\n        stack:\r\n          process.env.NODE_ENV === 'development' && error instanceof Error\r\n            ? error.stack\r\n            : undefined,\r\n      },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n"]}