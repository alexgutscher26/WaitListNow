{"version":3,"file":"router.js","sourceRoot":"","sources":["router.ts"],"names":[],"mappings":"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","sourcesContent":["import { Context, Hono, Next } from 'hono';\r\nimport { HTTPException } from 'hono/http-exception';\r\nimport { MiddlewareHandler, Variables } from 'hono/types';\r\nimport { StatusCode } from 'hono/utils/http-status';\r\nimport { ZodError } from 'zod';\r\nimport { Bindings } from '../env';\r\nimport { bodyParsingMiddleware, queryParsingMiddleware } from './middleware';\r\nimport { MutationOperation, QueryOperation } from './types';\r\n\r\ntype OperationType<I extends Record<string, unknown>, O> =\r\n  | QueryOperation<I, O>\r\n  | MutationOperation<I, O>;\r\n\r\n/**\r\n * Create a Hono router with specified operations and middleware.\r\n *\r\n * This function iterates over an object of operations, defining routes for each operation type (query or mutation).\r\n * It applies middlewares to each route and handles request parsing using Zod schemas if provided.\r\n * The function also sets up error handling for HTTP exceptions and unknown errors.\r\n *\r\n * @param obj - An object where keys are route identifiers and values are operation configurations.\r\n * @returns A configured Hono router instance with defined routes and middleware.\r\n */\r\nexport const router = <T extends Record<string, OperationType<any, any>>>(obj: T) => {\r\n  const route = new Hono<{ Bindings: Bindings; Variables: any }>().onError((err, c) => {\r\n    if (err instanceof HTTPException) {\r\n      return c.json(\r\n        {\r\n          error: 'Server Error',\r\n          message: err.message,\r\n          type: 'HTTPException',\r\n        },\r\n        err.status,\r\n      );\r\n    } else {\r\n      return c.json(\r\n        {\r\n          error: 'Unknown Error',\r\n          message: 'An unexpected error occurred',\r\n          type: 'UnknownError',\r\n        },\r\n        500,\r\n      );\r\n    }\r\n  });\r\n\r\n  Object.entries(obj).forEach(([key, operation]) => {\r\n    const path = `/${key}` as const;\r\n\r\n    const operationMiddlewares: MiddlewareHandler[] = operation.middlewares.map((middleware) => {\r\n      /**\r\n       * Wraps middleware execution and updates context with results.\r\n       */\r\n      const wrapperFunction = async (c: Context, next: Next) => {\r\n        const ctx = c.get('__middleware_output') ?? ({} as Record<string, never>);\r\n\r\n        /**\r\n         * Updates context with new arguments and sets middleware output.\r\n         */\r\n        const nextWrapper = <B>(args: B) => {\r\n          c.set('__middleware_output', { ...ctx, ...args });\r\n          return { ...ctx, ...args };\r\n        };\r\n\r\n        const res = await middleware({ ctx, next: nextWrapper, c });\r\n        c.set('__middleware_output', { ...ctx, ...res });\r\n\r\n        await next();\r\n      };\r\n\r\n      return wrapperFunction;\r\n    });\r\n\r\n    if (operation.type === 'query') {\r\n      if (operation.schema) {\r\n        route.get(path, queryParsingMiddleware, ...operationMiddlewares, (c) => {\r\n          const ctx = c.get('__middleware_output') || {};\r\n          const parsedQuery = c.get('parsedQuery');\r\n\r\n          let input;\r\n          try {\r\n            input = operation.schema?.parse(parsedQuery);\r\n          } catch (err) {\r\n            if (err instanceof ZodError) {\r\n              throw new HTTPException(400, {\r\n                cause: err,\r\n                message: err.message,\r\n              });\r\n            } else {\r\n              throw err;\r\n            }\r\n          }\r\n\r\n          return operation.handler({ c, ctx, input });\r\n        });\r\n      } else {\r\n        route.get(path, ...operationMiddlewares, (c) => {\r\n          const ctx = c.get('__middleware_output') || {};\r\n\r\n          return operation.handler({ c, ctx, input: undefined });\r\n        });\r\n      }\r\n    } else if (operation.type === 'mutation') {\r\n      if (operation.schema) {\r\n        route.post(path, bodyParsingMiddleware, ...operationMiddlewares, (c) => {\r\n          const ctx = c.get('__middleware_output') || {};\r\n          const parsedBody = c.get('parsedBody');\r\n\r\n          let input;\r\n          try {\r\n            input = operation.schema?.parse(parsedBody);\r\n          } catch (err) {\r\n            if (err instanceof ZodError) {\r\n              throw new HTTPException(400, {\r\n                cause: err,\r\n                message: err.message,\r\n              });\r\n            } else {\r\n              throw err;\r\n            }\r\n          }\r\n\r\n          return operation.handler({ c, ctx, input });\r\n        });\r\n      } else {\r\n        route.post(path, ...operationMiddlewares, (c) => {\r\n          const ctx = c.get('__middleware_output') || {};\r\n\r\n          return operation.handler({ c, ctx, input: undefined });\r\n        });\r\n      }\r\n    }\r\n  });\r\n\r\n  type InferInput<T> = T extends OperationType<infer I, any> ? I : Record<string, never>;\r\n  type InferOutput<T> = T extends OperationType<any, infer I> ? I : Record<string, never>;\r\n\r\n  return route as Hono<\r\n    { Bindings: Bindings; Variables: Variables },\r\n    {\r\n      [K in keyof T]: T[K] extends QueryOperation<any, any>\r\n        ? {\r\n            $get: {\r\n              input: InferInput<T[K]>;\r\n              output: InferOutput<T[K]>;\r\n              outputFormat: 'json';\r\n              status: StatusCode;\r\n            };\r\n          }\r\n        : {\r\n            $post: {\r\n              input: InferInput<T[K]>;\r\n              output: InferOutput<T[K]>;\r\n              outputFormat: 'json';\r\n              status: StatusCode;\r\n            };\r\n          };\r\n    }\r\n  >;\r\n};\r\n"]}