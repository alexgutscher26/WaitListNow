{"version":3,"file":"route.js","sourceRoot":"","sources":["route.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { auth } from '@clerk/nextjs/server';\r\nimport { db } from '@/lib/db';\r\n\r\n// Define the type for notification preferences\r\ntype NotificationPreferences = {\r\n  email: boolean;\r\n  waitlistMilestones: boolean;\r\n  dailyReports: boolean;\r\n  weeklyDigest: boolean;\r\n  signupAlerts: boolean;\r\n  integrationUpdates: boolean;\r\n  securityAlerts: boolean;\r\n  marketing: boolean;\r\n};\r\n\r\n// Default notification preferences\r\nconst defaultPreferences: NotificationPreferences = {\r\n  email: true,\r\n  waitlistMilestones: true,\r\n  dailyReports: true,\r\n  weeklyDigest: true,\r\n  signupAlerts: false,\r\n  integrationUpdates: true,\r\n  securityAlerts: true,\r\n  marketing: false,\r\n};\r\n\r\n// Helper function to parse notification preferences\r\n/**\r\n * Parses and normalizes notification preferences from a given object.\r\n *\r\n * This function checks each preference key in the input object to ensure it is a boolean.\r\n * If a preference is missing or not a boolean, it defaults to the corresponding value from `defaultPreferences`.\r\n *\r\n * @param prefs - An object containing user-defined notification preferences.\r\n * @returns A normalized object of notification preferences with boolean values.\r\n */\r\nfunction parseNotificationPreferences(prefs: any): NotificationPreferences {\r\n  if (!prefs || typeof prefs !== 'object') {\r\n    return { ...defaultPreferences };\r\n  }\r\n\r\n  return {\r\n    email: typeof prefs.email === 'boolean' ? prefs.email : defaultPreferences.email,\r\n    waitlistMilestones:\r\n      typeof prefs.waitlistMilestones === 'boolean'\r\n        ? prefs.waitlistMilestones\r\n        : defaultPreferences.waitlistMilestones,\r\n    dailyReports:\r\n      typeof prefs.dailyReports === 'boolean'\r\n        ? prefs.dailyReports\r\n        : defaultPreferences.dailyReports,\r\n    weeklyDigest:\r\n      typeof prefs.weeklyDigest === 'boolean'\r\n        ? prefs.weeklyDigest\r\n        : defaultPreferences.weeklyDigest,\r\n    signupAlerts:\r\n      typeof prefs.signupAlerts === 'boolean'\r\n        ? prefs.signupAlerts\r\n        : defaultPreferences.signupAlerts,\r\n    integrationUpdates:\r\n      typeof prefs.integrationUpdates === 'boolean'\r\n        ? prefs.integrationUpdates\r\n        : defaultPreferences.integrationUpdates,\r\n    securityAlerts:\r\n      typeof prefs.securityAlerts === 'boolean'\r\n        ? prefs.securityAlerts\r\n        : defaultPreferences.securityAlerts,\r\n    marketing:\r\n      typeof prefs.marketing === 'boolean' ? prefs.marketing : defaultPreferences.marketing,\r\n  };\r\n}\r\n\r\n/**\r\n * Fetches and returns the user's notification preferences based on authentication.\r\n *\r\n * The function first authenticates the user and retrieves their ID. It then attempts to find the user by either their internal or external ID.\r\n * If the user is found, it parses and returns their notification preferences. If not, it returns default preferences. Errors during this process\r\n * are caught and logged, with an appropriate error message returned to the client.\r\n *\r\n * @returns A JSON response containing either the user's notification preferences or a default set of preferences.\r\n */\r\nexport async function GET() {\r\n  try {\r\n    const authResult = await auth();\r\n    if (!authResult.userId) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n    const userId = authResult.userId;\r\n\r\n    // Try to find user by ID or externalId\r\n    const user = await db.user.findFirst({\r\n      where: {\r\n        OR: [{ id: userId }, { externalId: userId }],\r\n      },\r\n      select: {\r\n        notificationPreferences: true,\r\n      },\r\n    });\r\n\r\n    // If user not found, return default preferences\r\n    if (!user) {\r\n      return NextResponse.json(defaultPreferences);\r\n    }\r\n\r\n    // Parse and return the user's notification preferences\r\n    const preferences = parseNotificationPreferences(user.notificationPreferences);\r\n    return NextResponse.json(preferences);\r\n  } catch (error) {\r\n    console.error('Error fetching notification preferences:', error);\r\n    return NextResponse.json(\r\n      { error: 'Failed to fetch notification preferences' },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Handles updating notification preferences for a user via a PUT request.\r\n *\r\n * This function first authenticates the request and retrieves the user's ID.\r\n * It then parses and validates the incoming preferences. The function checks if a user exists by either their ID or externalId.\r\n * If a user with the externalId already exists, it updates the user's ID to match the authenticated user ID and updates the preferences.\r\n * If no such user exists, it creates a new user entry with the provided details and preferences.\r\n * If the user already exists, it simply updates their notification preferences.\r\n *\r\n * @param request - The incoming HTTP request containing user preferences.\r\n * @returns A JSON response with the updated preferences or an error message.\r\n */\r\nexport async function PUT(request: Request) {\r\n  try {\r\n    const authResult = await auth();\r\n    if (!authResult.userId) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n    const userId = authResult.userId;\r\n\r\n    const preferences = await request.json();\r\n\r\n    try {\r\n      // Parse and validate the incoming preferences\r\n      const validPreferences = parseNotificationPreferences(preferences);\r\n\r\n      // First, check if user exists by ID or externalId\r\n      let user = await db.user.findFirst({\r\n        where: {\r\n          OR: [{ id: userId }, { externalId: userId }],\r\n        },\r\n      });\r\n\r\n      if (!user) {\r\n        // Check if a user with this externalId already exists\r\n        const existingUser = await db.user.findFirst({\r\n          where: { externalId: userId },\r\n        });\r\n\r\n        if (existingUser) {\r\n          // Update the existing user's ID to match the auth user ID\r\n          await db.user.update({\r\n            where: { id: existingUser.id },\r\n            data: { id: userId },\r\n          });\r\n\r\n          // Update the user's preferences\r\n          await db.user.update({\r\n            where: { id: userId },\r\n            data: { notificationPreferences: validPreferences },\r\n          });\r\n        } else {\r\n          // Create a new user if none exists with either ID or externalId\r\n          user = await db.user.create({\r\n            data: {\r\n              id: userId,\r\n              email: `user-${userId}@example.com`,\r\n              name: 'New User',\r\n              notificationPreferences: validPreferences,\r\n              plan: 'FREE',\r\n              apiKey:\r\n                Math.random().toString(36).substring(2, 15) +\r\n                Math.random().toString(36).substring(2, 15),\r\n              externalId: userId,\r\n            },\r\n          });\r\n        }\r\n      } else {\r\n        // Update existing user's preferences\r\n        await db.user.update({\r\n          where: { id: user.id },\r\n          data: { notificationPreferences: validPreferences },\r\n        });\r\n      }\r\n\r\n      return NextResponse.json(validPreferences);\r\n    } catch (error) {\r\n      console.error('Error updating notification preferences:', error);\r\n      return NextResponse.json(\r\n        {\r\n          error:\r\n            error instanceof Error ? error.message : 'Failed to update notification preferences',\r\n          details: process.env.NODE_ENV === 'development' ? (error as any).message : undefined,\r\n        },\r\n        { status: 500 },\r\n      );\r\n    }\r\n  } catch (error) {\r\n    console.error('Error updating notification preferences:', error);\r\n    return NextResponse.json(\r\n      { error: 'Failed to update notification preferences' },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n"]}