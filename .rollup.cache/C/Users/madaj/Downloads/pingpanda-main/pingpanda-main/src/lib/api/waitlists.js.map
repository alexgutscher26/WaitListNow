{"version":3,"file":"waitlists.js","sourceRoot":"","sources":["waitlists.ts"],"names":[],"mappings":";AAEA,IAAM,OAAO,GAAG,gBAAgB,CAAC;AAEjC;;GAEG;AACH,MAAM,UAAgB,YAAY;;;;;wBACf,qBAAM,KAAK,CAAC,OAAO,CAAC,EAAA;;oBAA/B,QAAQ,GAAG,SAAoB;yBAEjC,CAAC,QAAQ,CAAC,EAAE,EAAZ,wBAAY;oBACA,qBAAM,QAAQ,CAAC,IAAI,EAAE,EAAA;;oBAA7B,KAAK,GAAG,SAAqB;oBACnC,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,IAAI,2BAA2B,CAAC,CAAC;wBAGhE,sBAAO,QAAQ,CAAC,IAAI,EAAE,EAAC;;;;CACxB;AAED;;GAEG;AACH,MAAM,UAAgB,cAAc,CAAC,IAAwB;;;;;wBAC1C,qBAAM,KAAK,CAAC,OAAO,EAAE;wBACpC,MAAM,EAAE,MAAM;wBACd,OAAO,EAAE;4BACP,cAAc,EAAE,kBAAkB;yBACnC;wBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;qBAC3B,CAAC,EAAA;;oBANI,QAAQ,GAAG,SAMf;yBAEE,CAAC,QAAQ,CAAC,EAAE,EAAZ,wBAAY;oBACA,qBAAM,QAAQ,CAAC,IAAI,EAAE,EAAA;;oBAA7B,KAAK,GAAG,SAAqB;oBACnC,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,IAAI,2BAA2B,CAAC,CAAC;wBAGhE,sBAAO,QAAQ,CAAC,IAAI,EAAE,EAAC;;;;CACxB;AAED;;GAEG;AACH,MAAM,UAAgB,cAAc,CAAC,EAAU,EAAE,IAAiC;;;;;wBAC/D,qBAAM,KAAK,CAAC,UAAG,OAAO,cAAI,EAAE,CAAE,EAAE;wBAC/C,MAAM,EAAE,OAAO;wBACf,OAAO,EAAE;4BACP,cAAc,EAAE,kBAAkB;yBACnC;wBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;qBAC3B,CAAC,EAAA;;oBANI,QAAQ,GAAG,SAMf;yBAEE,CAAC,QAAQ,CAAC,EAAE,EAAZ,wBAAY;oBACA,qBAAM,QAAQ,CAAC,IAAI,EAAE,EAAA;;oBAA7B,KAAK,GAAG,SAAqB;oBACnC,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,IAAI,2BAA2B,CAAC,CAAC;wBAGhE,sBAAO,QAAQ,CAAC,IAAI,EAAE,EAAC;;;;CACxB;AAED;;GAEG;AACH,MAAM,UAAgB,cAAc,CAAC,EAAU;;;;;wBAC5B,qBAAM,KAAK,CAAC,UAAG,OAAO,cAAI,EAAE,CAAE,EAAE;wBAC/C,MAAM,EAAE,QAAQ;qBACjB,CAAC,EAAA;;oBAFI,QAAQ,GAAG,SAEf;yBAEE,CAAC,QAAQ,CAAC,EAAE,EAAZ,wBAAY;oBACA,qBAAM,QAAQ,CAAC,IAAI,EAAE,EAAA;;oBAA7B,KAAK,GAAG,SAAqB;oBACnC,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,IAAI,2BAA2B,CAAC,CAAC;wBAGhE,sBAAO,QAAQ,CAAC,IAAI,EAAE,EAAC;;;;CACxB","sourcesContent":["import { CreateWaitlistData } from '@/types/waitlist';\r\n\r\nconst API_URL = '/api/waitlists';\r\n\r\n/**\r\n * Fetches all waitlists for the current user\r\n */\r\nexport async function getWaitlists() {\r\n  const response = await fetch(API_URL);\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw new Error(error.message || 'Failed to fetch waitlists');\r\n  }\r\n\r\n  return response.json();\r\n}\r\n\r\n/**\r\n * Creates a new waitlist\r\n */\r\nexport async function createWaitlist(data: CreateWaitlistData) {\r\n  const response = await fetch(API_URL, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(data),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw new Error(error.message || 'Failed to create waitlist');\r\n  }\r\n\r\n  return response.json();\r\n}\r\n\r\n/**\r\n * Updates an existing waitlist\r\n */\r\nexport async function updateWaitlist(id: string, data: Partial<CreateWaitlistData>) {\r\n  const response = await fetch(`${API_URL}/${id}`, {\r\n    method: 'PATCH',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(data),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw new Error(error.message || 'Failed to update waitlist');\r\n  }\r\n\r\n  return response.json();\r\n}\r\n\r\n/**\r\n * Deletes a waitlist\r\n */\r\nexport async function deleteWaitlist(id: string) {\r\n  const response = await fetch(`${API_URL}/${id}`, {\r\n    method: 'DELETE',\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json();\r\n    throw new Error(error.message || 'Failed to delete waitlist');\r\n  }\r\n\r\n  return response.json();\r\n}\r\n"]}