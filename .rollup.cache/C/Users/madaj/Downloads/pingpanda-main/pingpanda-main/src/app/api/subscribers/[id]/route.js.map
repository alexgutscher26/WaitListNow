{"version":3,"file":"route.js","sourceRoot":"","sources":["route.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { getAuth } from '@clerk/nextjs/server';\r\nimport { db } from '@/lib/db';\r\nimport type { NextRequest } from 'next/server';\r\nimport { z } from 'zod';\r\n\r\nconst updateSubscriberSchema = z.object({\r\n  status: z.enum(['PENDING', 'VERIFIED', 'APPROVED', 'REJECTED']).optional(),\r\n});\r\n\r\nexport async function PATCH(req: NextRequest, { params }: { params: { id: string } }) {\r\n  try {\r\n    // Verify authentication\r\n    const { userId } = getAuth(req);\r\n    if (!userId) {\r\n      return new NextResponse('Unauthorized', { status: 401 });\r\n    }\r\n\r\n    // Parse and validate request body\r\n    const body = await req.json();\r\n    const validation = updateSubscriberSchema.safeParse(body);\r\n\r\n    if (!validation.success) {\r\n      return new NextResponse(\r\n        JSON.stringify({ error: 'Invalid request body', details: validation.error.issues }),\r\n        { status: 400, headers: { 'Content-Type': 'application/json' } },\r\n      );\r\n    }\r\n\r\n    const { status } = validation.data;\r\n\r\n    // Find the subscriber\r\n    const subscriber = await db.subscriber.findUnique({\r\n      where: { id: params.id },\r\n      include: {\r\n        waitlist: {\r\n          include: {\r\n            user: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    if (!subscriber) {\r\n      return new NextResponse('Subscriber not found', { status: 404 });\r\n    }\r\n\r\n    // Verify the user owns the waitlist\r\n    if (subscriber.waitlist.user.externalId !== userId) {\r\n      return new NextResponse('Unauthorized', { status: 403 });\r\n    }\r\n\r\n    // Update the subscriber\r\n    const updatedSubscriber = await db.subscriber.update({\r\n      where: { id: params.id },\r\n      data: {\r\n        status,\r\n      },\r\n    });\r\n\r\n    return new NextResponse(JSON.stringify(updatedSubscriber), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n  } catch (error) {\r\n    console.error('[SUBSCRIBER_UPDATE]', error);\r\n    return new NextResponse(\r\n      JSON.stringify({\r\n        error: 'Internal server error',\r\n        details: process.env.NODE_ENV === 'development' ? error : undefined,\r\n      }),\r\n      { status: 500, headers: { 'Content-Type': 'application/json' } },\r\n    );\r\n  }\r\n}\r\n\r\nexport async function DELETE(req: NextRequest, { params }: { params: { id: string } }) {\r\n  try {\r\n    // Verify authentication\r\n    const { userId } = getAuth(req);\r\n    if (!userId) {\r\n      return new NextResponse('Unauthorized', { status: 401 });\r\n    }\r\n\r\n    // Find the subscriber\r\n    const subscriber = await db.subscriber.findUnique({\r\n      where: { id: params.id },\r\n      include: {\r\n        waitlist: true,\r\n      },\r\n    });\r\n\r\n    if (!subscriber) {\r\n      return new NextResponse('Subscriber not found', { status: 404 });\r\n    }\r\n\r\n    // Verify the user owns the waitlist\r\n    const user = await db.user.findUnique({\r\n      where: { externalId: userId },\r\n    });\r\n\r\n    if (!user || subscriber.waitlist.userId !== user.id) {\r\n      return new NextResponse('Unauthorized', { status: 403 });\r\n    }\r\n\r\n    // Delete the subscriber\r\n    await db.subscriber.delete({\r\n      where: { id: params.id },\r\n    });\r\n\r\n    // Update the waitlist subscriber count\r\n    await db.waitlist.update({\r\n      where: { id: subscriber.waitlistId },\r\n      data: {\r\n        subscriberCount: {\r\n          decrement: 1,\r\n        },\r\n      },\r\n    });\r\n\r\n    return new NextResponse(null, { status: 204 });\r\n  } catch (error) {\r\n    console.error('[SUBSCRIBER_DELETE]', error);\r\n    return new NextResponse(\r\n      JSON.stringify({\r\n        error: 'Internal server error',\r\n        details: process.env.NODE_ENV === 'development' ? error : undefined,\r\n      }),\r\n      { status: 500, headers: { 'Content-Type': 'application/json' } },\r\n    );\r\n  }\r\n}\r\n"]}