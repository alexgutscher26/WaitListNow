{"version":3,"file":"route.js","sourceRoot":"","sources":["route.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { auth } from '@clerk/nextjs/server';\r\nimport { db } from '@/lib/db';\r\n\r\ninterface SubscriberGrowthData {\r\n  date: string;\r\n  count: number;\r\n  cumulative: number;\r\n}\r\n\r\ninterface RouteParams {\r\n  params: { id: string };\r\n}\r\n\r\nexport async function GET(request: Request, { params }: RouteParams) {\r\n  try {\r\n    const { id } = params;\r\n    const { userId } = await auth();\r\n\r\n    if (!userId) {\r\n      return new NextResponse('Unauthorized', { status: 401 });\r\n    }\r\n\r\n    // First get the database user\r\n    const dbUser = await db.user.findUnique({\r\n      where: { externalId: userId },\r\n    });\r\n\r\n    if (!dbUser) {\r\n      return new NextResponse('User not found', { status: 404 });\r\n    }\r\n\r\n    // Verify the waitlist belongs to the user\r\n    const waitlist = await db.waitlist.findFirst({\r\n      where: {\r\n        id,\r\n        userId: dbUser.id,\r\n      },\r\n    });\r\n\r\n    if (!waitlist) {\r\n      return new NextResponse('Waitlist not found', { status: 404 });\r\n    }\r\n\r\n    // Get the number of days from query params, default to 30\r\n    const { searchParams } = new URL(request.url);\r\n    const days = Math.min(Number(searchParams.get('days')) || 30, 365);\r\n\r\n    // Calculate date range\r\n    const endDate = new Date();\r\n    const startDate = new Date();\r\n    startDate.setDate(startDate.getDate() - days);\r\n\r\n    // Get daily subscriber counts\r\n    const dailyCounts = await db.$queryRaw<Array<{ date: string; count: bigint }>>`\r\n      SELECT \r\n        DATE_TRUNC('day', \"createdAt\") as date,\r\n        COUNT(*)::bigint as count\r\n      FROM \"Subscriber\"\r\n      WHERE \r\n        \"waitlistId\" = ${id}\r\n        AND \"createdAt\" >= ${startDate}\r\n        AND \"createdAt\" <= ${endDate}\r\n      GROUP BY DATE_TRUNC('day', \"createdAt\")\r\n      ORDER BY date ASC\r\n    `;\r\n\r\n    // Get the count of subscribers before the start date\r\n    const initialCount = await db.subscriber.count({\r\n      where: {\r\n        waitlistId: id,\r\n        createdAt: { lt: startDate },\r\n      },\r\n    });\r\n\r\n    // Generate data points for all days in the range, even if there are no subscribers\r\n    const dateMap = new Map<string, number>();\r\n    const currentDate = new Date(startDate);\r\n\r\n    while (currentDate <= endDate) {\r\n      const dateStr = currentDate.toISOString().split('T')[0];\r\n      dateMap.set(dateStr, 0);\r\n      currentDate.setDate(currentDate.getDate() + 1);\r\n    }\r\n\r\n    // Fill in the actual counts\r\n    dailyCounts.forEach((item) => {\r\n      const dateStr = new Date(item.date).toISOString().split('T')[0];\r\n      dateMap.set(dateStr, Number(item.count));\r\n    });\r\n\r\n    // Convert to array and calculate cumulative\r\n    let runningTotal = initialCount;\r\n    const result: SubscriberGrowthData[] = [];\r\n\r\n    // Sort dates in ascending order\r\n    const sortedDates = Array.from(dateMap.entries()).sort(\r\n      (a, b) => new Date(a[0]).getTime() - new Date(b[0]).getTime(),\r\n    );\r\n\r\n    for (const [date, count] of sortedDates) {\r\n      runningTotal += count;\r\n      result.push({\r\n        date,\r\n        count,\r\n        cumulative: runningTotal,\r\n      });\r\n    }\r\n\r\n    return NextResponse.json(result);\r\n  } catch (error) {\r\n    console.error('Error fetching subscriber growth data:', error);\r\n    return new NextResponse('Internal Server Error', { status: 500 });\r\n  }\r\n}\r\n"]}