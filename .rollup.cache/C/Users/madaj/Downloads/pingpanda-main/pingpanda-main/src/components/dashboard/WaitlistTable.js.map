{"version":3,"file":"WaitlistTable.js","sourceRoot":"","sources":["WaitlistTable.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;AACb,OAAc,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACnD,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,uBAAuB,CAAC;AACtG,OAAO,EAAE,MAAM,EAAE,MAAM,wBAAwB,CAAC;AAChD,OAAO,EAAE,KAAK,EAAE,MAAM,uBAAuB,CAAC;AAC9C,OAAO,IAAI,MAAM,WAAW,CAAC;AAC7B,OAAO,EAAE,YAAY,EAAE,mBAAmB,EAAE,mBAAmB,EAAE,gBAAgB,EAAE,MAAM,+BAA+B,CAAC;AACzH,OAAO,EAAE,cAAc,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,IAAI,QAAQ,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AACpF,OAAO,EAAE,KAAK,EAAE,MAAM,QAAQ,CAAC;AAC/B,OAAO,EAAE,MAAM,EAAE,aAAa,EAAE,YAAY,EAAE,WAAW,EAAE,iBAAiB,EAAE,YAAY,EAAE,MAAM,wBAAwB,CAAC;AAa3H,IAAM,aAAa,GAAiC,UAAC,EAAa;QAAX,SAAS,eAAA;IACxD,IAAA,KAAsC,QAAQ,CAAC,SAAS,CAAC,EAAxD,cAAc,QAAA,EAAE,iBAAiB,QAAuB,CAAC;IAC1D,IAAA,KAA8B,QAAQ,CAAgB,IAAI,CAAC,EAA1D,UAAU,QAAA,EAAE,aAAa,QAAiC,CAAC;IAC5D,IAAA,KAAoC,QAAQ,CAAgB,IAAI,CAAC,EAAhE,aAAa,QAAA,EAAE,gBAAgB,QAAiC,CAAC;IAExE,IAAM,cAAc,GAAG,UAAC,EAAU;QAChC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,UAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,uBAAa,EAAE,CAAE,CAAC,CAAC;QAC1E,KAAK,CAAC,OAAO,CAAC,oCAAoC,CAAC,CAAC;IACtD,CAAC,CAAC;IAEF,IAAM,YAAY,GAAG,UAAC,EAAU;QAC9B,gBAAgB,CAAC,EAAE,CAAC,CAAC;IACvB,CAAC,CAAC;IAEF,IAAM,aAAa,GAAG;;;;;oBACpB,IAAI,CAAC,aAAa;wBAAE,sBAAO;oBAC3B,aAAa,CAAC,aAAa,CAAC,CAAC;;;;oBAEf,qBAAM,KAAK,CAAC,yBAAkB,aAAa,CAAE,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,EAAA;;oBAA1E,GAAG,GAAG,SAAoE;oBAChF,IAAI,CAAC,GAAG,CAAC,EAAE;wBAAE,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;oBAC1D,iBAAiB,CAAC,UAAC,IAAI,IAAK,OAAA,IAAI,CAAC,MAAM,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,EAAE,KAAK,aAAa,EAAtB,CAAsB,CAAC,EAA1C,CAA0C,CAAC,CAAC;oBACxE,KAAK,CAAC,OAAO,CAAC,gCAAgC,CAAC,CAAC;;;;oBAEhD,KAAK,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;;;oBAE1C,aAAa,CAAC,IAAI,CAAC,CAAC;oBACpB,gBAAgB,CAAC,IAAI,CAAC,CAAC;;;;;SAE1B,CAAC;IAEF,OAAO,CACL,eAAK,SAAS,EAAC,mCAAmC,aAChD,MAAC,KAAK,eACJ,KAAC,WAAW,cACV,MAAC,QAAQ,eACP,KAAC,SAAS,uBAAiB,EAC3B,KAAC,SAAS,8BAAwB,EAClC,KAAC,SAAS,0BAAoB,EAC9B,KAAC,SAAS,yBAAmB,IACpB,GACC,EACd,KAAC,SAAS,cACP,cAAc,CAAC,GAAG,CAAC,UAAC,QAAQ,IAAK,OAAA,CAChC,MAAC,QAAQ,eACP,KAAC,SAAS,IAAC,SAAS,EAAC,aAAa,YAChC,eAAK,SAAS,EAAC,yBAAyB,aACtC,cAAK,SAAS,EAAC,qEAAqE,YAClF,KAAC,KAAK,IAAC,SAAS,EAAC,wBAAwB,GAAG,GACxC,EACN,0BACE,YAAG,SAAS,EAAC,aAAa,YAAE,QAAQ,CAAC,IAAI,GAAK,EAC9C,aAAG,SAAS,EAAC,+BAA+B,aACzC,QAAQ,CAAC,WAAW,oBACnB,IACA,IACF,GACI,EACZ,KAAC,SAAS,cACR,KAAC,UAAU,IAAC,UAAU,EAAE,QAAQ,CAAC,SAAS,GAAI,GACpC,EACZ,KAAC,SAAS,cACR,KAAC,KAAK,IAAC,OAAO,EAAC,SAAS,EAAC,SAAS,EAAC,oCAAoC,uBAE/D,GACE,EACZ,KAAC,SAAS,cACR,MAAC,YAAY,eACX,KAAC,mBAAmB,IAAC,OAAO,kBAC1B,KAAC,MAAM,IAAC,OAAO,EAAC,OAAO,EAAC,IAAI,EAAC,MAAM,YACjC,KAAC,cAAc,IAAC,SAAS,EAAC,SAAS,GAAG,GAC/B,GACW,EACtB,MAAC,mBAAmB,IAAC,KAAK,EAAC,KAAK,aAC9B,KAAC,gBAAgB,IAAC,OAAO,kBACvB,MAAC,IAAI,IAAC,IAAI,EAAE,+BAAwB,QAAQ,CAAC,EAAE,UAAO,aACpD,KAAC,IAAI,IAAC,SAAS,EAAC,cAAc,GAAG,aAC5B,GACU,EACnB,MAAC,gBAAgB,IAAC,OAAO,EAAE,cAAM,OAAA,cAAc,CAAC,QAAQ,CAAC,EAAE,CAAC,EAA3B,CAA2B,aAC1D,KAAC,QAAQ,IAAC,SAAS,EAAC,cAAc,GAAG,kBACpB,EACnB,MAAC,gBAAgB,IACf,OAAO,EAAE,cAAM,OAAA,YAAY,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAzB,CAAyB,EACxC,SAAS,EAAC,cAAc,EACxB,QAAQ,EAAE,UAAU,KAAK,QAAQ,CAAC,EAAE,aAEpC,KAAC,KAAK,IAAC,SAAS,EAAC,cAAc,GAAG,EACjC,UAAU,KAAK,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,QAAQ,IACrC,IACC,IACT,GACL,KAhDC,QAAQ,CAAC,EAAE,CAiDf,CACZ,EAnDiC,CAmDjC,CAAC,GACQ,IACN,EACR,KAAC,MAAM,IAAC,IAAI,EAAE,CAAC,CAAC,aAAa,EAAE,YAAY,EAAE,UAAC,IAAI,IAAK,OAAA,CAAC,IAAI,IAAI,gBAAgB,CAAC,IAAI,CAAC,EAA/B,CAA+B,YACpF,MAAC,aAAa,eACZ,MAAC,YAAY,eACX,KAAC,WAAW,kCAA8B,EAC1C,KAAC,iBAAiB,+FAEE,IACP,EACf,MAAC,YAAY,eACX,KAAC,MAAM,IAAC,OAAO,EAAC,SAAS,EAAC,OAAO,EAAE,cAAM,OAAA,gBAAgB,CAAC,IAAI,CAAC,EAAtB,CAAsB,EAAE,QAAQ,EAAE,UAAU,KAAK,IAAI,uBAErF,EACT,KAAC,MAAM,IAAC,OAAO,EAAC,aAAa,EAAC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,UAAU,KAAK,IAAI,YAChF,UAAU,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,QAAQ,GAC/B,IACI,IACD,GACT,IACL,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,IAAM,UAAU,GAAqC,UAAC,EAAc;QAAZ,UAAU,gBAAA;IAC1D,IAAA,KAA4B,QAAQ,CAAC,UAAU,CAAC,EAA/C,SAAS,QAAA,EAAE,YAAY,QAAwB,CAAC;IACvD,SAAS,CAAC;QACR,YAAY,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,kBAAkB,EAAE,CAAC,CAAC;IAC1D,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;IACjB,OAAO,yBAAO,SAAS,GAAQ,CAAC;AAClC,CAAC,CAAC;AAEF,eAAe,aAAa,CAAC","sourcesContent":["'use client';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport Link from 'next/link';\r\nimport { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuItem } from '@/components/ui/dropdown-menu';\r\nimport { MoreHorizontal, Users, Edit, Link as LinkIcon, Trash } from 'lucide-react';\r\nimport { toast } from 'sonner';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';\r\n\r\ninterface Waitlist {\r\n  id: string;\r\n  name: string;\r\n  subscribers: number;\r\n  createdAt: string;\r\n}\r\n\r\ninterface WaitlistTableProps {\r\n  waitlists: Waitlist[];\r\n}\r\n\r\nconst WaitlistTable: React.FC<WaitlistTableProps> = ({ waitlists }) => {\r\n  const [waitlistsState, setWaitlistsState] = useState(waitlists);\r\n  const [deletingId, setDeletingId] = useState<string | null>(null);\r\n  const [pendingDelete, setPendingDelete] = useState<string | null>(null);\r\n\r\n  const handleCopyLink = (id: string) => {\r\n    navigator.clipboard.writeText(`${window.location.origin}/waitlist/${id}`);\r\n    toast.success('Waitlist link copied to clipboard.');\r\n  };\r\n\r\n  const handleDelete = (id: string) => {\r\n    setPendingDelete(id);\r\n  };\r\n\r\n  const confirmDelete = async () => {\r\n    if (!pendingDelete) return;\r\n    setDeletingId(pendingDelete);\r\n    try {\r\n      const res = await fetch(`/api/waitlists/${pendingDelete}`, { method: 'DELETE' });\r\n      if (!res.ok) throw new Error('Failed to delete waitlist');\r\n      setWaitlistsState((prev) => prev.filter((w) => w.id !== pendingDelete));\r\n      toast.success('Waitlist deleted successfully.');\r\n    } catch (error) {\r\n      toast.error('Failed to delete waitlist.');\r\n    } finally {\r\n      setDeletingId(null);\r\n      setPendingDelete(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"overflow-hidden rounded-lg border\">\r\n      <Table>\r\n        <TableHeader>\r\n          <TableRow>\r\n            <TableHead>Name</TableHead>\r\n            <TableHead>Subscribers</TableHead>\r\n            <TableHead>Created</TableHead>\r\n            <TableHead>Status</TableHead>\r\n          </TableRow>\r\n        </TableHeader>\r\n        <TableBody>\r\n          {waitlistsState.map((waitlist) => (\r\n            <TableRow key={waitlist.id}>\r\n              <TableCell className=\"font-medium\">\r\n                <div className=\"flex items-center gap-3\">\r\n                  <div className=\"h-10 w-10 rounded-full bg-brand-50 flex items-center justify-center\">\r\n                    <Users className=\"h-5 w-5 text-brand-600\" />\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"font-medium\">{waitlist.name}</p>\r\n                    <p className=\"text-sm text-muted-foreground\">\r\n                      {waitlist.subscribers} subscribers\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </TableCell>\r\n              <TableCell>\r\n                <ClientDate dateString={waitlist.createdAt} />\r\n              </TableCell>\r\n              <TableCell>\r\n                <Badge variant=\"outline\" className=\"text-xs bg-green-50 text-green-700\">\r\n                  Active\r\n                </Badge>\r\n              </TableCell>\r\n              <TableCell>\r\n                <DropdownMenu>\r\n                  <DropdownMenuTrigger asChild>\r\n                    <Button variant=\"ghost\" size=\"icon\">\r\n                      <MoreHorizontal className=\"h-5 w-5\" />\r\n                    </Button>\r\n                  </DropdownMenuTrigger>\r\n                  <DropdownMenuContent align=\"end\">\r\n                    <DropdownMenuItem asChild>\r\n                      <Link href={`/dashboard/waitlists/${waitlist.id}/edit`}>\r\n                        <Edit className=\"mr-2 h-4 w-4\" /> Edit\r\n                      </Link>\r\n                    </DropdownMenuItem>\r\n                    <DropdownMenuItem onClick={() => handleCopyLink(waitlist.id)}>\r\n                      <LinkIcon className=\"mr-2 h-4 w-4\" /> Copy Link\r\n                    </DropdownMenuItem>\r\n                    <DropdownMenuItem\r\n                      onClick={() => handleDelete(waitlist.id)}\r\n                      className=\"text-red-600\"\r\n                      disabled={deletingId === waitlist.id}\r\n                    >\r\n                      <Trash className=\"mr-2 h-4 w-4\" />\r\n                      {deletingId === waitlist.id ? 'Deleting...' : 'Delete'}\r\n                    </DropdownMenuItem>\r\n                  </DropdownMenuContent>\r\n                </DropdownMenu>\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n      <Dialog open={!!pendingDelete} onOpenChange={(open) => !open && setPendingDelete(null)}>\r\n        <DialogContent>\r\n          <DialogHeader>\r\n            <DialogTitle>Delete Waitlist</DialogTitle>\r\n            <DialogDescription>\r\n              Are you sure you want to delete this waitlist? This action cannot be undone.\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n          <DialogFooter>\r\n            <Button variant=\"outline\" onClick={() => setPendingDelete(null)} disabled={deletingId !== null}>\r\n              Cancel\r\n            </Button>\r\n            <Button variant=\"destructive\" onClick={confirmDelete} disabled={deletingId !== null}>\r\n              {deletingId ? 'Deleting...' : 'Delete'}\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ClientDate: React.FC<{ dateString: string }> = ({ dateString }) => {\r\n  const [formatted, setFormatted] = useState(dateString);\r\n  useEffect(() => {\r\n    setFormatted(new Date(dateString).toLocaleDateString());\r\n  }, [dateString]);\r\n  return <span>{formatted}</span>;\r\n};\r\n\r\nexport default WaitlistTable; "]}