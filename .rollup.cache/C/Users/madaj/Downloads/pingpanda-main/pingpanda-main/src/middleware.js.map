{"version":3,"file":"middleware.js","sourceRoot":"","sources":["middleware.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,eAAe,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;AAC3E,OAAO,EAAE,YAAY,EAAoB,MAAM,aAAa,CAAC;AAC7D,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAEhD,yDAAyD;AACzD,IAAM,YAAY,GAAG;IACnB,GAAG;IACH,cAAc;IACd,cAAc;IACd,kBAAkB;IAClB,UAAU;IACV,WAAW;IACX,eAAe;IACf,mBAAmB;IACnB,kBAAkB;IAClB,cAAc;CACf,CAAC;AAEF,sDAAsD;AACtD,IAAM,eAAe,GAAG;IACtB,gBAAgB;IAChB,UAAU;IACV,oFAAoF;IACpF,eAAe;IACf,oBAAoB;IACpB,sBAAsB;IACtB,4CAA4C;CAC7C,CAAC;AAEF,IAAM,aAAa,GAAG,kBAAkB,CAAC,YAAY,CAAC,CAAC;AACvD,IAAM,gBAAgB,GAAG,kBAAkB,CAAC,eAAe,CAAC,CAAC;AAE7D,IAAM,UAAU,GAAG,eAAe,CAAC,UAAO,IAAI,EAAE,GAAgB;;;;;gBACtD,QAAQ,GAAK,GAAG,CAAC,OAAO,SAAhB,CAAiB;gBAEjC,oCAAoC;gBACpC,IAAI,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC;oBACvB,aAAa,EAAE,CAAC;oBAChB,sBAAO,YAAY,CAAC,IAAI,EAAE,EAAC;gBAC7B,CAAC;gBAED,2CAA2C;gBAC3C,aAAa,EAAE,CAAC;gBAGG,qBAAM,IAAI,EAAE,EAAA;;gBAAvB,MAAM,GAAK,CAAA,SAAY,CAAA,OAAjB;gBAEd,iEAAiE;gBACjE,IAAI,CAAC,MAAM,IAAI,gBAAgB,CAAC,GAAG,CAAC,EAAE,CAAC;oBAC/B,SAAS,GAAG,IAAI,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;oBAC/C,SAAS,CAAC,YAAY,CAAC,GAAG,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;oBACrD,sBAAO,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAC;gBAC1C,CAAC;gBAED,0DAA0D;gBAC1D,IAAI,MAAM,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC;oBAC7E,YAAY,GAAG,IAAI,GAAG,CAAC,YAAY,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;oBACpD,sBAAO,YAAY,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAC;gBAC7C,CAAC;gBAED,sBAAO,YAAY,CAAC,IAAI,EAAE,EAAC;;;KAC5B,CAAC,CAAC;AAEH,eAAe,UAAU,CAAC;AAE1B,MAAM,CAAC,IAAM,MAAM,GAAG;IACpB,OAAO,EAAE;QACP,6DAA6D;QAC7D,gCAAgC;QAChC,2CAA2C;QAC3C,+BAA+B;QAC/B,kBAAkB;QAClB,mFAAmF;QACnF,4BAA4B;QAC5B,iBAAiB;KAClB;CACF,CAAC","sourcesContent":["import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server';\r\nimport { NextResponse, type NextRequest } from 'next/server';\r\nimport { trackPageview } from '@/lib/plausible';\r\n\r\n// Define public routes that don't require authentication\r\nconst publicRoutes = [\r\n  '/',\r\n  '/sign-in(.*)',\r\n  '/sign-up(.*)',\r\n  '/api/webhook(.*)',\r\n  '/pricing',\r\n  '/blog(.*)',\r\n  '/api/trpc(.*)',\r\n  '/_next/static(.*)',\r\n  '/_next/image(.*)',\r\n  '/favicon.ico',\r\n];\r\n\r\n// Define protected routes that require authentication\r\nconst protectedRoutes = [\r\n  '/dashboard(.*)',\r\n  '/welcome',\r\n  // Protect API routes by explicitly listing them instead of using negative lookahead\r\n  '/api/auth(.*)',\r\n  '/api/waitlists(.*)',\r\n  '/api/subscribers(.*)'\r\n  // Add other API routes that need protection\r\n];\r\n\r\nconst isPublicRoute = createRouteMatcher(publicRoutes);\r\nconst isProtectedRoute = createRouteMatcher(protectedRoutes);\r\n\r\nconst middleware = clerkMiddleware(async (auth, req: NextRequest) => {\r\n  const { pathname } = req.nextUrl;\r\n  \r\n  // Skip middleware for public routes\r\n  if (isPublicRoute(req)) {\r\n    trackPageview();\r\n    return NextResponse.next();\r\n  }\r\n\r\n  // Track page views for authenticated users\r\n  trackPageview();\r\n\r\n  // Get the auth state\r\n  const { userId } = await auth();\r\n\r\n  // Handle unauthenticated users trying to access protected routes\r\n  if (!userId && isProtectedRoute(req)) {\r\n    const signInUrl = new URL('/sign-in', req.url);\r\n    signInUrl.searchParams.set('redirect_url', pathname);\r\n    return NextResponse.redirect(signInUrl);\r\n  }\r\n\r\n  // Handle authenticated users trying to access auth routes\r\n  if (userId && (pathname.startsWith('/sign-in') || pathname.startsWith('/sign-up'))) {\r\n    const dashboardUrl = new URL('/dashboard', req.url);\r\n    return NextResponse.redirect(dashboardUrl);\r\n  }\r\n\r\n  return NextResponse.next();\r\n});\r\n\r\nexport default middleware;\r\n\r\nexport const config = {\r\n  matcher: [\r\n    // Match all request paths except for the ones starting with:\r\n    // - _next/static (static files)\r\n    // - _next/image (image optimization files)\r\n    // - favicon.ico (favicon file)\r\n    // - public folder\r\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\r\n    // Always run for API routes\r\n    '/(api|trpc)(.*)'\r\n  ]\r\n};\r\n"]}