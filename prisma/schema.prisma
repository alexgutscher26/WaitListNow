generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "postgresqlExtensions"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pg_trgm, pgcrypto]
}

model User {
  id                      String       @id @default(cuid())
  externalId              String?      @unique
  plan                    Plan         @default(FREE)
  email                   String       @unique
  apiKey                  String       @unique @default(cuid())
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  role                    UserRole     @default(USER)
  onboardingComplete      Boolean      @default(false)
  onboardingCompletedAt   DateTime?
  bio                     String?
  company                 String?
  name                    String?
  notificationPreferences Json?        @default("{}")
  preferences             Json?        @default("{}")
  timezone                String       @default("UTC")
  website                 String?
  referralCode            String?      @unique
  referralCount           Int          @default(0)
  waitlistPreferences     Json?        @map("waitlist_preferences") @default("{\"maxSubscribers\": 1000, \"emailNotifications\": true, \"defaultWaitlistLimit\": 1, \"autoApproveSubscribers\": true, \"requireEmailVerification\": false}")
  subscribers             Subscriber[]
  waitlists               Waitlist[]
  wantsEmail              Boolean      @default(true)

  @@index([email, apiKey])
}

model Waitlist {
  id              String         @id @default(cuid())
  name            String
  slug            String         @unique
  description     String?
  websiteUrl      String?
  redirectUrl     String?
  userId          String
  status          WaitlistStatus @default(DRAFT)
  customFields    Json?
  style           Json?
  settings        Json?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  subscriberCount Int            @default(0)
  subscribers     Subscriber[]
  user            User           @relation(fields: [userId], references: [id])

  @@index([slug, userId])
}

model Subscriber {
  id                String           @id @default(cuid())
  email             String
  name              String?
  waitlistId        String
  userId            String
  customFields      Json?
  referralCode      String?          @unique
  referredBy        String?
  status            SubscriberStatus @default(PENDING)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  verificationToken String?          @unique
  user              User             @relation(fields: [userId], references: [id])
  waitlist          Waitlist         @relation(fields: [waitlistId], references: [id])

  @@unique([email, waitlistId])
  @@index([referralCode])
}

enum UserRole {
  USER
  ADMIN
}

enum Plan {
  FREE
  PRO
  STARTER
  GROWTH
}

enum WaitlistStatus {
  DRAFT
  ACTIVE
  PAUSED
  ARCHIVED
}

enum SubscriberStatus {
  PENDING
  VERIFIED
  APPROVED
  REJECTED
}

enum DeliveryStatus {
  PENDING
  DELIVERED
  FAILED
}
