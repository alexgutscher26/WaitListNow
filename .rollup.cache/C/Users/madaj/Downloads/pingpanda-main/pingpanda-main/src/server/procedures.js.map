{"version":3,"file":"procedures.js","sourceRoot":"","sources":["procedures.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,EAAE,EAAE,MAAM,UAAU,CAAC;AAC9B,OAAO,EAAE,CAAC,EAAE,MAAM,iBAAiB,CAAC;AACpC,OAAO,EAAE,WAAW,EAAE,MAAM,sBAAsB,CAAC;AACnD,OAAO,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AAEpD,IAAM,cAAc,GAAG,CAAC,CAAC,UAAU,CAAC,iEAAO,EAAW;;QAAT,CAAC,OAAA,EAAE,IAAI,UAAA;;;;gBAC5C,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;qBAE7C,UAAU,EAAV,wBAAU;gBACN,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBAE3B,qBAAM,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC;wBACpC,KAAK,EAAE,EAAE,MAAM,QAAA,EAAE;qBAClB,CAAC,EAAA;;gBAFI,SAAO,SAEX;gBAEF,IAAI,MAAI;oBAAE,sBAAO,IAAI,CAAC,EAAE,IAAI,QAAA,EAAE,CAAC,EAAC;;oBAGrB,qBAAM,WAAW,EAAE,EAAA;;gBAA1B,IAAI,GAAG,SAAmB;gBAEhC,IAAI,CAAC,IAAI,EAAE,CAAC;oBACV,MAAM,IAAI,aAAa,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,cAAc,EAAE,CAAC,CAAC;gBAC5D,CAAC;gBAEY,qBAAM,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC;wBACpC,KAAK,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;qBAC/B,CAAC,EAAA;;gBAFI,IAAI,GAAG,SAEX;gBAEF,IAAI,CAAC,IAAI,EAAE,CAAC;oBACV,MAAM,IAAI,aAAa,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,cAAc,EAAE,CAAC,CAAC;gBAC5D,CAAC;gBAED,sBAAO,IAAI,CAAC,EAAE,IAAI,MAAA,EAAE,CAAC,EAAC;;;KACvB,CAAC,CAAC;AAEH;;;;GAIG;AACH,MAAM,CAAC,IAAM,aAAa,GAAG,CAAC,CAAC,SAAS,CAAC;AACzC,MAAM,CAAC,IAAM,eAAe,GAAG,aAAa,CAAC;AAC7C,MAAM,CAAC,IAAM,gBAAgB,GAAG,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC","sourcesContent":["import { db } from '@/lib/db';\r\nimport { j } from './__internals/j';\r\nimport { currentUser } from '@clerk/nextjs/server';\r\nimport { HTTPException } from 'hono/http-exception';\r\n\r\nconst authMiddleware = j.middleware(async ({ c, next }) => {\r\n  const authHeader = c.req.header('Authorization');\r\n\r\n  if (authHeader) {\r\n    const apiKey = authHeader.split(' ')[1]; // bearer <API_KEY>\r\n\r\n    const user = await db.user.findUnique({\r\n      where: { apiKey },\r\n    });\r\n\r\n    if (user) return next({ user });\r\n  }\r\n\r\n  const auth = await currentUser();\r\n\r\n  if (!auth) {\r\n    throw new HTTPException(401, { message: 'Unauthorized' });\r\n  }\r\n\r\n  const user = await db.user.findUnique({\r\n    where: { externalId: auth.id },\r\n  });\r\n\r\n  if (!user) {\r\n    throw new HTTPException(401, { message: 'Unauthorized' });\r\n  }\r\n\r\n  return next({ user });\r\n});\r\n\r\n/**\r\n * Public (unauthenticated) procedures\r\n *\r\n * This is the base piece you use to build new queries and mutations on your API.\r\n */\r\nexport const baseProcedure = j.procedure;\r\nexport const publicProcedure = baseProcedure;\r\nexport const privateProcedure = publicProcedure.use(authMiddleware);\r\n"]}