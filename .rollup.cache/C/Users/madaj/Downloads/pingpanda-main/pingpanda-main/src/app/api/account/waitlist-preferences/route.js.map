{"version":3,"file":"route.js","sourceRoot":"","sources":["route.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { auth } from '@clerk/nextjs/server';\r\nimport {\r\n  getUserWaitlistPreferences,\r\n  updateUserWaitlistPreferences,\r\n  type WaitlistPreferences,\r\n} from '@/lib/waitlist-preferences';\r\n\r\n// GET handler to fetch waitlist preferences\r\n/**\r\n * Handles GET requests to fetch waitlist preferences for an authenticated user.\r\n *\r\n * It first authenticates the user, retrieves the user ID from the session,\r\n * and checks if the user is authorized. If authorized, it fetches the user's waitlist preferences\r\n * and returns them in a JSON response. If any step fails, it logs the error and returns an appropriate error response.\r\n *\r\n * @returns A JSON response containing either the user's waitlist preferences or an error message.\r\n */\r\nexport async function GET() {\r\n  try {\r\n    console.log('GET /api/account/waitlist-preferences called');\r\n\r\n    const authUser = await auth();\r\n    const userId = authUser.userId;\r\n\r\n    console.log('Authenticated user ID:', userId);\r\n\r\n    if (!userId) {\r\n      console.error('No user ID found in session');\r\n      return NextResponse.json(\r\n        { error: 'Unauthorized', details: 'No user session found' },\r\n        { status: 401 },\r\n      );\r\n    }\r\n\r\n    console.log('Fetching waitlist preferences for user:', userId);\r\n    const preferences = await getUserWaitlistPreferences(userId);\r\n    console.log('Retrieved preferences:', preferences);\r\n\r\n    return NextResponse.json(preferences);\r\n  } catch (error) {\r\n    console.error('Error in GET /api/account/waitlist-preferences:', error);\r\n    return NextResponse.json(\r\n      {\r\n        error: 'Internal server error',\r\n        details: error instanceof Error ? error.message : 'Unknown error',\r\n        stack:\r\n          process.env.NODE_ENV === 'development' && error instanceof Error\r\n            ? error.stack\r\n            : undefined,\r\n      },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n\r\n// PUT handler to update waitlist preferences\r\n/**\r\n * Handles PUT requests to update waitlist preferences for a user.\r\n *\r\n * This function authenticates the user, parses and validates the request body,\r\n * updates the user's waitlist preferences in the database, and returns the updated preferences.\r\n * It handles errors related to authentication, parsing, validation, and database operations.\r\n *\r\n * @param request - The incoming HTTP request object.\r\n * @returns A JSON response containing either the updated preferences or an error message.\r\n */\r\nexport async function PUT(request: Request) {\r\n  try {\r\n    console.log('PUT /api/account/waitlist-preferences called');\r\n\r\n    const authUser = await auth();\r\n    const userId = authUser.userId;\r\n\r\n    console.log('Authenticated user ID:', userId);\r\n\r\n    if (!userId) {\r\n      console.error('No user ID found in session');\r\n      return NextResponse.json(\r\n        { error: 'Unauthorized', details: 'No user session found' },\r\n        { status: 401 },\r\n      );\r\n    }\r\n\r\n    let updates: Partial<WaitlistPreferences>;\r\n    try {\r\n      const body = await request.text();\r\n      console.log('Request body:', body);\r\n      updates = JSON.parse(body);\r\n      console.log('Parsed updates:', updates);\r\n    } catch (parseError) {\r\n      console.error('Error parsing request body:', parseError);\r\n      return NextResponse.json(\r\n        {\r\n          error: 'Invalid request body',\r\n          details: parseError instanceof Error ? parseError.message : 'Failed to parse JSON',\r\n        },\r\n        { status: 400 },\r\n      );\r\n    }\r\n\r\n    // Validate input\r\n    const validationErrors: string[] = [];\r\n\r\n    if (\r\n      updates.autoApproveSubscribers !== undefined &&\r\n      typeof updates.autoApproveSubscribers !== 'boolean'\r\n    ) {\r\n      validationErrors.push('autoApproveSubscribers must be a boolean');\r\n    }\r\n    if (\r\n      updates.emailNotifications !== undefined &&\r\n      typeof updates.emailNotifications !== 'boolean'\r\n    ) {\r\n      validationErrors.push('emailNotifications must be a boolean');\r\n    }\r\n    if (\r\n      updates.requireEmailVerification !== undefined &&\r\n      typeof updates.requireEmailVerification !== 'boolean'\r\n    ) {\r\n      validationErrors.push('requireEmailVerification must be a boolean');\r\n    }\r\n    if (\r\n      updates.maxSubscribers !== undefined &&\r\n      (typeof updates.maxSubscribers !== 'number' ||\r\n        updates.maxSubscribers < 100 ||\r\n        updates.maxSubscribers > 10000)\r\n    ) {\r\n      validationErrors.push('maxSubscribers must be a number between 100 and 10000');\r\n    }\r\n    if (\r\n      updates.defaultWaitlistLimit !== undefined &&\r\n      (typeof updates.defaultWaitlistLimit !== 'number' || updates.defaultWaitlistLimit < 1)\r\n    ) {\r\n      validationErrors.push('defaultWaitlistLimit must be a number greater than 0');\r\n    }\r\n\r\n    if (validationErrors.length > 0) {\r\n      console.error('Validation errors:', validationErrors);\r\n      return NextResponse.json(\r\n        {\r\n          error: 'Invalid input data',\r\n          details: validationErrors,\r\n        },\r\n        { status: 400 },\r\n      );\r\n    }\r\n\r\n    console.log('Updating preferences for user:', userId, 'with:', updates);\r\n    const updatedPrefs = await updateUserWaitlistPreferences(userId, updates);\r\n    console.log('Successfully updated preferences:', updatedPrefs);\r\n\r\n    return NextResponse.json(updatedPrefs);\r\n  } catch (error) {\r\n    console.error('Error in PUT /api/account/waitlist-preferences:', error);\r\n    return NextResponse.json(\r\n      {\r\n        error: 'Failed to update waitlist preferences',\r\n        details: error instanceof Error ? error.message : 'Unknown error',\r\n        stack:\r\n          process.env.NODE_ENV === 'development' && error instanceof Error\r\n            ? error.stack\r\n            : undefined,\r\n      },\r\n      { status: 500 },\r\n    );\r\n  }\r\n}\r\n"]}