{"version":3,"file":"route.js","sourceRoot":"","sources":["route.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextResponse } from 'next/server';\r\nimport type { NextRequest } from 'next/server';\r\nimport { getAuth } from '@clerk/nextjs/server';\r\nimport { db } from '@/lib/db';\r\n\r\n// Helper function to convert array of objects to CSV string\r\nfunction convertToCSV(data: Record<string, any>[]): string {\r\n  if (data.length === 0) return '';\r\n\r\n  // Get headers from the first object\r\n  const headers = Object.keys(data[0]);\r\n\r\n  // Create CSV header\r\n  let csv = headers.join(',') + '\\n';\r\n\r\n  // Add rows\r\n  data.forEach((row) => {\r\n    const values = headers.map((header) => {\r\n      const value = row[header] ?? '';\r\n      // Escape quotes and wrap in quotes if contains comma or quote\r\n      const escaped = String(value).replace(/\"/g, '\"\"');\r\n      return `\"${escaped}\"`;\r\n    });\r\n    csv += values.join(',') + '\\n';\r\n  });\r\n\r\n  return csv;\r\n}\r\n\r\nexport async function GET(req: NextRequest, { params }: { params: { id: string } }) {\r\n  try {\r\n    // Verify authentication\r\n    const { userId } = getAuth(req);\r\n    if (!userId) {\r\n      return new NextResponse('Unauthorized', { status: 401 });\r\n    }\r\n\r\n    // Get the waitlist ID from the URL parameters\r\n    const waitlistId = params.id;\r\n\r\n    // Find the user in the database\r\n    const user = await db.user.findUnique({\r\n      where: { externalId: userId },\r\n    });\r\n\r\n    if (!user) {\r\n      return new NextResponse('User not found', { status: 404 });\r\n    }\r\n\r\n    // Get the waitlist to verify ownership\r\n    const waitlist = await db.waitlist.findFirst({\r\n      where: {\r\n        id: waitlistId,\r\n        userId: user.id,\r\n      },\r\n    });\r\n\r\n    if (!waitlist) {\r\n      return new NextResponse('Waitlist not found', { status: 404 });\r\n    }\r\n\r\n    // Get all subscribers for this waitlist\r\n    const subscribers = await db.subscriber.findMany({\r\n      where: { waitlistId },\r\n      select: {\r\n        id: true,\r\n        email: true,\r\n        name: true,\r\n        createdAt: true,\r\n        status: true,\r\n        customFields: true,\r\n      },\r\n      orderBy: { createdAt: 'desc' },\r\n    });\r\n\r\n    // Transform data for CSV\r\n    const csvData = subscribers.map((subscriber) => ({\r\n      id: subscriber.id,\r\n      email: subscriber.email,\r\n      name: subscriber.name || '',\r\n      status: subscriber.status,\r\n      joined_at: subscriber.createdAt.toISOString(),\r\n      ...((subscriber.customFields as Record<string, unknown>) || {}),\r\n    }));\r\n\r\n    // Convert to CSV\r\n    const csv = convertToCSV(csvData);\r\n    const filename = `waitlist-${waitlist.slug}-subscribers-${new Date().toISOString().split('T')[0]}.csv`;\r\n\r\n    // Create response with CSV data\r\n    return new NextResponse(csv, {\r\n      status: 200,\r\n      headers: {\r\n        'Content-Type': 'text/csv',\r\n        'Content-Disposition': `attachment; filename=\"${filename}\"`,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error('[WAITLIST_EXPORT_ERROR]', error);\r\n    return new NextResponse(\r\n      JSON.stringify({\r\n        error: 'Internal server error',\r\n        details: process.env.NODE_ENV === 'development' ? String(error) : undefined,\r\n      }),\r\n      {\r\n        status: 500,\r\n        headers: { 'Content-Type': 'application/json' },\r\n      },\r\n    );\r\n  }\r\n}\r\n"]}