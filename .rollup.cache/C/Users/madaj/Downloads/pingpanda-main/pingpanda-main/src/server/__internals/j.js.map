{"version":3,"file":"j.js","sourceRoot":"","sources":["j.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAGxC,IAAM,aAAa,GAAG,IAAI,SAAS,EAAE,CAAC;AAQtC;;GAEG;AAEH,MAAM,CAAC,IAAM,CAAC,GAAG;IACf,UAAU,EAAE,UACV,EAA4B;QAE5B,OAAO,EAAE,CAAC;IACZ,CAAC;IACD,SAAS,EAAE,aAAa;CACzB,CAAC","sourcesContent":["import { Context } from 'hono';\r\nimport { Procedure } from './procedure';\r\nimport { Bindings } from '../env';\r\n\r\nconst baseProcedure = new Procedure();\r\n\r\ntype MiddlewareFunction<T = Record<string, never>, R = void> = (params: {\r\n  ctx: T;\r\n  next: <B>(args: B) => Promise<B & T>;\r\n  c: Context<{ Bindings: Bindings }>;\r\n}) => Promise<R>;\r\n\r\n/**\r\n * A helper to easily define middlewares and new procedures\r\n */\r\n\r\nexport const j = {\r\n  middleware: <T = Record<string, never>, R = void>(\r\n    fn: MiddlewareFunction<T, R>,\r\n  ): MiddlewareFunction<T, R> => {\r\n    return fn;\r\n  },\r\n  procedure: baseProcedure,\r\n};\r\n"]}