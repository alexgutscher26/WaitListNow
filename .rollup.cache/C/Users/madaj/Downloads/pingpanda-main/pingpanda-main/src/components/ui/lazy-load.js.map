{"version":3,"file":"lazy-load.js","sourceRoot":"","sources":["lazy-load.tsx"],"names":[],"mappings":";;AAAA,OAAc,EAAE,QAAQ,EAAE,IAAI,EAA4B,MAAM,OAAO,CAAC;AACxE,OAAO,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AASpD;;;;;;;GAOG;AACH,MAAM,UAAU,QAAQ,CACtB,QAAsD,EACtD,OAA2C;IAA3C,wBAAA,EAAA,YAA+B,GAAG,EAAE,KAAK,EAAE;IAE3C,IAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC;IAErC,OAAO,SAAS,WAAW,CAAC,KAAQ;QAClC,OAAO,CACL,KAAC,QAAQ,IAAC,QAAQ,EAAE,KAAC,QAAQ,IAAC,SAAS,EAAC,eAAe,GAAG,YACxD,KAAC,aAAa,eAAK,KAAK,EAAI,GACnB,CACZ,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,YAAY,CAAC,EAM5B;QALC,QAAQ,cAAA,EACR,QAAQ,cAAA;IAKR,OAAO,CACL,KAAC,QAAQ,IAAC,QAAQ,EAAE,QAAQ,IAAI,KAAC,QAAQ,IAAC,SAAS,EAAC,eAAe,GAAG,YACnE,QAAQ,GACA,CACZ,CAAC;AACJ,CAAC","sourcesContent":["import React, { Suspense, lazy, ComponentType, ReactNode } from 'react';\nimport { Skeleton } from '@/components/ui/skeleton';\n\n// Type is used in other files\ntype LazyLoadProps<T extends object> = {\n  load: () => Promise<{ default: ComponentType<T> }>;\n  loading?: () => ReactNode;\n  componentProps?: T;\n};\n\n/**\n * A higher-order component for lazy loading components with a loading fallback\n * @example\n * const HeavyComponent = lazyLoad(\n *   () => import('./HeavyComponent'),\n *   { ssr: false }\n * );\n */\nexport function lazyLoad<T extends object>(\n  importFn: () => Promise<{ default: ComponentType<T> }>,\n  options: { ssr?: boolean } = { ssr: false }\n) {\n  const LazyComponent = lazy(importFn);\n  \n  return function LazyWrapper(props: T) {\n    return (\n      <Suspense fallback={<Skeleton className=\"w-full h-full\" />}>\n        <LazyComponent {...props} />\n      </Suspense>\n    );\n  };\n}\n\n/**\n * A component that wraps its children in a Suspense boundary\n */\nexport function LazyBoundary({\n  children,\n  fallback,\n}: {\n  children: ReactNode;\n  fallback?: ReactNode;\n}) {\n  return (\n    <Suspense fallback={fallback || <Skeleton className=\"w-full h-full\" />}>\n      {children}\n    </Suspense>\n  );\n}\n"]}